{
    "version": "https://jsonfeed.org/version/1",
    "title": "林•初夏 • All posts by \"type-annotation\" tag",
    "description": "Linn 的个人博客",
    "home_page_url": "https://linn-ylz.com",
    "items": [
        {
            "id": "https://linn-ylz.com/Computer-Science/Python/python-type-annotations-and-custom-types/",
            "url": "https://linn-ylz.com/Computer-Science/Python/python-type-annotations-and-custom-types/",
            "title": "Python 类型注释及自定义类型",
            "date_published": "2023-06-22T02:39:47.000Z",
            "content_html": "<p><code>Python</code>  以其动态特性而受到许多开发者的欢迎。但是当工程项目变得越来越复杂的时候，这一特性又往往会使得开发者头疼不已。想一想，当看着一段代码，却无法确定其中变量的特定类型，无法下手编写代码。即便强行编写完成也只能在运行时检查是否出错，这无疑会对开发效率产生很大影响。</p>\n<h2 id=\"类型系统\"><a class=\"anchor\" href=\"#类型系统\">#</a> 类型系统</h2>\n<p>按照一般的分类形式， <code>Python</code>  属于动态的强类型系统的编程语言。此外， <code>Python</code>  还支持 Duck Typing 这一特性。</p>\n<p>所谓的 Duck Typing，即：</p>\n<blockquote>\n<p>If it walks like a duck and it quacks like a duck, then it must be a duck.</p>\n</blockquote>\n<p>翻译成计算机语言，就是，加入某个变量支持 A 类型的所有操作，那么我们就可以将其视为 A 类型的变量。我们可以看这样一段代码：</p>\n<pre><code class=\"language-python\">from typing import Iterable  \ndef print_items(items: Iterable):  \n    for item in items:  \n        print(item)  \n\nprint_items([1,2,3])  \nprint_items(&#123;4, 5, 6&#125;)  \nprint_items(&#123;&quot;A&quot;: 1, &quot;B&quot;: 2, &quot;C&quot;: 3&#125;)\n</code></pre>\n<p>上述的  <code>print_items</code>  函数，只要输入的  <code>items</code>  支持  <code>__iter__</code>  操作，就能够成功调用该函数。即只要支持了  <code>__iter__</code>  操作，我们就可以将  <code>items</code>  视为  <code>Iterable</code>  类型的变量。这里按照语法  <code>&lt;var&gt;: &lt;type&gt;</code>  标注的  <code>Iterable</code>  类型即  <code>Python</code>  中的一种类型注释，用于帮助开发者更方便地理解代码，并且可以通过静态类型检查工具来检查潜在的类型错误。具体细节将在本文后续内容中介绍。</p>\n<p>虽然 Duck Typing 的特性非常便利，但是它是一把双刃剑：</p>\n<ul>\n<li>Duck Typing 可以增加代码的健壮性，可以通过构建抽象类接口来支持多种类型变量的调用，不需要针对某个类型编写特定代码。</li>\n<li>但是如果滥用 Duck Typing，某些时候可能会使开发者迷惑，因为支持的某些操作可能并不符合直觉。</li>\n</ul>\n<h2 id=\"类型注释\"><a class=\"anchor\" href=\"#类型注释\">#</a> 类型注释</h2>\n<p><code>Python</code>  的动态类型在编写小规模代码时非常方便，但是当代码规模变大后，就很难知晓某段复杂代码中变量的类型，只有在运行时才能够知道其类型。对于这点， <code>Python</code>  之父 Guido van Rossum 曾经说过：</p>\n<blockquote>\n<p>I’ve learned a painful lesson that for small programs dynamic typing is great. For large programs you have to have a more disciplined approach and it helps if the language actually gives you that discipline, rather than telling you &quot;Well, you can do whatever you want.&quot;</p>\n</blockquote>\n<p>为了帮助解决这一困扰许多开发者的问题， <code>Python</code>  从 3.7 开始提供了较为完备的类型支持系统。</p>\n<p><code>Python</code>  的类型注释（Type Annotations），是一种类型提示（Type Hints），用于提示开发者某种变量的具体类型。其语法如下：</p>\n<pre><code class=\"language-python\">def find_workers_available_for_time(open_time: datetime.datetime) -&gt; list[str]:\n</code></pre>\n<p>对于通常的变量定义，也可以添加类型注释：</p>\n<pre><code class=\"language-python\">number: int = 0  \ntext: str = &quot;useless&quot;  \nvalues: list[float] = [1.2, 3.4, 6.0]  \nworker: Worker = Worker()\n</code></pre>\n<p>在  <code>Python 3.8</code>  之前，上述代码可能会报错，需要在代码开头添加  <code>from __future__ import anntations</code>  语句。如果是更老版本的  <code>Python</code> ，可以通过以下方式添加类型注释：</p>\n<pre><code class=\"language-python\">ratio = get_ratio(5,3) # type: float  \ndef get_workers(open): # type: (datetime.datetime) -&gt; List[str]\n</code></pre>\n<p>但是这种方式过于繁琐，可读性也不强，推荐使用较新版本的  <code>Python</code> 。</p>\n<p>许多人可能担心这些额外的代码会影响运行性能，但其实不必在意，因为这些代码并不会实际运行。</p>\n<p>除了提示开发者变量的代码类型之外，类型注释还能够帮助 IDE 提供自动补全功能。还可以此借助  <code>mypy</code>  等 Typechecker 来帮助检查代码的正确性。</p>\n<p>虽然类型注释有很多好处，但是我们也不需要处处使用。对于简单的代码，过多的类型注释反而会影响对实际代码的阅读。</p>\n<h2 id=\"复杂类型\"><a class=\"anchor\" href=\"#复杂类型\">#</a> 复杂类型</h2>\n<p>在上一节中的类型注释，都是由  <code>Python</code>  中的基础类型构成的。本节介绍一些其他类型以构建更复杂的类型注释。</p>\n<h3 id=\"optional\"><a class=\"anchor\" href=\"#optional\">#</a>  <code>Optional</code></h3>\n<p><code>Python</code>  中的变量可以动态绑定，都可以赋值为  <code>None</code> 。为了能够在类型中表示这一点，可以使用  <code>Optional</code>  这一类型。</p>\n<pre><code class=\"language-python\">from typing import Optional  \nmaybe_a_string: Optional[str] = &quot;abcdef&quot; # This has a value  \nmaybe_a_string: Optional[str] = None # This is the absence of a value\n</code></pre>\n<p><code>Optional</code>  能够提示这一变量有可能是  <code>None</code>  类型。能够帮助区分空值和  <code>None</code> 。</p>\n<h3 id=\"union\"><a class=\"anchor\" href=\"#union\">#</a>  <code>Union</code></h3>\n<p><code>Union</code>  用于表示一系列独立类型的并集。例如， <code>Union[int, str]</code>  表示某个变量可能是  <code>int</code>  或  <code>str</code>  中的一种。此外， <code>Union[int, None]</code>  和  <code>Optional[int]</code>  在表示上是等价的。</p>\n<h3 id=\"literal\"><a class=\"anchor\" href=\"#literal\">#</a>  <code>Literal</code></h3>\n<p><code>Literal</code>  类型可以限制某些类型的取值范围。</p>\n<pre><code class=\"language-python\">from typing import Literal  \n@dataclass  \nclass Error:  \n    error_code: Literal[1,2,3,4,5]  \n    disposed_of: bool  \n\n@dataclass  \nclass Snack:  \n    name: Literal[&quot;Pretzel&quot;, &quot;Hot Dog&quot;, &quot;Veggie Burger&quot;]  \n    condiments: set[Literal[&quot;Mustard&quot;, &quot;Ketchup&quot;]]\n</code></pre>\n<div class=\"note info\">\n<p><code>Literal</code>  在 Python 3.8 引入。They are a little more lightweight than Python enumerations. 比枚举略轻量。</p>\n</div>\n<h3 id=\"annotated\"><a class=\"anchor\" href=\"#annotated\">#</a>  <code>Annotated</code></h3>\n<p><code>Literal</code>  仅能够限定某些基本的类型，提供基本限制。无法提供像 “特定长度的字符串”，“匹配特定正则表达式的字符串” 等类型限制。</p>\n<p>在这些情形下，可以使用  <code>Annotated</code>  类型实现。</p>\n<pre><code class=\"language-python\">x: Annotated[int, ValueRange(3,5)]  \ny: Annotated[str, MatchesRegex('[0-9]&#123;4&#125;')]\n</code></pre>\n<p>不过，Typechecker 无法帮助我们检查这一类型的错误，因为类型过于复杂，无法通过静态分析得到结果。因此，我们仍然需要自行在代码中对输入做检查。这样能够使得变量类型取值范围更加明晰，使代码更清晰。</p>\n<h3 id=\"newtype\"><a class=\"anchor\" href=\"#newtype\">#</a>  <code>NewType</code></h3>\n<p><code>NewType</code>  能够帮助提供更复杂的类型表达。 <code>NewType</code>  会基于已有类型创建一个新的类型，并拥有和已有类型相同的 fields 和 methods。尽管如此，这个新创建的类型和原类型是无法互换的。</p>\n<p>可以看以下的例子：</p>\n<pre><code class=\"language-python\">from typing import NewType  \n\nclass HotDog:  \n    ''' Used to represent an unservable hot dog'''  \n    # ... snip hot dog class implementation ...  \n\nReadyToServeHotDog = NewType(&quot;ReadyToServeHotDog&quot;, HotDog)  \n\ndef dispense_to_customer(hot_dog: ReadyToServeHotDog):  \n    # ...\n</code></pre>\n<p>代码中  <code>ReadyToServeHotDog</code>  和  <code>HotDog</code>  是不等价的。在要求了  <code>ReadyToServeHotDog</code>  的时候，传递  <code>HotDog</code>  是不可行的，但是反过来是可以的。</p>\n<p>与此同时，我们需要提供一个类型转换方式，否则开发者不知道该如何得到这一新类型的对象。</p>\n<pre><code class=\"language-python\">def prepare_for_serving(hot_dog: HotDog) -&gt; ReadyToServeHotDog:  \n    assert not hot_dog.is_plated(), &quot;Hot dog should not already be plated&quot;  \n    hot_dog.put_on_plate()  \n    hot_dog.add_napkins()  \n    return ReadyToServeHotDog(hot_dog)\n\ndef make_snack():  \n    serve_to_customer(ReadyToServeHotDog(HotDog()))\n</code></pre>\n<p>这样一来，所有的  <code>ReadyToServeHotDog</code>  在创建时都会检查是否满足了特定的条件，保证了我们调用函数的正确性。这种函数称为 blessed function。我们需要告诉开发者，在任何时候，只能使用这些 blessed function 来创建我们构造的新类型。不过目前只有使用注释这种方法，暂时没有其他有效手段能够显式提醒开发者。</p>\n<p>实际上，我们可以通过创造新的  <code>class</code>  来实现类似的效果，也能够提供更有效地防止非法值类型的传入。但是相对而言， <code>NewType</code>  的实现更加轻量。</p>\n<p>需要注意， <code>NewType</code>  和类型别名不是一回事。类型别名和原类型是完全等价的，在任意时刻，语义上可以等价互换。但是  <code>NewType</code>  不是。</p>\n<p>例如  <code>IdOrName = Union[str, int]</code> ， <code>IdOrName</code>  和  <code>Union[str, int]</code>  类型是等价的。类型别名在表示某些复杂嵌套类型的时候比较直观，比如  <code>IDOrNameLookup</code>  显然比  <code>Union[dict[int, User], list[dict[str, User]]]</code>  更直观。</p>\n<h3 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a>  <code>Final</code></h3>\n<p><code>Final</code>  类型在 Python 3.8 中引入，该类型的值在赋值之后就无法再绑定到其他内容上。</p>\n<p>例如，我们定义的品牌的名称，不会轻易修改：</p>\n<pre><code class=\"language-python\">VENDOR_NAME: Final[str] = &quot;Viafore's Auto-Dog&quot;\n</code></pre>\n<p>如果开发者后续错误地尝试修改其内容，Typechecker 会报错：</p>\n<pre><code class=\"language-python\">def display_vendor_information():  \n    vendor_info = &quot;Auto-Dog v1.0&quot;  \n    # whoops, copy-paste error, this code should be vendor_info += VENDOR_NAME  \n    VENDOR_NAME += VENDOR_NAME  \n    print(vendor_info)\n</code></pre>\n<p>但是需要注意， <code>Final</code>  和  <code>C++</code>  中的  <code>const</code>  类型是不同的，因为 Python 并不限制通过函数修改对象的内容，它仅仅限制了将某个变量绑定到其他对象上。</p>\n<h2 id=\"容器类型\"><a class=\"anchor\" href=\"#容器类型\">#</a> 容器类型</h2>\n<p>除了对一般的  <code>int</code>  等基础类型之外， <code>Python</code>  中还常用  <code>list</code> 、 <code>dict</code> 、 <code>set</code>  等容器类型。相比于单个值类型的变量，其类型注释要更加复杂。</p>\n<p>看以下例子：</p>\n<pre><code class=\"language-python\">def create_author_count_mapping(cookbooks: list) -&gt; dict:  \n    counter = defaultdict(lambda: 0)  \n    for book in cookbooks:  \n        counter[book.author] += 1  \n    return counter\n</code></pre>\n<p>尽管我们知道输入是一个  <code>list</code> ，输出是一个  <code>dict</code> ，但是我们仍然不清楚其中对象的具体类型。</p>\n<p>我们可以为容器中的对象添加类型说明：</p>\n<pre><code class=\"language-python\">AuthorToCountMapping = dict[str, int] \n\ndef create_author_count_mapping(cookbooks: list[Cookbook]) -&gt; AuthorToCountMapping:  \n    counter = defaultdict(lambda: 0)  \n    for book in cookbooks:  \n        counter[book.author] += 1  \n    return counter\n</code></pre>\n<p>这里，使用类型别名表示返回值的类型，在此处的上下文语境中能更加清楚地表明代码的意图。</p>\n<h3 id=\"同构数据-vs-异构数据\"><a class=\"anchor\" href=\"#同构数据-vs-异构数据\">#</a> 同构数据 vs. 异构数据</h3>\n<p>在表示容器中的对象类型时，我们经常会遇到一个问题：如果容器中的对象类型并不总是一致的，我们该如何表示其类型？</p>\n<p>我们可以将容器分为 homogeneous collections（同构容器） 和 heterogeneous collections（异构容器） 两种类型，按其中元素类型是否一致来区分。</p>\n<p>在一般情况下，我们应当尽量使用同构容器，因为异构容器经常需要我们处理 special case，这很容易出错。同构容器不一定说明其中的元素是同一种原生类型等情形，只要我们能够对其使用完全相同的操作，那么就可以认定这些元素是同构的。</p>\n<p>对于异构容器，我们可以使用  <code>Union</code>  表示其中的元素类型：</p>\n<pre><code class=\"language-python\">Ingredient = tuple[str, int, str] # (name, quantity, units)  \nRecipe = list[Union[int, Ingredient]] # the list can be servings or ingredients  \ndef adjust_recipe(recipe: Recipe, servings):  \n# ...\n</code></pre>\n<p>如果异构容器中的类型过于复杂，我们很可能需要添加很多的类型检验代码。这时，使用一个自定义的  <code>class</code>  类型可能更加合适。</p>\n<p>如果容器中的元素类型过多，我们还可以用  <code>Any</code>  表示任意一种类型。这样，任意一种类型都是合法的。只是这样就无法再提供任何有效的参考信息。</p>\n<p>不过，对于  <code>tuple</code> ，其中的元素类型经常是异构的。</p>\n<pre><code class=\"language-python\">Cookbook = tuple[str, int] # name, page count\n</code></pre>\n<p>当然，这样的代码很容易变得难懂。因为我们需要比照每个索引对应的元素内容的含义。我们可以用  <code>dict</code>  来替换：</p>\n<pre><code class=\"language-python\">food_lab = &#123;  \n    &quot;name&quot;: &quot;The Food Lab&quot;,  \n    &quot;page_count&quot;: 958  \n&#125;\n</code></pre>\n<p>但是如此一来， <code>dict</code>  中的键值会映射到不同的类型上。我们需要用  <code>dict[str, Union[int, str]]</code>  来表示该  <code>dict</code>  的类型。</p>\n<p>对于这种复杂类型的字典，推荐用  <code>TypedDict</code> 。</p>\n<h3 id=\"typeddict\"><a class=\"anchor\" href=\"#typeddict\">#</a>  <code>TypedDict</code></h3>\n<p><code>TypedDict</code>  在 Python 3.8 中引入。用于必须在字典中存储异构类型数据的情形。</p>\n<p>对于  <code>Json</code>   <code>YAML</code>  等文件解析得到的  <code>dict</code> ，其中的数据通常都是异构的。如果我们控制了  <code>dict</code>  的创建，那么我们可以使用  <code>dataclass</code>  或者  <code>class</code>  来管理这些数据。对于解析文件得到的内容，我们仍需要通过查看文档等方法来确认。</p>\n<p>我们可以用  <code>TypedDict</code>  来解决这一问题。</p>\n<pre><code class=\"language-python\">from typing import TypedDict  \nclass Range(TypedDict):  \n    min: float  \n    max: float\n\nclass NutritionInformation(TypedDict):  \n    value: int  \n    unit: str  \n    confidenceRange95Percent: Range  \n    standardDeviation: float\n\nclass RecipeNutritionInformation(TypedDict):  \n    recipes_used: int  \n    calories: NutritionInformation  \n    fat: NutritionInformation  \n    protein: NutritionInformation  \n    carbs: NutritionInformation\n\nnutrition_information:RecipeNutritionInformation = \\  \n    get_nutrition_from_spoonacular(recipe_name)\n</code></pre>\n<p>上述代码很清晰的表示了字典中的键值对类型。当字典类型发生了变化时，我们可以通过  <code>mypy</code>  帮助检查。如果我们忘记更新该  <code>TypedDict</code> ， <code>mypy</code>  能够帮助我们找出错误。</p>\n<h3 id=\"构建新的容器类型\"><a class=\"anchor\" href=\"#构建新的容器类型\">#</a> 构建新的容器类型</h3>\n<h4 id=\"generics\"><a class=\"anchor\" href=\"#generics\">#</a>  <code>Generics</code></h4>\n<p>如果确实现有类型无法表达我们想要的内容，我们可以通过  <code>Generics</code>  帮助构建新的容器类型。</p>\n<p>Generic 类型通常表示我们不关心其中的具体类型，但是它能够帮助我们限制用户使用不正确的类型。</p>\n<pre><code class=\"language-python\">def reverse(coll: list) -&gt; list:  \n    return coll[::-1]\n</code></pre>\n<p>对于  <code>reverse</code>  函数，我们不关系其中的具体类型，但是我们知道返回的列表和传入的列表的值类型是相同的。我们可以这样表示：</p>\n<pre><code class=\"language-python\">from typing import TypeVar  \nT = TypeVar('T')  \ndef reverse(coll: list[T]) -&gt; list[T]:  \n    return coll[::-1]\n</code></pre>\n<p>这样，一个  <code>int</code>  类型的  <code>list</code>  就绝不会产生一个  <code>str</code>  类型的  <code>list</code>  的了。</p>\n<p>基于此方式，我们可以表达更复杂的类型：</p>\n<pre><code class=\"language-python\">from collections import defaultdict  \nfrom typing import Generic, TypeVar\n\nNode = TypeVar(&quot;Node&quot;)  \nEdge = TypeVar(&quot;Edge&quot;)\n\n# directed graph  \nclass Graph(Generic[Node, Edge]):  \n    def __init__(self):  \n        self.edges: dict[Node, list[Edge]] = defaultdict(list)\n        \n    def add_relation(self, node: Node, to: Edge):  \n        self.edges[node].append(to)\n        \n    def get_relations(self, node: Node) -&gt; list[Edge]:  \n        return self.edges[node]\n</code></pre>\n<p>这样，我们可以使用  <code>Graph</code>  表示更丰富的类型：</p>\n<pre><code class=\"language-python\">cookbooks: Graph[Cookbook, Cookbook] = Graph()  \nrecipes: Graph[Recipe, Recipe] = Graph()  \ncookbook_recipes: Graph[Cookbook, Recipe] = Graph()  \nrecipes.add_relation(Recipe('Pasta Bolognese'),  \n                    Recipe('Pasta with Sausage and Basil'))  \ncookbook_recipes.add_relation(Cookbook('The Food Lab'),  \n                            Recipe('Pasta Bolognese'))\n</code></pre>\n<p><code>Generic</code>  能够让我们复用更多的代码，减少错误的出现。</p>\n<p><code>Generic</code>  的其他用途：</p>\n<pre><code class=\"language-python\">def get_nutrition_info(recipe: str) -&gt; Union[NutritionInfo, APIError]:  \n# ...  \ndef get_ingredients(recipe: str) -&gt; Union[list[Ingredient], APIError]:  \n#...  \ndef get_restaurants_serving(recipe: str) -&gt; Union[list[Restaurant], APIError]:  \n# ...\n</code></pre>\n<p>显然，上述方式需要我们在每个返回值中都添加一个  <code>APIError</code>  类型，非常繁琐。我们可以这样改写：</p>\n<pre><code class=\"language-python\">T = TypeVar(&quot;T&quot;)  \nAPIResponse = Union[T, APIError]  \ndef get_nutrition_info(recipe: str) -&gt; APIResponse[NutritionInfo]:  \n    # ...  \ndef get_ingredients(recipe: str) -&gt; APIResponse[list[Ingredient]]:  \n    #...  \ndef get_restaurants_serving(recipe: str) -&gt; APIResponse[list[Restaurant]]:  \n    # ...\n</code></pre>\n<h3 id=\"修改现有类型\"><a class=\"anchor\" href=\"#修改现有类型\">#</a> 修改现有类型</h3>\n<p>有些时候，我们可以在现有类型的基础上修改，以实现我们想要的效果。假定我们想要让字典支持别名，即不同的  <code>key</code>  能够指向相同的  <code>value</code> 。如果复制多个  <code>value</code>  的话，在修改时容易漏掉其他对应  <code>key</code>  的修改。这时，我们可以通过创建  <code>dict</code>  的子类来实现以上效果。</p>\n<p>以上需求，我们可以创建一个  <code>dict</code>  的子类来实现：</p>\n<pre><code class=\"language-python\">class NutritionalInformation(dict):  \n    def __getitem__(self, key):  \n    try:  \n        return super().__getitem__(key)  \n    except KeyError:  \n        pass  \n    for alias in get_aliases(key):  \n        try:  \n            return super().__getitem__(alias)  \n        except KeyError:  \n            pass  \n    raise KeyError(f&quot;Could not find &#123;key&#125; or any of its aliases&quot;)\n</code></pre>\n<p>但是，以上的代码实现存在问题。当我们继承一个  <code>dict</code>  的时候，我们无法保证内部函数会调用我们覆盖的函数实现。内置类型的许多函数使用内联代码调用来保证性能。如果只是添加额外的方法，那么继承内置类型是可行的。但是在将来，也有可能发生类似的错误，因此最好避免继承内置类型。</p>\n<p>为了解决这一问题，我们可以使用  <code>UserDict</code> ：</p>\n<pre><code class=\"language-python\">from collections import UserDict  \nclass NutritionalInformation(UserDict):  \n    def __getitem__(self, key):  \n        try:  \n            return self.data[key]  \n        except KeyError:  \n            pass  \n        for alias in get_aliases(key):  \n            try:  \n                return self.data[alias]  \n            except KeyError:  \n                pass  \n        raise KeyError(f&quot;Could not find &#123;key&#125; or any of its aliases&quot;)\n</code></pre>\n<p>我们可以使用  <code>self.data</code>  来获取底层的原生  <code>dict</code>  数据。除此之外，还有  <code>UserList</code>  和  <code>UserString</code>  可以帮助我们对  <code>list</code>  和  <code>str</code>  实现类似的代码。不过需要注意，这些  <code>User*</code>  类型可能会带来一定的性能损耗，需要根据实际情况考虑。</p>\n<h3 id=\"抽象类型\"><a class=\"anchor\" href=\"#抽象类型\">#</a> 抽象类型</h3>\n<p>通过定义抽象类，我们可以自定义容器类型。 <code>collection.abc</code>  中提供了许多的抽象基类，我们可以根据需求使用。</p>\n<p>上一节中，我们提到了  <code>UserDict</code>   <code>UserList</code>   <code>UserString</code> ，但是并没有  <code>UserSet</code> 。本节我们基于  <code>abc</code>  来实现。</p>\n<p><code>collections.abc.Set</code>  提供了  <code>set</code>  的抽象基类定义。其中包含以下函数：</p>\n<ul>\n<li><code>__contains__</code> ：检查是否包含某个元素</li>\n<li><code>__iter__</code> ：用于迭代元素</li>\n<li><code>__len__</code> ：返回容器中的元素个数</li>\n</ul>\n<p>只要我们实现了以上三个函数，我们就可以实现一个类似的  <code>set</code> 。</p>\n<pre><code class=\"language-python\">import collections  \nclass AliasedIngredients(collections.abc.Set):  \n    def __init__(self, ingredients: set[str]):  \n        self.ingredients = ingredients  \n        \n    def __contains__(self, value: str):  \n        return value in self.ingredients or any(alias in self.ingredients for alias in get_aliases(value))  \n        \n    def __iter__(self):  \n        return iter(self.ingredients)  \n        \n    def __len__(self):  \n        return len(self.ingredients)\n\n&gt;&gt;&gt; ingredients = AliasedIngredients(&#123;'arugula', 'eggplant', 'pepper'&#125;)  \n&gt;&gt;&gt; for ingredient in ingredients:  \n&gt;&gt;&gt; print(ingredient)  \n'arugula'  \n'eggplant'  \n'pepper'\n\n&gt;&gt;&gt; print(len(ingredients))  \n3  \n&gt;&gt;&gt; print('arugula' in ingredients)  \nTrue  \n&gt;&gt;&gt; print('rocket' in ingredients)  \nTrue  \n&gt;&gt;&gt; list(ingredients | AliasedIngredients(&#123;'garlic'&#125;))  \n['pepper', 'arugula', 'eggplant', 'garlic']\n</code></pre>\n<p>除此之外，我们还可以用  <code>abc</code>  来提供类型注释：</p>\n<pre><code class=\"language-python\">def print_items(items: collections.abc.Iterable):  \n    for item in items:  \n        print(item)\n</code></pre>\n<p>只要对象支持  <code>__iter__</code>  方法，那么就符合这个函数的参数要求。我们可以通过 ABC 来定义更复杂的参数类型。也是 Duck Type 的关键实现。</p>\n<p>Python 3.9 提供了 25 中不同的抽象基类。可以查看<a href=\"https://docs.python.org/3/library/collections.abc.html#module-collections.abc\">文档</a>了解<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>。</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://docs.python.org/3/library/collections.abc.html#module-collections.abc\">collections.abc — Abstract Base Classes for Containers — Python 3.11.4 documentation</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Computer-Science",
                "Python",
                "Type-Annotation"
            ]
        }
    ]
}