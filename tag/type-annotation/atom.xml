<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://linn-ylz.com</id>
    <title>林•初夏 • Posts by &#34;type-annotation&#34; tag</title>
    <link href="https://linn-ylz.com" />
    <updated>2023-06-22T02:39:47.000Z</updated>
    <category term="AncientBook" />
    <category term="Book" />
    <category term="Essay" />
    <category term="Game" />
    <category term="Music" />
    <category term="Movie" />
    <category term="Hexo" />
    <category term="Valine" />
    <category term="Waline" />
    <category term="TiddlyWiki" />
    <category term="Fishing" />
    <category term="Computer-Science" />
    <category term="Algorithm" />
    <category term="Cpp" />
    <category term="Binary-Search" />
    <category term="CUDA" />
    <category term="Coding-Interviews" />
    <category term="Configs" />
    <category term="WSL2" />
    <category term="CLion" />
    <category term="PyTorch" />
    <category term="Oh-My-Zsh" />
    <category term="Powershell" />
    <category term="WSL" />
    <category term="Emacs" />
    <category term="Programming-Pearls" />
    <category term="Python" />
    <category term="YAML" />
    <category term="dataclass" />
    <category term="Type-Annotation" />
    <category term="CUTLASS" />
    <category term="CUTE" />
    <category term="History" />
    <category term="ChineseHistory" />
    <category term="Table" />
    <entry>
        <id>https://linn-ylz.com/Computer-Science/Python/python-type-annotations-and-custom-types/</id>
        <title>Python 类型注释及自定义类型</title>
        <link rel="alternate" href="https://linn-ylz.com/Computer-Science/Python/python-type-annotations-and-custom-types/"/>
        <content type="html">&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;  以其动态特性而受到许多开发者的欢迎。但是当工程项目变得越来越复杂的时候，这一特性又往往会使得开发者头疼不已。想一想，当看着一段代码，却无法确定其中变量的特定类型，无法下手编写代码。即便强行编写完成也只能在运行时检查是否出错，这无疑会对开发效率产生很大影响。&lt;/p&gt;
&lt;h2 id=&#34;类型系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类型系统&#34;&gt;#&lt;/a&gt; 类型系统&lt;/h2&gt;
&lt;p&gt;按照一般的分类形式， &lt;code&gt;Python&lt;/code&gt;  属于动态的强类型系统的编程语言。此外， &lt;code&gt;Python&lt;/code&gt;  还支持 Duck Typing 这一特性。&lt;/p&gt;
&lt;p&gt;所谓的 Duck Typing，即：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If it walks like a duck and it quacks like a duck, then it must be a duck.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译成计算机语言，就是，加入某个变量支持 A 类型的所有操作，那么我们就可以将其视为 A 类型的变量。我们可以看这样一段代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import Iterable  
def print_items(items: Iterable):  
    for item in items:  
        print(item)  

print_items([1,2,3])  
print_items(&amp;#123;4, 5, 6&amp;#125;)  
print_items(&amp;#123;&amp;quot;A&amp;quot;: 1, &amp;quot;B&amp;quot;: 2, &amp;quot;C&amp;quot;: 3&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述的  &lt;code&gt;print_items&lt;/code&gt;  函数，只要输入的  &lt;code&gt;items&lt;/code&gt;  支持  &lt;code&gt;__iter__&lt;/code&gt;  操作，就能够成功调用该函数。即只要支持了  &lt;code&gt;__iter__&lt;/code&gt;  操作，我们就可以将  &lt;code&gt;items&lt;/code&gt;  视为  &lt;code&gt;Iterable&lt;/code&gt;  类型的变量。这里按照语法  &lt;code&gt;&amp;lt;var&amp;gt;: &amp;lt;type&amp;gt;&lt;/code&gt;  标注的  &lt;code&gt;Iterable&lt;/code&gt;  类型即  &lt;code&gt;Python&lt;/code&gt;  中的一种类型注释，用于帮助开发者更方便地理解代码，并且可以通过静态类型检查工具来检查潜在的类型错误。具体细节将在本文后续内容中介绍。&lt;/p&gt;
&lt;p&gt;虽然 Duck Typing 的特性非常便利，但是它是一把双刃剑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Duck Typing 可以增加代码的健壮性，可以通过构建抽象类接口来支持多种类型变量的调用，不需要针对某个类型编写特定代码。&lt;/li&gt;
&lt;li&gt;但是如果滥用 Duck Typing，某些时候可能会使开发者迷惑，因为支持的某些操作可能并不符合直觉。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类型注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类型注释&#34;&gt;#&lt;/a&gt; 类型注释&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;  的动态类型在编写小规模代码时非常方便，但是当代码规模变大后，就很难知晓某段复杂代码中变量的类型，只有在运行时才能够知道其类型。对于这点， &lt;code&gt;Python&lt;/code&gt;  之父 Guido van Rossum 曾经说过：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ve learned a painful lesson that for small programs dynamic typing is great. For large programs you have to have a more disciplined approach and it helps if the language actually gives you that discipline, rather than telling you &amp;quot;Well, you can do whatever you want.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了帮助解决这一困扰许多开发者的问题， &lt;code&gt;Python&lt;/code&gt;  从 3.7 开始提供了较为完备的类型支持系统。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;  的类型注释（Type Annotations），是一种类型提示（Type Hints），用于提示开发者某种变量的具体类型。其语法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def find_workers_available_for_time(open_time: datetime.datetime) -&amp;gt; list[str]:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于通常的变量定义，也可以添加类型注释：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number: int = 0  
text: str = &amp;quot;useless&amp;quot;  
values: list[float] = [1.2, 3.4, 6.0]  
worker: Worker = Worker()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在  &lt;code&gt;Python 3.8&lt;/code&gt;  之前，上述代码可能会报错，需要在代码开头添加  &lt;code&gt;from __future__ import anntations&lt;/code&gt;  语句。如果是更老版本的  &lt;code&gt;Python&lt;/code&gt; ，可以通过以下方式添加类型注释：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ratio = get_ratio(5,3) # type: float  
def get_workers(open): # type: (datetime.datetime) -&amp;gt; List[str]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是这种方式过于繁琐，可读性也不强，推荐使用较新版本的  &lt;code&gt;Python&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;许多人可能担心这些额外的代码会影响运行性能，但其实不必在意，因为这些代码并不会实际运行。&lt;/p&gt;
&lt;p&gt;除了提示开发者变量的代码类型之外，类型注释还能够帮助 IDE 提供自动补全功能。还可以此借助  &lt;code&gt;mypy&lt;/code&gt;  等 Typechecker 来帮助检查代码的正确性。&lt;/p&gt;
&lt;p&gt;虽然类型注释有很多好处，但是我们也不需要处处使用。对于简单的代码，过多的类型注释反而会影响对实际代码的阅读。&lt;/p&gt;
&lt;h2 id=&#34;复杂类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复杂类型&#34;&gt;#&lt;/a&gt; 复杂类型&lt;/h2&gt;
&lt;p&gt;在上一节中的类型注释，都是由  &lt;code&gt;Python&lt;/code&gt;  中的基础类型构成的。本节介绍一些其他类型以构建更复杂的类型注释。&lt;/p&gt;
&lt;h3 id=&#34;optional&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#optional&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Optional&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;  中的变量可以动态绑定，都可以赋值为  &lt;code&gt;None&lt;/code&gt; 。为了能够在类型中表示这一点，可以使用  &lt;code&gt;Optional&lt;/code&gt;  这一类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import Optional  
maybe_a_string: Optional[str] = &amp;quot;abcdef&amp;quot; # This has a value  
maybe_a_string: Optional[str] = None # This is the absence of a value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Optional&lt;/code&gt;  能够提示这一变量有可能是  &lt;code&gt;None&lt;/code&gt;  类型。能够帮助区分空值和  &lt;code&gt;None&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;union&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#union&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Union&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Union&lt;/code&gt;  用于表示一系列独立类型的并集。例如， &lt;code&gt;Union[int, str]&lt;/code&gt;  表示某个变量可能是  &lt;code&gt;int&lt;/code&gt;  或  &lt;code&gt;str&lt;/code&gt;  中的一种。此外， &lt;code&gt;Union[int, None]&lt;/code&gt;  和  &lt;code&gt;Optional[int]&lt;/code&gt;  在表示上是等价的。&lt;/p&gt;
&lt;h3 id=&#34;literal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#literal&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Literal&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Literal&lt;/code&gt;  类型可以限制某些类型的取值范围。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import Literal  
@dataclass  
class Error:  
    error_code: Literal[1,2,3,4,5]  
    disposed_of: bool  

@dataclass  
class Snack:  
    name: Literal[&amp;quot;Pretzel&amp;quot;, &amp;quot;Hot Dog&amp;quot;, &amp;quot;Veggie Burger&amp;quot;]  
    condiments: set[Literal[&amp;quot;Mustard&amp;quot;, &amp;quot;Ketchup&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;&lt;code&gt;Literal&lt;/code&gt;  在 Python 3.8 引入。They are a little more lightweight than Python enumerations. 比枚举略轻量。&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;annotated&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#annotated&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Annotated&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Literal&lt;/code&gt;  仅能够限定某些基本的类型，提供基本限制。无法提供像 “特定长度的字符串”，“匹配特定正则表达式的字符串” 等类型限制。&lt;/p&gt;
&lt;p&gt;在这些情形下，可以使用  &lt;code&gt;Annotated&lt;/code&gt;  类型实现。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x: Annotated[int, ValueRange(3,5)]  
y: Annotated[str, MatchesRegex(&#39;[0-9]&amp;#123;4&amp;#125;&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不过，Typechecker 无法帮助我们检查这一类型的错误，因为类型过于复杂，无法通过静态分析得到结果。因此，我们仍然需要自行在代码中对输入做检查。这样能够使得变量类型取值范围更加明晰，使代码更清晰。&lt;/p&gt;
&lt;h3 id=&#34;newtype&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#newtype&#34;&gt;#&lt;/a&gt;  &lt;code&gt;NewType&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;NewType&lt;/code&gt;  能够帮助提供更复杂的类型表达。 &lt;code&gt;NewType&lt;/code&gt;  会基于已有类型创建一个新的类型，并拥有和已有类型相同的 fields 和 methods。尽管如此，这个新创建的类型和原类型是无法互换的。&lt;/p&gt;
&lt;p&gt;可以看以下的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import NewType  

class HotDog:  
    &#39;&#39;&#39; Used to represent an unservable hot dog&#39;&#39;&#39;  
    # ... snip hot dog class implementation ...  

ReadyToServeHotDog = NewType(&amp;quot;ReadyToServeHotDog&amp;quot;, HotDog)  

def dispense_to_customer(hot_dog: ReadyToServeHotDog):  
    # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码中  &lt;code&gt;ReadyToServeHotDog&lt;/code&gt;  和  &lt;code&gt;HotDog&lt;/code&gt;  是不等价的。在要求了  &lt;code&gt;ReadyToServeHotDog&lt;/code&gt;  的时候，传递  &lt;code&gt;HotDog&lt;/code&gt;  是不可行的，但是反过来是可以的。&lt;/p&gt;
&lt;p&gt;与此同时，我们需要提供一个类型转换方式，否则开发者不知道该如何得到这一新类型的对象。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def prepare_for_serving(hot_dog: HotDog) -&amp;gt; ReadyToServeHotDog:  
    assert not hot_dog.is_plated(), &amp;quot;Hot dog should not already be plated&amp;quot;  
    hot_dog.put_on_plate()  
    hot_dog.add_napkins()  
    return ReadyToServeHotDog(hot_dog)

def make_snack():  
    serve_to_customer(ReadyToServeHotDog(HotDog()))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样一来，所有的  &lt;code&gt;ReadyToServeHotDog&lt;/code&gt;  在创建时都会检查是否满足了特定的条件，保证了我们调用函数的正确性。这种函数称为 blessed function。我们需要告诉开发者，在任何时候，只能使用这些 blessed function 来创建我们构造的新类型。不过目前只有使用注释这种方法，暂时没有其他有效手段能够显式提醒开发者。&lt;/p&gt;
&lt;p&gt;实际上，我们可以通过创造新的  &lt;code&gt;class&lt;/code&gt;  来实现类似的效果，也能够提供更有效地防止非法值类型的传入。但是相对而言， &lt;code&gt;NewType&lt;/code&gt;  的实现更加轻量。&lt;/p&gt;
&lt;p&gt;需要注意， &lt;code&gt;NewType&lt;/code&gt;  和类型别名不是一回事。类型别名和原类型是完全等价的，在任意时刻，语义上可以等价互换。但是  &lt;code&gt;NewType&lt;/code&gt;  不是。&lt;/p&gt;
&lt;p&gt;例如  &lt;code&gt;IdOrName = Union[str, int]&lt;/code&gt; ， &lt;code&gt;IdOrName&lt;/code&gt;  和  &lt;code&gt;Union[str, int]&lt;/code&gt;  类型是等价的。类型别名在表示某些复杂嵌套类型的时候比较直观，比如  &lt;code&gt;IDOrNameLookup&lt;/code&gt;  显然比  &lt;code&gt;Union[dict[int, User], list[dict[str, User]]]&lt;/code&gt;  更直观。&lt;/p&gt;
&lt;h3 id=&#34;final&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#final&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Final&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Final&lt;/code&gt;  类型在 Python 3.8 中引入，该类型的值在赋值之后就无法再绑定到其他内容上。&lt;/p&gt;
&lt;p&gt;例如，我们定义的品牌的名称，不会轻易修改：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;VENDOR_NAME: Final[str] = &amp;quot;Viafore&#39;s Auto-Dog&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果开发者后续错误地尝试修改其内容，Typechecker 会报错：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def display_vendor_information():  
    vendor_info = &amp;quot;Auto-Dog v1.0&amp;quot;  
    # whoops, copy-paste error, this code should be vendor_info += VENDOR_NAME  
    VENDOR_NAME += VENDOR_NAME  
    print(vendor_info)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是需要注意， &lt;code&gt;Final&lt;/code&gt;  和  &lt;code&gt;C++&lt;/code&gt;  中的  &lt;code&gt;const&lt;/code&gt;  类型是不同的，因为 Python 并不限制通过函数修改对象的内容，它仅仅限制了将某个变量绑定到其他对象上。&lt;/p&gt;
&lt;h2 id=&#34;容器类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器类型&#34;&gt;#&lt;/a&gt; 容器类型&lt;/h2&gt;
&lt;p&gt;除了对一般的  &lt;code&gt;int&lt;/code&gt;  等基础类型之外， &lt;code&gt;Python&lt;/code&gt;  中还常用  &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;dict&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt;  等容器类型。相比于单个值类型的变量，其类型注释要更加复杂。&lt;/p&gt;
&lt;p&gt;看以下例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def create_author_count_mapping(cookbooks: list) -&amp;gt; dict:  
    counter = defaultdict(lambda: 0)  
    for book in cookbooks:  
        counter[book.author] += 1  
    return counter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;尽管我们知道输入是一个  &lt;code&gt;list&lt;/code&gt; ，输出是一个  &lt;code&gt;dict&lt;/code&gt; ，但是我们仍然不清楚其中对象的具体类型。&lt;/p&gt;
&lt;p&gt;我们可以为容器中的对象添加类型说明：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;AuthorToCountMapping = dict[str, int] 

def create_author_count_mapping(cookbooks: list[Cookbook]) -&amp;gt; AuthorToCountMapping:  
    counter = defaultdict(lambda: 0)  
    for book in cookbooks:  
        counter[book.author] += 1  
    return counter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里，使用类型别名表示返回值的类型，在此处的上下文语境中能更加清楚地表明代码的意图。&lt;/p&gt;
&lt;h3 id=&#34;同构数据-vs-异构数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同构数据-vs-异构数据&#34;&gt;#&lt;/a&gt; 同构数据 vs. 异构数据&lt;/h3&gt;
&lt;p&gt;在表示容器中的对象类型时，我们经常会遇到一个问题：如果容器中的对象类型并不总是一致的，我们该如何表示其类型？&lt;/p&gt;
&lt;p&gt;我们可以将容器分为 homogeneous collections（同构容器） 和 heterogeneous collections（异构容器） 两种类型，按其中元素类型是否一致来区分。&lt;/p&gt;
&lt;p&gt;在一般情况下，我们应当尽量使用同构容器，因为异构容器经常需要我们处理 special case，这很容易出错。同构容器不一定说明其中的元素是同一种原生类型等情形，只要我们能够对其使用完全相同的操作，那么就可以认定这些元素是同构的。&lt;/p&gt;
&lt;p&gt;对于异构容器，我们可以使用  &lt;code&gt;Union&lt;/code&gt;  表示其中的元素类型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Ingredient = tuple[str, int, str] # (name, quantity, units)  
Recipe = list[Union[int, Ingredient]] # the list can be servings or ingredients  
def adjust_recipe(recipe: Recipe, servings):  
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果异构容器中的类型过于复杂，我们很可能需要添加很多的类型检验代码。这时，使用一个自定义的  &lt;code&gt;class&lt;/code&gt;  类型可能更加合适。&lt;/p&gt;
&lt;p&gt;如果容器中的元素类型过多，我们还可以用  &lt;code&gt;Any&lt;/code&gt;  表示任意一种类型。这样，任意一种类型都是合法的。只是这样就无法再提供任何有效的参考信息。&lt;/p&gt;
&lt;p&gt;不过，对于  &lt;code&gt;tuple&lt;/code&gt; ，其中的元素类型经常是异构的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Cookbook = tuple[str, int] # name, page count
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然，这样的代码很容易变得难懂。因为我们需要比照每个索引对应的元素内容的含义。我们可以用  &lt;code&gt;dict&lt;/code&gt;  来替换：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;food_lab = &amp;#123;  
    &amp;quot;name&amp;quot;: &amp;quot;The Food Lab&amp;quot;,  
    &amp;quot;page_count&amp;quot;: 958  
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是如此一来， &lt;code&gt;dict&lt;/code&gt;  中的键值会映射到不同的类型上。我们需要用  &lt;code&gt;dict[str, Union[int, str]]&lt;/code&gt;  来表示该  &lt;code&gt;dict&lt;/code&gt;  的类型。&lt;/p&gt;
&lt;p&gt;对于这种复杂类型的字典，推荐用  &lt;code&gt;TypedDict&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;typeddict&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typeddict&#34;&gt;#&lt;/a&gt;  &lt;code&gt;TypedDict&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;TypedDict&lt;/code&gt;  在 Python 3.8 中引入。用于必须在字典中存储异构类型数据的情形。&lt;/p&gt;
&lt;p&gt;对于  &lt;code&gt;Json&lt;/code&gt;   &lt;code&gt;YAML&lt;/code&gt;  等文件解析得到的  &lt;code&gt;dict&lt;/code&gt; ，其中的数据通常都是异构的。如果我们控制了  &lt;code&gt;dict&lt;/code&gt;  的创建，那么我们可以使用  &lt;code&gt;dataclass&lt;/code&gt;  或者  &lt;code&gt;class&lt;/code&gt;  来管理这些数据。对于解析文件得到的内容，我们仍需要通过查看文档等方法来确认。&lt;/p&gt;
&lt;p&gt;我们可以用  &lt;code&gt;TypedDict&lt;/code&gt;  来解决这一问题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import TypedDict  
class Range(TypedDict):  
    min: float  
    max: float

class NutritionInformation(TypedDict):  
    value: int  
    unit: str  
    confidenceRange95Percent: Range  
    standardDeviation: float

class RecipeNutritionInformation(TypedDict):  
    recipes_used: int  
    calories: NutritionInformation  
    fat: NutritionInformation  
    protein: NutritionInformation  
    carbs: NutritionInformation

nutrition_information:RecipeNutritionInformation = \  
    get_nutrition_from_spoonacular(recipe_name)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码很清晰的表示了字典中的键值对类型。当字典类型发生了变化时，我们可以通过  &lt;code&gt;mypy&lt;/code&gt;  帮助检查。如果我们忘记更新该  &lt;code&gt;TypedDict&lt;/code&gt; ， &lt;code&gt;mypy&lt;/code&gt;  能够帮助我们找出错误。&lt;/p&gt;
&lt;h3 id=&#34;构建新的容器类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构建新的容器类型&#34;&gt;#&lt;/a&gt; 构建新的容器类型&lt;/h3&gt;
&lt;h4 id=&#34;generics&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generics&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Generics&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;如果确实现有类型无法表达我们想要的内容，我们可以通过  &lt;code&gt;Generics&lt;/code&gt;  帮助构建新的容器类型。&lt;/p&gt;
&lt;p&gt;Generic 类型通常表示我们不关心其中的具体类型，但是它能够帮助我们限制用户使用不正确的类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def reverse(coll: list) -&amp;gt; list:  
    return coll[::-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于  &lt;code&gt;reverse&lt;/code&gt;  函数，我们不关系其中的具体类型，但是我们知道返回的列表和传入的列表的值类型是相同的。我们可以这样表示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import TypeVar  
T = TypeVar(&#39;T&#39;)  
def reverse(coll: list[T]) -&amp;gt; list[T]:  
    return coll[::-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，一个  &lt;code&gt;int&lt;/code&gt;  类型的  &lt;code&gt;list&lt;/code&gt;  就绝不会产生一个  &lt;code&gt;str&lt;/code&gt;  类型的  &lt;code&gt;list&lt;/code&gt;  的了。&lt;/p&gt;
&lt;p&gt;基于此方式，我们可以表达更复杂的类型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import defaultdict  
from typing import Generic, TypeVar

Node = TypeVar(&amp;quot;Node&amp;quot;)  
Edge = TypeVar(&amp;quot;Edge&amp;quot;)

# directed graph  
class Graph(Generic[Node, Edge]):  
    def __init__(self):  
        self.edges: dict[Node, list[Edge]] = defaultdict(list)
        
    def add_relation(self, node: Node, to: Edge):  
        self.edges[node].append(to)
        
    def get_relations(self, node: Node) -&amp;gt; list[Edge]:  
        return self.edges[node]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，我们可以使用  &lt;code&gt;Graph&lt;/code&gt;  表示更丰富的类型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cookbooks: Graph[Cookbook, Cookbook] = Graph()  
recipes: Graph[Recipe, Recipe] = Graph()  
cookbook_recipes: Graph[Cookbook, Recipe] = Graph()  
recipes.add_relation(Recipe(&#39;Pasta Bolognese&#39;),  
                    Recipe(&#39;Pasta with Sausage and Basil&#39;))  
cookbook_recipes.add_relation(Cookbook(&#39;The Food Lab&#39;),  
                            Recipe(&#39;Pasta Bolognese&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Generic&lt;/code&gt;  能够让我们复用更多的代码，减少错误的出现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Generic&lt;/code&gt;  的其他用途：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_nutrition_info(recipe: str) -&amp;gt; Union[NutritionInfo, APIError]:  
# ...  
def get_ingredients(recipe: str) -&amp;gt; Union[list[Ingredient], APIError]:  
#...  
def get_restaurants_serving(recipe: str) -&amp;gt; Union[list[Restaurant], APIError]:  
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显然，上述方式需要我们在每个返回值中都添加一个  &lt;code&gt;APIError&lt;/code&gt;  类型，非常繁琐。我们可以这样改写：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;T = TypeVar(&amp;quot;T&amp;quot;)  
APIResponse = Union[T, APIError]  
def get_nutrition_info(recipe: str) -&amp;gt; APIResponse[NutritionInfo]:  
    # ...  
def get_ingredients(recipe: str) -&amp;gt; APIResponse[list[Ingredient]]:  
    #...  
def get_restaurants_serving(recipe: str) -&amp;gt; APIResponse[list[Restaurant]]:  
    # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;修改现有类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改现有类型&#34;&gt;#&lt;/a&gt; 修改现有类型&lt;/h3&gt;
&lt;p&gt;有些时候，我们可以在现有类型的基础上修改，以实现我们想要的效果。假定我们想要让字典支持别名，即不同的  &lt;code&gt;key&lt;/code&gt;  能够指向相同的  &lt;code&gt;value&lt;/code&gt; 。如果复制多个  &lt;code&gt;value&lt;/code&gt;  的话，在修改时容易漏掉其他对应  &lt;code&gt;key&lt;/code&gt;  的修改。这时，我们可以通过创建  &lt;code&gt;dict&lt;/code&gt;  的子类来实现以上效果。&lt;/p&gt;
&lt;p&gt;以上需求，我们可以创建一个  &lt;code&gt;dict&lt;/code&gt;  的子类来实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class NutritionalInformation(dict):  
    def __getitem__(self, key):  
    try:  
        return super().__getitem__(key)  
    except KeyError:  
        pass  
    for alias in get_aliases(key):  
        try:  
            return super().__getitem__(alias)  
        except KeyError:  
            pass  
    raise KeyError(f&amp;quot;Could not find &amp;#123;key&amp;#125; or any of its aliases&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是，以上的代码实现存在问题。当我们继承一个  &lt;code&gt;dict&lt;/code&gt;  的时候，我们无法保证内部函数会调用我们覆盖的函数实现。内置类型的许多函数使用内联代码调用来保证性能。如果只是添加额外的方法，那么继承内置类型是可行的。但是在将来，也有可能发生类似的错误，因此最好避免继承内置类型。&lt;/p&gt;
&lt;p&gt;为了解决这一问题，我们可以使用  &lt;code&gt;UserDict&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import UserDict  
class NutritionalInformation(UserDict):  
    def __getitem__(self, key):  
        try:  
            return self.data[key]  
        except KeyError:  
            pass  
        for alias in get_aliases(key):  
            try:  
                return self.data[alias]  
            except KeyError:  
                pass  
        raise KeyError(f&amp;quot;Could not find &amp;#123;key&amp;#125; or any of its aliases&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以使用  &lt;code&gt;self.data&lt;/code&gt;  来获取底层的原生  &lt;code&gt;dict&lt;/code&gt;  数据。除此之外，还有  &lt;code&gt;UserList&lt;/code&gt;  和  &lt;code&gt;UserString&lt;/code&gt;  可以帮助我们对  &lt;code&gt;list&lt;/code&gt;  和  &lt;code&gt;str&lt;/code&gt;  实现类似的代码。不过需要注意，这些  &lt;code&gt;User*&lt;/code&gt;  类型可能会带来一定的性能损耗，需要根据实际情况考虑。&lt;/p&gt;
&lt;h3 id=&#34;抽象类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象类型&#34;&gt;#&lt;/a&gt; 抽象类型&lt;/h3&gt;
&lt;p&gt;通过定义抽象类，我们可以自定义容器类型。 &lt;code&gt;collection.abc&lt;/code&gt;  中提供了许多的抽象基类，我们可以根据需求使用。&lt;/p&gt;
&lt;p&gt;上一节中，我们提到了  &lt;code&gt;UserDict&lt;/code&gt;   &lt;code&gt;UserList&lt;/code&gt;   &lt;code&gt;UserString&lt;/code&gt; ，但是并没有  &lt;code&gt;UserSet&lt;/code&gt; 。本节我们基于  &lt;code&gt;abc&lt;/code&gt;  来实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;collections.abc.Set&lt;/code&gt;  提供了  &lt;code&gt;set&lt;/code&gt;  的抽象基类定义。其中包含以下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__contains__&lt;/code&gt; ：检查是否包含某个元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__iter__&lt;/code&gt; ：用于迭代元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__len__&lt;/code&gt; ：返回容器中的元素个数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要我们实现了以上三个函数，我们就可以实现一个类似的  &lt;code&gt;set&lt;/code&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import collections  
class AliasedIngredients(collections.abc.Set):  
    def __init__(self, ingredients: set[str]):  
        self.ingredients = ingredients  
        
    def __contains__(self, value: str):  
        return value in self.ingredients or any(alias in self.ingredients for alias in get_aliases(value))  
        
    def __iter__(self):  
        return iter(self.ingredients)  
        
    def __len__(self):  
        return len(self.ingredients)

&amp;gt;&amp;gt;&amp;gt; ingredients = AliasedIngredients(&amp;#123;&#39;arugula&#39;, &#39;eggplant&#39;, &#39;pepper&#39;&amp;#125;)  
&amp;gt;&amp;gt;&amp;gt; for ingredient in ingredients:  
&amp;gt;&amp;gt;&amp;gt; print(ingredient)  
&#39;arugula&#39;  
&#39;eggplant&#39;  
&#39;pepper&#39;

&amp;gt;&amp;gt;&amp;gt; print(len(ingredients))  
3  
&amp;gt;&amp;gt;&amp;gt; print(&#39;arugula&#39; in ingredients)  
True  
&amp;gt;&amp;gt;&amp;gt; print(&#39;rocket&#39; in ingredients)  
True  
&amp;gt;&amp;gt;&amp;gt; list(ingredients | AliasedIngredients(&amp;#123;&#39;garlic&#39;&amp;#125;))  
[&#39;pepper&#39;, &#39;arugula&#39;, &#39;eggplant&#39;, &#39;garlic&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除此之外，我们还可以用  &lt;code&gt;abc&lt;/code&gt;  来提供类型注释：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def print_items(items: collections.abc.Iterable):  
    for item in items:  
        print(item)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只要对象支持  &lt;code&gt;__iter__&lt;/code&gt;  方法，那么就符合这个函数的参数要求。我们可以通过 ABC 来定义更复杂的参数类型。也是 Duck Type 的关键实现。&lt;/p&gt;
&lt;p&gt;Python 3.9 提供了 25 中不同的抽象基类。可以查看&lt;a href=&#34;https://docs.python.org/3/library/collections.abc.html#module-collections.abc&#34;&gt;文档&lt;/a&gt;了解&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;hr class=&#34;footnotes-sep&#34; /&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/collections.abc.html#module-collections.abc&#34;&gt;collections.abc — Abstract Base Classes for Containers — Python 3.11.4 documentation&lt;/a&gt; &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        <category term="Computer-Science" />
        <category term="Python" />
        <category term="Type-Annotation" />
        <updated>2023-06-22T02:39:47.000Z</updated>
    </entry>
</feed>
