<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://linn-ylz.com</id>
    <title>林•初夏 • Posts by &#34;oh-my-zsh&#34; tag</title>
    <link href="https://linn-ylz.com" />
    <updated>2022-01-08T15:41:04.000Z</updated>
    <category term="AncientBook" />
    <category term="Book" />
    <category term="Essay" />
    <category term="Game" />
    <category term="Music" />
    <category term="Movie" />
    <category term="Hexo" />
    <category term="Valine" />
    <category term="Waline" />
    <category term="TiddlyWiki" />
    <category term="Fishing" />
    <category term="Computer-Science" />
    <category term="Algorithm" />
    <category term="Cpp" />
    <category term="Binary-Search" />
    <category term="CUDA" />
    <category term="Coding-Interviews" />
    <category term="Configs" />
    <category term="WSL2" />
    <category term="CLion" />
    <category term="PyTorch" />
    <category term="Oh-My-Zsh" />
    <category term="Powershell" />
    <category term="WSL" />
    <category term="Emacs" />
    <category term="Programming-Pearls" />
    <category term="Python" />
    <category term="YAML" />
    <category term="dataclass" />
    <category term="Type-Annotation" />
    <category term="CUTLASS" />
    <category term="CUTE" />
    <category term="History" />
    <category term="ChineseHistory" />
    <category term="Table" />
    <entry>
        <id>https://linn-ylz.com/Computer-Science/Configs/oh-my-zsh-and-plugins/</id>
        <title>Oh My Zsh 及插件配置</title>
        <link rel="alternate" href="https://linn-ylz.com/Computer-Science/Configs/oh-my-zsh-and-plugins/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Oh My Zsh&lt;/code&gt;  是一款非常流行的  &lt;code&gt;zsh&lt;/code&gt;  配置管理工具，而  &lt;code&gt;zsh&lt;/code&gt;  又是一款能够很好地替代  &lt;code&gt;bash&lt;/code&gt;  的  &lt;code&gt;shell&lt;/code&gt; 。二者的结合能够为终端提供许多非常实用的功能。&lt;/p&gt;
&lt;p&gt;我个人使用  &lt;code&gt;Windows&lt;/code&gt;  系统的  &lt;code&gt;WSL&lt;/code&gt; ，使用  &lt;code&gt;Ubuntu&lt;/code&gt;  环境。因此下文中的命令执行环境默认都是  &lt;code&gt;Ubuntu&lt;/code&gt; 。&lt;/p&gt;
&lt;h1 id=&#34;安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h1&gt;
&lt;h2 id=&#34;安装-zsh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-zsh&#34;&gt;#&lt;/a&gt; 安装  &lt;code&gt;zsh&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;要安装  &lt;code&gt;Oh My Zsh&lt;/code&gt; ，首先必须要有一个  &lt;code&gt;zsh&lt;/code&gt;  环境， &lt;code&gt;zsh&lt;/code&gt;  是原始的  &lt;code&gt;bash&lt;/code&gt;  终端  &lt;code&gt;shell&lt;/code&gt;  的一个良好的替代品。安装  &lt;code&gt;zsh&lt;/code&gt;  非常简单：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install zsh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完成之后，使用下列指令将默认  &lt;code&gt;shell&lt;/code&gt;  改为  &lt;code&gt;zsh&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chsh -s /usr/bin/zsh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;命令中的路径可能需要根据实际情况进行修改，可以使用  &lt;code&gt;which zsh&lt;/code&gt;  命令查看  &lt;code&gt;zsh&lt;/code&gt;  的路径。&lt;/p&gt;
&lt;h2 id=&#34;安装-oh-my-zsh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-oh-my-zsh&#34;&gt;#&lt;/a&gt; 安装  &lt;code&gt;Oh My Zsh&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;安装完  &lt;code&gt;zsh&lt;/code&gt;  之后，便可以开始  &lt;code&gt;Oh My Zsh&lt;/code&gt;  的安装了。更详细的内容，可以参考&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34; title=&#34;Oh My Zsh 官方 GitHub 链接&#34;&gt;官方链接&lt;/a&gt;，本文只做简要的介绍。&lt;/p&gt;
&lt;table&gt;
&lt;caption id=&#34;ohmyzsh&#34; style=&#34;caption-side: bottom&#34;&gt;Oh My Zsh 安装命令&lt;/caption&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Method&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;wget&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;sh -c &amp;quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;sh -c &amp;quot;$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在这一步，虽然我使用了代理，也能够  &lt;code&gt;Ping&lt;/code&gt;  通链接域名  &lt;code&gt;raw.githubusercontent.com&lt;/code&gt; ，但是命令仍然不能执行成功。替代方法是在浏览器中直接访问这个链接，复制其中的文件内容，在本地创建  &lt;code&gt;install.sh&lt;/code&gt;  脚本，并运行  &lt;code&gt;sh install.sh&lt;/code&gt;  进行安装。&lt;/p&gt;
&lt;p&gt;安装完成之后，应该能够看到终端命令行的  &lt;code&gt;prompt&lt;/code&gt;  会发生变化，这说明安装成功了。如果没有任何改变，可能需要重新启动终端。&lt;/p&gt;
&lt;h1 id=&#34;主题和插件配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主题和插件配置&#34;&gt;#&lt;/a&gt; 主题和插件配置&lt;/h1&gt;
&lt;p&gt;安装完成之后可以进一步配置主题来自定义终端的样式，或者安装其他的插件来增强终端的功能，提升终端的使用体验。&lt;/p&gt;
&lt;h2 id=&#34;主题配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主题配置&#34;&gt;#&lt;/a&gt; 主题配置&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Oh My Zsh&lt;/code&gt;  的主题需要修改  &lt;code&gt;~/.zshrc&lt;/code&gt;  来进行配置，在其中找到  &lt;code&gt;ZSH_THEME&lt;/code&gt;  这一变量所在的位置，根据需要将后面的主题改为自己喜欢的主题的名称，比如最经典的  &lt;code&gt;robbyrussell&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;在  &lt;code&gt;~/.oh-my-zsh/themes&lt;/code&gt;  文件夹中有许多内置的主题文件，可以根据自己的喜好进行选择。如果还想要更多的主题，可以在网上进行搜索，然后放到这个文件夹下，并修改  &lt;code&gt;~/.zshrc&lt;/code&gt;  中的配置。我自己基于  &lt;code&gt;xiong-chiamiov-plus&lt;/code&gt;  主题自定义了一个主题。&lt;/p&gt;
&lt;p&gt;修改完成后记得执行  &lt;code&gt;source ~/.zshrc&lt;/code&gt;  指令以使得修改得到应用。&lt;/p&gt;
&lt;h2 id=&#34;插件配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#插件配置&#34;&gt;#&lt;/a&gt; 插件配置&lt;/h2&gt;
&lt;p&gt;插件配置需要在  &lt;code&gt;~/.zshrc&lt;/code&gt;  中找到  &lt;code&gt;plugins&lt;/code&gt;  变量所在的位置，在括号中写入需要的插件的名称，注意插件名称之间使用空格进行分隔， &lt;code&gt;Oh My Zsh&lt;/code&gt;  默认启用了对  &lt;code&gt;git&lt;/code&gt;  插件。&lt;/p&gt;
&lt;p&gt;在  &lt;code&gt;~/.oh-my-zsh/plugins&lt;/code&gt;  路径下能找到许多其他的插件，可以根据需要进行启用。这里推荐几个我自己使用的插件。&lt;/p&gt;
&lt;h3 id=&#34;zsh-autosuggestions&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zsh-autosuggestions&#34;&gt;#&lt;/a&gt;  &lt;code&gt;zsh-autosuggestions&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;这一插件会根据过往输入的指令历史，依照你当前输入的指令内容推测你想要输入的完整指令，在你输入了部分指令之后，会在终端上给出提示，如果是想要的指令的话，可以使用方向键右键应用这条指令。快捷键可以根据自己的需要进行修改。&lt;/p&gt;
&lt;p&gt;执行下述命令将插件下载到  &lt;code&gt;$ZSH_CUSTOM/plugins&lt;/code&gt;  文件夹下，默认位置在  &lt;code&gt;~/.oh-my-zsh/plugins&lt;/code&gt;  此处：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    git clone https://github.com/zsh-users/zsh-autosuggestions $&amp;#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&amp;#125;/plugins/zsh-autosuggestions

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后编辑  &lt;code&gt;~/.zshrc&lt;/code&gt;  中的  &lt;code&gt;plugins&lt;/code&gt;  变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;plugins=( 
    # other plugins...
    zsh-autosuggestions
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用  &lt;code&gt;source ~/.zshrc&lt;/code&gt;  应用修改。&lt;/p&gt;
&lt;h3 id=&#34;zsh-syntax-highlighting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zsh-syntax-highlighting&#34;&gt;#&lt;/a&gt;  &lt;code&gt;zsh-syntax-highlighting&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;这一插件能够高亮你在命令行中的输入，具体的示例可以参看官方  &lt;code&gt;GitHub&lt;/code&gt;  的内容。这里我个人觉得最实用的功能就是能够显示你当前输入的命令是否正确，如果输入的指令存在，那么会以绿色进行高亮，否则会以红色进行高亮，这样能够直观地判断指令是否输入正确。&lt;/p&gt;
&lt;p&gt;和上一段的安装过程类似，执行下述命令下载插件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&amp;#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&amp;#125;/plugins/zsh-syntax-highlighting

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后修改  &lt;code&gt;~/.zshrc&lt;/code&gt;  中的  &lt;code&gt;plugins&lt;/code&gt;  变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;plugins=( [plugins...] zsh-syntax-highlighting)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用  &lt;code&gt;source ~/.zshrc&lt;/code&gt;  应用修改。&lt;/p&gt;
&lt;h3 id=&#34;autojump&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#autojump&#34;&gt;#&lt;/a&gt;  &lt;code&gt;autojump&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;这个指令会根据过往的文件访问内容为每个文件夹确定一个权重，根据权重高低选择跳转的文件夹。例如我最近经常访问某个  &lt;code&gt;src&lt;/code&gt;  文件夹，那么我输入  &lt;code&gt;j src&lt;/code&gt;  指令之后，便会自动跳转到该文件夹。更多的功能可以查看该项目的 &lt;a href=&#34;https://github.com/wting/autojump&#34;&gt; &lt;code&gt;GitHub&lt;/code&gt;  主页&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;执行下列指令进行安装：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install autojump
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改  &lt;code&gt;~/.zshrc&lt;/code&gt;  的  &lt;code&gt;plugins&lt;/code&gt;  变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;plugins=( [plugins...] autojump)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用  &lt;code&gt;source ~/.zshrc&lt;/code&gt;  应用修改。&lt;/p&gt;
&lt;h3 id=&#34;material-colors&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#material-colors&#34;&gt;#&lt;/a&gt;  &lt;code&gt;material-colors&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;根据文件类型用不同颜色显示其名称。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/zpm-zsh/material-colors ~/.oh-my-zsh/custom/plugins/material-colors
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改  &lt;code&gt;~/.zshrc&lt;/code&gt;  的  &lt;code&gt;plugins&lt;/code&gt;  变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;plugins=( [plugins...] material-colors)

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;内置插件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内置插件&#34;&gt;#&lt;/a&gt; 内置插件&lt;/h3&gt;
&lt;p&gt;出了第三方插件之外， &lt;code&gt;Oh My Zsh&lt;/code&gt;  内置了许多插件，出了最常用的  &lt;code&gt;git&lt;/code&gt;  插件之外，还有一些插件也值得推荐。&lt;/p&gt;
&lt;h4 id=&#34;extract&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#extract&#34;&gt;#&lt;/a&gt;  &lt;code&gt;extract&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;用于解压文件，不用再去纠结  &lt;code&gt;tar&lt;/code&gt;  一类命令的具体参数细节。&lt;/p&gt;
&lt;h4 id=&#34;colored-man-pages&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#colored-man-pages&#34;&gt;#&lt;/a&gt;  &lt;code&gt;colored-man-pages&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;使用  &lt;code&gt;man&lt;/code&gt;  命令查看其他指令的说明文档时，对内容进行高亮，使得内容更加清晰。&lt;/p&gt;
&lt;h1 id=&#34;其他选项设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他选项设置&#34;&gt;#&lt;/a&gt; 其他选项设置&lt;/h1&gt;
&lt;p&gt;在某些比较到的工程项目文件夹之下， &lt;code&gt;git&lt;/code&gt;  插件的  &lt;code&gt;prompt&lt;/code&gt;  功能会严重影响  &lt;code&gt;shell&lt;/code&gt;  的响应速度。尽管这一功能能够帮助我们查看  &lt;code&gt;git&lt;/code&gt;  项目中是否有文件被修改，但是严重影响了终端的响应速度，而实际中我们经常会使用  &lt;code&gt;git status&lt;/code&gt;  确认文件的修改情况，因此权衡之后，还是决定关闭这个功能以提升日常的使用体验。&lt;/p&gt;
&lt;p&gt;这里去除  &lt;code&gt;~/.zshrc&lt;/code&gt;  中的以下内容的注释：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DISABLE_UNTRACKED_FILES_DIRTY=&amp;quot;true&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之后使用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global --add oh-my-zsh.hide-dirty 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;停用追踪文件修改的功能以提升  &lt;code&gt;shell&lt;/code&gt;  的响应速度。&lt;/p&gt;
&lt;p&gt;执行上述操作之后，实测  &lt;code&gt;shell&lt;/code&gt;  的响应速度有了明显的提升。&lt;/p&gt;
</content>
        <category term="Computer-Science" />
        <category term="Configs" />
        <category term="Oh-My-Zsh" />
        <updated>2022-01-08T15:41:04.000Z</updated>
    </entry>
</feed>
