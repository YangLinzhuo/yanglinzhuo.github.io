{
    "version": "https://jsonfeed.org/version/1",
    "title": "林•初夏 • All posts by \"oh-my-zsh\" tag",
    "description": "Linn 的个人博客",
    "home_page_url": "https://linn-ylz.com",
    "items": [
        {
            "id": "https://linn-ylz.com/Computer-Science/Configs/oh-my-zsh-and-plugins/",
            "url": "https://linn-ylz.com/Computer-Science/Configs/oh-my-zsh-and-plugins/",
            "title": "Oh My Zsh 及插件配置",
            "date_published": "2022-01-08T15:41:04.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p><code>Oh My Zsh</code>  是一款非常流行的  <code>zsh</code>  配置管理工具，而  <code>zsh</code>  又是一款能够很好地替代  <code>bash</code>  的  <code>shell</code> 。二者的结合能够为终端提供许多非常实用的功能。</p>\n<p>我个人使用  <code>Windows</code>  系统的  <code>WSL</code> ，使用  <code>Ubuntu</code>  环境。因此下文中的命令执行环境默认都是  <code>Ubuntu</code> 。</p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<h2 id=\"安装-zsh\"><a class=\"anchor\" href=\"#安装-zsh\">#</a> 安装  <code>zsh</code></h2>\n<p>要安装  <code>Oh My Zsh</code> ，首先必须要有一个  <code>zsh</code>  环境， <code>zsh</code>  是原始的  <code>bash</code>  终端  <code>shell</code>  的一个良好的替代品。安装  <code>zsh</code>  非常简单：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">zsh</span></pre></td></tr></table></figure><p>安装完成之后，使用下列指令将默认  <code>shell</code>  改为  <code>zsh</code> ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>chsh <span class=\"token parameter variable\">-s</span> /usr/bin/zsh</pre></td></tr></table></figure><p>命令中的路径可能需要根据实际情况进行修改，可以使用  <code>which zsh</code>  命令查看  <code>zsh</code>  的路径。</p>\n<h2 id=\"安装-oh-my-zsh\"><a class=\"anchor\" href=\"#安装-oh-my-zsh\">#</a> 安装  <code>Oh My Zsh</code></h2>\n<p>安装完  <code>zsh</code>  之后，便可以开始  <code>Oh My Zsh</code>  的安装了。更详细的内容，可以参考<a href=\"https://github.com/ohmyzsh/ohmyzsh\" title=\"Oh My Zsh 官方 GitHub 链接\">官方链接</a>，本文只做简要的介绍。</p>\n<table>\n<caption id=\"ohmyzsh\" style=\"caption-side: bottom\">Oh My Zsh 安装命令</caption>\n<thead>\n<tr>\n<th style=\"text-align:left\">Method</th>\n<th style=\"text-align:left\">Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>curl</code></td>\n<td style=\"text-align:left\"><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>wget</code></td>\n<td style=\"text-align:left\"><code>sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fetch</code></td>\n<td style=\"text-align:left\"><code>sh -c &quot;$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<p>在这一步，虽然我使用了代理，也能够  <code>Ping</code>  通链接域名  <code>raw.githubusercontent.com</code> ，但是命令仍然不能执行成功。替代方法是在浏览器中直接访问这个链接，复制其中的文件内容，在本地创建  <code>install.sh</code>  脚本，并运行  <code>sh install.sh</code>  进行安装。</p>\n<p>安装完成之后，应该能够看到终端命令行的  <code>prompt</code>  会发生变化，这说明安装成功了。如果没有任何改变，可能需要重新启动终端。</p>\n<h1 id=\"主题和插件配置\"><a class=\"anchor\" href=\"#主题和插件配置\">#</a> 主题和插件配置</h1>\n<p>安装完成之后可以进一步配置主题来自定义终端的样式，或者安装其他的插件来增强终端的功能，提升终端的使用体验。</p>\n<h2 id=\"主题配置\"><a class=\"anchor\" href=\"#主题配置\">#</a> 主题配置</h2>\n<p><code>Oh My Zsh</code>  的主题需要修改  <code>~/.zshrc</code>  来进行配置，在其中找到  <code>ZSH_THEME</code>  这一变量所在的位置，根据需要将后面的主题改为自己喜欢的主题的名称，比如最经典的  <code>robbyrussell</code> 。</p>\n<p>在  <code>~/.oh-my-zsh/themes</code>  文件夹中有许多内置的主题文件，可以根据自己的喜好进行选择。如果还想要更多的主题，可以在网上进行搜索，然后放到这个文件夹下，并修改  <code>~/.zshrc</code>  中的配置。我自己基于  <code>xiong-chiamiov-plus</code>  主题自定义了一个主题。</p>\n<p>修改完成后记得执行  <code>source ~/.zshrc</code>  指令以使得修改得到应用。</p>\n<h2 id=\"插件配置\"><a class=\"anchor\" href=\"#插件配置\">#</a> 插件配置</h2>\n<p>插件配置需要在  <code>~/.zshrc</code>  中找到  <code>plugins</code>  变量所在的位置，在括号中写入需要的插件的名称，注意插件名称之间使用空格进行分隔， <code>Oh My Zsh</code>  默认启用了对  <code>git</code>  插件。</p>\n<p>在  <code>~/.oh-my-zsh/plugins</code>  路径下能找到许多其他的插件，可以根据需要进行启用。这里推荐几个我自己使用的插件。</p>\n<h3 id=\"zsh-autosuggestions\"><a class=\"anchor\" href=\"#zsh-autosuggestions\">#</a>  <code>zsh-autosuggestions</code></h3>\n<p>这一插件会根据过往输入的指令历史，依照你当前输入的指令内容推测你想要输入的完整指令，在你输入了部分指令之后，会在终端上给出提示，如果是想要的指令的话，可以使用方向键右键应用这条指令。快捷键可以根据自己的需要进行修改。</p>\n<p>执行下述命令将插件下载到  <code>$ZSH_CUSTOM/plugins</code>  文件夹下，默认位置在  <code>~/.oh-my-zsh/plugins</code>  此处：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-autosuggestions <span class=\"token variable\">$&#123;ZSH_CUSTOM<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom&#125;</span>/plugins/zsh-autosuggestions</pre></td></tr></table></figure><p>然后编辑  <code>~/.zshrc</code>  中的  <code>plugins</code>  变量：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># other plugins...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    zsh-autosuggestions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用  <code>source ~/.zshrc</code>  应用修改。</p>\n<h3 id=\"zsh-syntax-highlighting\"><a class=\"anchor\" href=\"#zsh-syntax-highlighting\">#</a>  <code>zsh-syntax-highlighting</code></h3>\n<p>这一插件能够高亮你在命令行中的输入，具体的示例可以参看官方  <code>GitHub</code>  的内容。这里我个人觉得最实用的功能就是能够显示你当前输入的命令是否正确，如果输入的指令存在，那么会以绿色进行高亮，否则会以红色进行高亮，这样能够直观地判断指令是否输入正确。</p>\n<p>和上一段的安装过程类似，执行下述命令下载插件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"token variable\">$&#123;ZSH_CUSTOM<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom&#125;</span>/plugins/zsh-syntax-highlighting</pre></td></tr></table></figure><p>然后修改  <code>~/.zshrc</code>  中的  <code>plugins</code>  变量：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>plugins<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> zsh-syntax-highlighting<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用  <code>source ~/.zshrc</code>  应用修改。</p>\n<h3 id=\"autojump\"><a class=\"anchor\" href=\"#autojump\">#</a>  <code>autojump</code></h3>\n<p>这个指令会根据过往的文件访问内容为每个文件夹确定一个权重，根据权重高低选择跳转的文件夹。例如我最近经常访问某个  <code>src</code>  文件夹，那么我输入  <code>j src</code>  指令之后，便会自动跳转到该文件夹。更多的功能可以查看该项目的 <a href=\"https://github.com/wting/autojump\"> <code>GitHub</code>  主页</a>。</p>\n<p>执行下列指令进行安装：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> autojump</pre></td></tr></table></figure><p>修改  <code>~/.zshrc</code>  的  <code>plugins</code>  变量：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>plugins<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> autojump<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用  <code>source ~/.zshrc</code>  应用修改。</p>\n<h3 id=\"material-colors\"><a class=\"anchor\" href=\"#material-colors\">#</a>  <code>material-colors</code></h3>\n<p>根据文件类型用不同颜色显示其名称。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/zpm-zsh/material-colors ~/.oh-my-zsh/custom/plugins/material-colors</pre></td></tr></table></figure><p>修改  <code>~/.zshrc</code>  的  <code>plugins</code>  变量：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>plugins<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> material-colors<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"内置插件\"><a class=\"anchor\" href=\"#内置插件\">#</a> 内置插件</h3>\n<p>出了第三方插件之外， <code>Oh My Zsh</code>  内置了许多插件，出了最常用的  <code>git</code>  插件之外，还有一些插件也值得推荐。</p>\n<h4 id=\"extract\"><a class=\"anchor\" href=\"#extract\">#</a>  <code>extract</code></h4>\n<p>用于解压文件，不用再去纠结  <code>tar</code>  一类命令的具体参数细节。</p>\n<h4 id=\"colored-man-pages\"><a class=\"anchor\" href=\"#colored-man-pages\">#</a>  <code>colored-man-pages</code></h4>\n<p>使用  <code>man</code>  命令查看其他指令的说明文档时，对内容进行高亮，使得内容更加清晰。</p>\n<h1 id=\"其他选项设置\"><a class=\"anchor\" href=\"#其他选项设置\">#</a> 其他选项设置</h1>\n<p>在某些比较到的工程项目文件夹之下， <code>git</code>  插件的  <code>prompt</code>  功能会严重影响  <code>shell</code>  的响应速度。尽管这一功能能够帮助我们查看  <code>git</code>  项目中是否有文件被修改，但是严重影响了终端的响应速度，而实际中我们经常会使用  <code>git status</code>  确认文件的修改情况，因此权衡之后，还是决定关闭这个功能以提升日常的使用体验。</p>\n<p>这里去除  <code>~/.zshrc</code>  中的以下内容的注释：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">DISABLE_UNTRACKED_FILES_DIRTY</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span></pre></td></tr></table></figure><p>之后使用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> <span class=\"token parameter variable\">--add</span> oh-my-zsh.hide-dirty <span class=\"token number\">1</span></pre></td></tr></table></figure><p>停用追踪文件修改的功能以提升  <code>shell</code>  的响应速度。</p>\n<p>执行上述操作之后，实测  <code>shell</code>  的响应速度有了明显的提升。</p>\n",
            "tags": [
                "Computer-Science",
                "Configs",
                "Oh-My-Zsh"
            ]
        }
    ]
}