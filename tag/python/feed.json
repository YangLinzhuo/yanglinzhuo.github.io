{
    "version": "https://jsonfeed.org/version/1",
    "title": "林•初夏 • All posts by \"python\" tag",
    "description": "Linn 的个人博客",
    "home_page_url": "https://linn-ylz.com",
    "items": [
        {
            "id": "https://linn-ylz.com/Computer-Science/Python/python-type-annotations-and-custom-types/",
            "url": "https://linn-ylz.com/Computer-Science/Python/python-type-annotations-and-custom-types/",
            "title": "Python 类型注释及自定义类型",
            "date_published": "2023-06-22T02:39:47.000Z",
            "content_html": "<p><code>Python</code>  以其动态特性而受到许多开发者的欢迎。但是当工程项目变得越来越复杂的时候，这一特性又往往会使得开发者头疼不已。想一想，当看着一段代码，却无法确定其中变量的特定类型，无法下手编写代码。即便强行编写完成也只能在运行时检查是否出错，这无疑会对开发效率产生很大影响。</p>\n<h2 id=\"类型系统\"><a class=\"anchor\" href=\"#类型系统\">#</a> 类型系统</h2>\n<p>按照一般的分类形式， <code>Python</code>  属于动态的强类型系统的编程语言。此外， <code>Python</code>  还支持 Duck Typing 这一特性。</p>\n<p>所谓的 Duck Typing，即：</p>\n<blockquote>\n<p>If it walks like a duck and it quacks like a duck, then it must be a duck.</p>\n</blockquote>\n<p>翻译成计算机语言，就是，加入某个变量支持 A 类型的所有操作，那么我们就可以将其视为 A 类型的变量。我们可以看这样一段代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Iterable  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">print_items</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">:</span> Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>print_items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>print_items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>print_items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上述的  <code>print_items</code>  函数，只要输入的  <code>items</code>  支持  <code>__iter__</code>  操作，就能够成功调用该函数。即只要支持了  <code>__iter__</code>  操作，我们就可以将  <code>items</code>  视为  <code>Iterable</code>  类型的变量。这里按照语法  <code>&lt;var&gt;: &lt;type&gt;</code>  标注的  <code>Iterable</code>  类型即  <code>Python</code>  中的一种类型注释，用于帮助开发者更方便地理解代码，并且可以通过静态类型检查工具来检查潜在的类型错误。具体细节将在本文后续内容中介绍。</p>\n<p>虽然 Duck Typing 的特性非常便利，但是它是一把双刃剑：</p>\n<ul>\n<li>Duck Typing 可以增加代码的健壮性，可以通过构建抽象类接口来支持多种类型变量的调用，不需要针对某个类型编写特定代码。</li>\n<li>但是如果滥用 Duck Typing，某些时候可能会使开发者迷惑，因为支持的某些操作可能并不符合直觉。</li>\n</ul>\n<h2 id=\"类型注释\"><a class=\"anchor\" href=\"#类型注释\">#</a> 类型注释</h2>\n<p><code>Python</code>  的动态类型在编写小规模代码时非常方便，但是当代码规模变大后，就很难知晓某段复杂代码中变量的类型，只有在运行时才能够知道其类型。对于这点， <code>Python</code>  之父 Guido van Rossum 曾经说过：</p>\n<blockquote>\n<p>I’ve learned a painful lesson that for small programs dynamic typing is great. For large programs you have to have a more disciplined approach and it helps if the language actually gives you that discipline, rather than telling you &quot;Well, you can do whatever you want.&quot;</p>\n</blockquote>\n<p>为了帮助解决这一困扰许多开发者的问题， <code>Python</code>  从 3.7 开始提供了较为完备的类型支持系统。</p>\n<p><code>Python</code>  的类型注释（Type Annotations），是一种类型提示（Type Hints），用于提示开发者某种变量的具体类型。其语法如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_workers_available_for_time</span><span class=\"token punctuation\">(</span>open_time<span class=\"token punctuation\">:</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>对于通常的变量定义，也可以添加类型注释：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>number<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"useless\"</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>values<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.0</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>worker<span class=\"token punctuation\">:</span> Worker <span class=\"token operator\">=</span> Worker<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在  <code>Python 3.8</code>  之前，上述代码可能会报错，需要在代码开头添加  <code>from __future__ import anntations</code>  语句。如果是更老版本的  <code>Python</code> ，可以通过以下方式添加类型注释：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ratio <span class=\"token operator\">=</span> get_ratio<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># type: float  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_workers</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># type: (datetime.datetime) -> List[str]</span></pre></td></tr></table></figure><p>但是这种方式过于繁琐，可读性也不强，推荐使用较新版本的  <code>Python</code> 。</p>\n<p>许多人可能担心这些额外的代码会影响运行性能，但其实不必在意，因为这些代码并不会实际运行。</p>\n<p>除了提示开发者变量的代码类型之外，类型注释还能够帮助 IDE 提供自动补全功能。还可以此借助  <code>mypy</code>  等 Typechecker 来帮助检查代码的正确性。</p>\n<p>虽然类型注释有很多好处，但是我们也不需要处处使用。对于简单的代码，过多的类型注释反而会影响对实际代码的阅读。</p>\n<h2 id=\"复杂类型\"><a class=\"anchor\" href=\"#复杂类型\">#</a> 复杂类型</h2>\n<p>在上一节中的类型注释，都是由  <code>Python</code>  中的基础类型构成的。本节介绍一些其他类型以构建更复杂的类型注释。</p>\n<h3 id=\"optional\"><a class=\"anchor\" href=\"#optional\">#</a>  <code>Optional</code></h3>\n<p><code>Python</code>  中的变量可以动态绑定，都可以赋值为  <code>None</code> 。为了能够在类型中表示这一点，可以使用  <code>Optional</code>  这一类型。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Optional  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>maybe_a_string<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdef\"</span> <span class=\"token comment\"># This has a value  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>maybe_a_string<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span> <span class=\"token comment\"># This is the absence of a value</span></pre></td></tr></table></figure><p><code>Optional</code>  能够提示这一变量有可能是  <code>None</code>  类型。能够帮助区分空值和  <code>None</code> 。</p>\n<h3 id=\"union\"><a class=\"anchor\" href=\"#union\">#</a>  <code>Union</code></h3>\n<p><code>Union</code>  用于表示一系列独立类型的并集。例如， <code>Union[int, str]</code>  表示某个变量可能是  <code>int</code>  或  <code>str</code>  中的一种。此外， <code>Union[int, None]</code>  和  <code>Optional[int]</code>  在表示上是等价的。</p>\n<h3 id=\"literal\"><a class=\"anchor\" href=\"#literal\">#</a>  <code>Literal</code></h3>\n<p><code>Literal</code>  类型可以限制某些类型的取值范围。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Literal  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    error_code<span class=\"token punctuation\">:</span> Literal<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    disposed_of<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Snack</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    name<span class=\"token punctuation\">:</span> Literal<span class=\"token punctuation\">[</span><span class=\"token string\">\"Pretzel\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hot Dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Veggie Burger\"</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    condiments<span class=\"token punctuation\">:</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">[</span>Literal<span class=\"token punctuation\">[</span><span class=\"token string\">\"Mustard\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ketchup\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><div class=\"note info\">\n<p><code>Literal</code>  在 Python 3.8 引入。They are a little more lightweight than Python enumerations. 比枚举略轻量。</p>\n</div>\n<h3 id=\"annotated\"><a class=\"anchor\" href=\"#annotated\">#</a>  <code>Annotated</code></h3>\n<p><code>Literal</code>  仅能够限定某些基本的类型，提供基本限制。无法提供像 “特定长度的字符串”，“匹配特定正则表达式的字符串” 等类型限制。</p>\n<p>在这些情形下，可以使用  <code>Annotated</code>  类型实现。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x<span class=\"token punctuation\">:</span> Annotated<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> ValueRange<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>y<span class=\"token punctuation\">:</span> Annotated<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> MatchesRegex<span class=\"token punctuation\">(</span><span class=\"token string\">'[0-9]&#123;4&#125;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>不过，Typechecker 无法帮助我们检查这一类型的错误，因为类型过于复杂，无法通过静态分析得到结果。因此，我们仍然需要自行在代码中对输入做检查。这样能够使得变量类型取值范围更加明晰，使代码更清晰。</p>\n<h3 id=\"newtype\"><a class=\"anchor\" href=\"#newtype\">#</a>  <code>NewType</code></h3>\n<p><code>NewType</code>  能够帮助提供更复杂的类型表达。 <code>NewType</code>  会基于已有类型创建一个新的类型，并拥有和已有类型相同的 fields 和 methods。尽管如此，这个新创建的类型和原类型是无法互换的。</p>\n<p>可以看以下的例子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> NewType  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HotDog</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token triple-quoted-string string\">''' Used to represent an unservable hot dog'''</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># ... snip hot dog class implementation ...  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ReadyToServeHotDog <span class=\"token operator\">=</span> NewType<span class=\"token punctuation\">(</span><span class=\"token string\">\"ReadyToServeHotDog\"</span><span class=\"token punctuation\">,</span> HotDog<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dispense_to_customer</span><span class=\"token punctuation\">(</span>hot_dog<span class=\"token punctuation\">:</span> ReadyToServeHotDog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># ...</span></pre></td></tr></table></figure><p>代码中  <code>ReadyToServeHotDog</code>  和  <code>HotDog</code>  是不等价的。在要求了  <code>ReadyToServeHotDog</code>  的时候，传递  <code>HotDog</code>  是不可行的，但是反过来是可以的。</p>\n<p>与此同时，我们需要提供一个类型转换方式，否则开发者不知道该如何得到这一新类型的对象。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">prepare_for_serving</span><span class=\"token punctuation\">(</span>hot_dog<span class=\"token punctuation\">:</span> HotDog<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ReadyToServeHotDog<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">assert</span> <span class=\"token keyword\">not</span> hot_dog<span class=\"token punctuation\">.</span>is_plated<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hot dog should not already be plated\"</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    hot_dog<span class=\"token punctuation\">.</span>put_on_plate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    hot_dog<span class=\"token punctuation\">.</span>add_napkins<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> ReadyToServeHotDog<span class=\"token punctuation\">(</span>hot_dog<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">make_snack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    serve_to_customer<span class=\"token punctuation\">(</span>ReadyToServeHotDog<span class=\"token punctuation\">(</span>HotDog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这样一来，所有的  <code>ReadyToServeHotDog</code>  在创建时都会检查是否满足了特定的条件，保证了我们调用函数的正确性。这种函数称为 blessed function。我们需要告诉开发者，在任何时候，只能使用这些 blessed function 来创建我们构造的新类型。不过目前只有使用注释这种方法，暂时没有其他有效手段能够显式提醒开发者。</p>\n<p>实际上，我们可以通过创造新的  <code>class</code>  来实现类似的效果，也能够提供更有效地防止非法值类型的传入。但是相对而言， <code>NewType</code>  的实现更加轻量。</p>\n<p>需要注意， <code>NewType</code>  和类型别名不是一回事。类型别名和原类型是完全等价的，在任意时刻，语义上可以等价互换。但是  <code>NewType</code>  不是。</p>\n<p>例如  <code>IdOrName = Union[str, int]</code> ， <code>IdOrName</code>  和  <code>Union[str, int]</code>  类型是等价的。类型别名在表示某些复杂嵌套类型的时候比较直观，比如  <code>IDOrNameLookup</code>  显然比  <code>Union[dict[int, User], list[dict[str, User]]]</code>  更直观。</p>\n<h3 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a>  <code>Final</code></h3>\n<p><code>Final</code>  类型在 Python 3.8 中引入，该类型的值在赋值之后就无法再绑定到其他内容上。</p>\n<p>例如，我们定义的品牌的名称，不会轻易修改：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VENDOR_NAME<span class=\"token punctuation\">:</span> Final<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Viafore's Auto-Dog\"</span></pre></td></tr></table></figure><p>如果开发者后续错误地尝试修改其内容，Typechecker 会报错：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">display_vendor_information</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    vendor_info <span class=\"token operator\">=</span> <span class=\"token string\">\"Auto-Dog v1.0\"</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># whoops, copy-paste error, this code should be vendor_info += VENDOR_NAME  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    VENDOR_NAME <span class=\"token operator\">+=</span> VENDOR_NAME  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>vendor_info<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但是需要注意， <code>Final</code>  和  <code>C++</code>  中的  <code>const</code>  类型是不同的，因为 Python 并不限制通过函数修改对象的内容，它仅仅限制了将某个变量绑定到其他对象上。</p>\n<h2 id=\"容器类型\"><a class=\"anchor\" href=\"#容器类型\">#</a> 容器类型</h2>\n<p>除了对一般的  <code>int</code>  等基础类型之外， <code>Python</code>  中还常用  <code>list</code> 、 <code>dict</code> 、 <code>set</code>  等容器类型。相比于单个值类型的变量，其类型注释要更加复杂。</p>\n<p>看以下例子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">create_author_count_mapping</span><span class=\"token punctuation\">(</span>cookbooks<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    counter <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> book <span class=\"token keyword\">in</span> cookbooks<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        counter<span class=\"token punctuation\">[</span>book<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> counter</pre></td></tr></table></figure><p>尽管我们知道输入是一个  <code>list</code> ，输出是一个  <code>dict</code> ，但是我们仍然不清楚其中对象的具体类型。</p>\n<p>我们可以为容器中的对象添加类型说明：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>AuthorToCountMapping <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">create_author_count_mapping</span><span class=\"token punctuation\">(</span>cookbooks<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>Cookbook<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> AuthorToCountMapping<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    counter <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> book <span class=\"token keyword\">in</span> cookbooks<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        counter<span class=\"token punctuation\">[</span>book<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> counter</pre></td></tr></table></figure><p>这里，使用类型别名表示返回值的类型，在此处的上下文语境中能更加清楚地表明代码的意图。</p>\n<h3 id=\"同构数据-vs-异构数据\"><a class=\"anchor\" href=\"#同构数据-vs-异构数据\">#</a> 同构数据 vs. 异构数据</h3>\n<p>在表示容器中的对象类型时，我们经常会遇到一个问题：如果容器中的对象类型并不总是一致的，我们该如何表示其类型？</p>\n<p>我们可以将容器分为 homogeneous collections（同构容器） 和 heterogeneous collections（异构容器） 两种类型，按其中元素类型是否一致来区分。</p>\n<p>在一般情况下，我们应当尽量使用同构容器，因为异构容器经常需要我们处理 special case，这很容易出错。同构容器不一定说明其中的元素是同一种原生类型等情形，只要我们能够对其使用完全相同的操作，那么就可以认定这些元素是同构的。</p>\n<p>对于异构容器，我们可以使用  <code>Union</code>  表示其中的元素类型：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Ingredient <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># (name, quantity, units)  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Recipe <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> Ingredient<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># the list can be servings or ingredients  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">adjust_recipe</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">:</span> Recipe<span class=\"token punctuation\">,</span> servings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># ...</span></pre></td></tr></table></figure><p>如果异构容器中的类型过于复杂，我们很可能需要添加很多的类型检验代码。这时，使用一个自定义的  <code>class</code>  类型可能更加合适。</p>\n<p>如果容器中的元素类型过多，我们还可以用  <code>Any</code>  表示任意一种类型。这样，任意一种类型都是合法的。只是这样就无法再提供任何有效的参考信息。</p>\n<p>不过，对于  <code>tuple</code> ，其中的元素类型经常是异构的。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Cookbook <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># name, page count</span></pre></td></tr></table></figure><p>当然，这样的代码很容易变得难懂。因为我们需要比照每个索引对应的元素内容的含义。我们可以用  <code>dict</code>  来替换：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>food_lab <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Food Lab\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"page_count\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">958</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是如此一来， <code>dict</code>  中的键值会映射到不同的类型上。我们需要用  <code>dict[str, Union[int, str]]</code>  来表示该  <code>dict</code>  的类型。</p>\n<p>对于这种复杂类型的字典，推荐用  <code>TypedDict</code> 。</p>\n<h3 id=\"typeddict\"><a class=\"anchor\" href=\"#typeddict\">#</a>  <code>TypedDict</code></h3>\n<p><code>TypedDict</code>  在 Python 3.8 中引入。用于必须在字典中存储异构类型数据的情形。</p>\n<p>对于  <code>Json</code>   <code>YAML</code>  等文件解析得到的  <code>dict</code> ，其中的数据通常都是异构的。如果我们控制了  <code>dict</code>  的创建，那么我们可以使用  <code>dataclass</code>  或者  <code>class</code>  来管理这些数据。对于解析文件得到的内容，我们仍需要通过查看文档等方法来确认。</p>\n<p>我们可以用  <code>TypedDict</code>  来解决这一问题。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> TypedDict  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Range</span><span class=\"token punctuation\">(</span>TypedDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin\">min</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">NutritionInformation</span><span class=\"token punctuation\">(</span>TypedDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    unit<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    confidenceRange95Percent<span class=\"token punctuation\">:</span> Range  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    standardDeviation<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RecipeNutritionInformation</span><span class=\"token punctuation\">(</span>TypedDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    recipes_used<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    calories<span class=\"token punctuation\">:</span> NutritionInformation  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    fat<span class=\"token punctuation\">:</span> NutritionInformation  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    protein<span class=\"token punctuation\">:</span> NutritionInformation  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    carbs<span class=\"token punctuation\">:</span> NutritionInformation</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>nutrition_information<span class=\"token punctuation\">:</span>RecipeNutritionInformation <span class=\"token operator\">=</span> \\  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    get_nutrition_from_spoonacular<span class=\"token punctuation\">(</span>recipe_name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上述代码很清晰的表示了字典中的键值对类型。当字典类型发生了变化时，我们可以通过  <code>mypy</code>  帮助检查。如果我们忘记更新该  <code>TypedDict</code> ， <code>mypy</code>  能够帮助我们找出错误。</p>\n<h3 id=\"构建新的容器类型\"><a class=\"anchor\" href=\"#构建新的容器类型\">#</a> 构建新的容器类型</h3>\n<h4 id=\"generics\"><a class=\"anchor\" href=\"#generics\">#</a>  <code>Generics</code></h4>\n<p>如果确实现有类型无法表达我们想要的内容，我们可以通过  <code>Generics</code>  帮助构建新的容器类型。</p>\n<p>Generic 类型通常表示我们不关心其中的具体类型，但是它能够帮助我们限制用户使用不正确的类型。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>coll<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> coll<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>对于  <code>reverse</code>  函数，我们不关系其中的具体类型，但是我们知道返回的列表和传入的列表的值类型是相同的。我们可以这样表示：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> TypeVar  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>T <span class=\"token operator\">=</span> TypeVar<span class=\"token punctuation\">(</span><span class=\"token string\">'T'</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>coll<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> coll<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>这样，一个  <code>int</code>  类型的  <code>list</code>  就绝不会产生一个  <code>str</code>  类型的  <code>list</code>  的了。</p>\n<p>基于此方式，我们可以表达更复杂的类型：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Generic<span class=\"token punctuation\">,</span> TypeVar</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Node <span class=\"token operator\">=</span> TypeVar<span class=\"token punctuation\">(</span><span class=\"token string\">\"Node\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Edge <span class=\"token operator\">=</span> TypeVar<span class=\"token punctuation\">(</span><span class=\"token string\">\"Edge\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># directed graph  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span>Generic<span class=\"token punctuation\">[</span>Node<span class=\"token punctuation\">,</span> Edge<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">[</span>Node<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>Edge<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">add_relation</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> Node<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">:</span> Edge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get_relations</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> Node<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>Edge<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>这样，我们可以使用  <code>Graph</code>  表示更丰富的类型：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cookbooks<span class=\"token punctuation\">:</span> Graph<span class=\"token punctuation\">[</span>Cookbook<span class=\"token punctuation\">,</span> Cookbook<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>recipes<span class=\"token punctuation\">:</span> Graph<span class=\"token punctuation\">[</span>Recipe<span class=\"token punctuation\">,</span> Recipe<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cookbook_recipes<span class=\"token punctuation\">:</span> Graph<span class=\"token punctuation\">[</span>Cookbook<span class=\"token punctuation\">,</span> Recipe<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Graph<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>recipes<span class=\"token punctuation\">.</span>add_relation<span class=\"token punctuation\">(</span>Recipe<span class=\"token punctuation\">(</span><span class=\"token string\">'Pasta Bolognese'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    Recipe<span class=\"token punctuation\">(</span><span class=\"token string\">'Pasta with Sausage and Basil'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cookbook_recipes<span class=\"token punctuation\">.</span>add_relation<span class=\"token punctuation\">(</span>Cookbook<span class=\"token punctuation\">(</span><span class=\"token string\">'The Food Lab'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                            Recipe<span class=\"token punctuation\">(</span><span class=\"token string\">'Pasta Bolognese'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>Generic</code>  能够让我们复用更多的代码，减少错误的出现。</p>\n<p><code>Generic</code>  的其他用途：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_nutrition_info</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Union<span class=\"token punctuation\">[</span>NutritionInfo<span class=\"token punctuation\">,</span> APIError<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># ...  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_ingredients</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>Ingredient<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> APIError<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#...  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_restaurants_serving</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Union<span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>Restaurant<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> APIError<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># ...</span></pre></td></tr></table></figure><p>显然，上述方式需要我们在每个返回值中都添加一个  <code>APIError</code>  类型，非常繁琐。我们可以这样改写：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>T <span class=\"token operator\">=</span> TypeVar<span class=\"token punctuation\">(</span><span class=\"token string\">\"T\"</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>APIResponse <span class=\"token operator\">=</span> Union<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">,</span> APIError<span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_nutrition_info</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> APIResponse<span class=\"token punctuation\">[</span>NutritionInfo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># ...  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_ingredients</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> APIResponse<span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>Ingredient<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">#...  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_restaurants_serving</span><span class=\"token punctuation\">(</span>recipe<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> APIResponse<span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>Restaurant<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># ...</span></pre></td></tr></table></figure><h3 id=\"修改现有类型\"><a class=\"anchor\" href=\"#修改现有类型\">#</a> 修改现有类型</h3>\n<p>有些时候，我们可以在现有类型的基础上修改，以实现我们想要的效果。假定我们想要让字典支持别名，即不同的  <code>key</code>  能够指向相同的  <code>value</code> 。如果复制多个  <code>value</code>  的话，在修改时容易漏掉其他对应  <code>key</code>  的修改。这时，我们可以通过创建  <code>dict</code>  的子类来实现以上效果。</p>\n<p>以上需求，我们可以创建一个  <code>dict</code>  的子类来实现：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">NutritionalInformation</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__getitem__<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">pass</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> alias <span class=\"token keyword\">in</span> get_aliases<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__getitem__<span class=\"token punctuation\">(</span>alias<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">pass</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">raise</span> KeyError<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Could not find </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> or any of its aliases\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但是，以上的代码实现存在问题。当我们继承一个  <code>dict</code>  的时候，我们无法保证内部函数会调用我们覆盖的函数实现。内置类型的许多函数使用内联代码调用来保证性能。如果只是添加额外的方法，那么继承内置类型是可行的。但是在将来，也有可能发生类似的错误，因此最好避免继承内置类型。</p>\n<p>为了解决这一问题，我们可以使用  <code>UserDict</code> ：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> UserDict  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">NutritionalInformation</span><span class=\"token punctuation\">(</span>UserDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">pass</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> alias <span class=\"token keyword\">in</span> get_aliases<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>alias<span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">pass</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">raise</span> KeyError<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Could not find </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> or any of its aliases\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们可以使用  <code>self.data</code>  来获取底层的原生  <code>dict</code>  数据。除此之外，还有  <code>UserList</code>  和  <code>UserString</code>  可以帮助我们对  <code>list</code>  和  <code>str</code>  实现类似的代码。不过需要注意，这些  <code>User*</code>  类型可能会带来一定的性能损耗，需要根据实际情况考虑。</p>\n<h3 id=\"抽象类型\"><a class=\"anchor\" href=\"#抽象类型\">#</a> 抽象类型</h3>\n<p>通过定义抽象类，我们可以自定义容器类型。 <code>collection.abc</code>  中提供了许多的抽象基类，我们可以根据需求使用。</p>\n<p>上一节中，我们提到了  <code>UserDict</code>   <code>UserList</code>   <code>UserString</code> ，但是并没有  <code>UserSet</code> 。本节我们基于  <code>abc</code>  来实现。</p>\n<p><code>collections.abc.Set</code>  提供了  <code>set</code>  的抽象基类定义。其中包含以下函数：</p>\n<ul>\n<li><code>__contains__</code> ：检查是否包含某个元素</li>\n<li><code>__iter__</code> ：用于迭代元素</li>\n<li><code>__len__</code> ：返回容器中的元素个数</li>\n</ul>\n<p>只要我们实现了以上三个函数，我们就可以实现一个类似的  <code>set</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> collections  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AliasedIngredients</span><span class=\"token punctuation\">(</span>collections<span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ingredients<span class=\"token punctuation\">:</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>ingredients <span class=\"token operator\">=</span> ingredients  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__contains__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> value <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>ingredients <span class=\"token keyword\">or</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>alias <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>ingredients <span class=\"token keyword\">for</span> alias <span class=\"token keyword\">in</span> get_aliases<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ingredients<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ingredients<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ingredients <span class=\"token operator\">=</span> AliasedIngredients<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'arugula'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eggplant'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pepper'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> ingredient <span class=\"token keyword\">in</span> ingredients<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ingredient<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token string\">'arugula'</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token string\">'eggplant'</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token string\">'pepper'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ingredients<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">3</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arugula'</span> <span class=\"token keyword\">in</span> ingredients<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token boolean\">True</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rocket'</span> <span class=\"token keyword\">in</span> ingredients<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token boolean\">True</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>ingredients <span class=\"token operator\">|</span> AliasedIngredients<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'garlic'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'pepper'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'arugula'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eggplant'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'garlic'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>除此之外，我们还可以用  <code>abc</code>  来提供类型注释：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">print_items</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">:</span> collections<span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span>Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>只要对象支持  <code>__iter__</code>  方法，那么就符合这个函数的参数要求。我们可以通过 ABC 来定义更复杂的参数类型。也是 Duck Type 的关键实现。</p>\n<p>Python 3.9 提供了 25 中不同的抽象基类。可以查看<a href=\"https://docs.python.org/3/library/collections.abc.html#module-collections.abc\">文档</a>了解<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>。</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://docs.python.org/3/library/collections.abc.html#module-collections.abc\">collections.abc — Abstract Base Classes for Containers — Python 3.11.4 documentation</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Computer-Science",
                "Python",
                "Type-Annotation"
            ]
        },
        {
            "id": "https://linn-ylz.com/Computer-Science/Python/dataclass-and-YAML-transform/",
            "url": "https://linn-ylz.com/Computer-Science/Python/dataclass-and-YAML-transform/",
            "title": "dataclass 与 YAML 的相互转换",
            "date_published": "2022-11-10T15:17:33.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在许多工程项目中，经常需要配置一些选项供用户或者员工自己使用。以人工智能领域为例， <code>Paddlepaddle</code> 、 <code>mmdetection</code>  等深度学习框架都需要根据需求在配置文件中配置数据、网络等相关参数。 <code>Paddlepaddle</code>  使用  <code>YAML</code>  格式存储配置信息， <code>mmdetection</code>  则直接使用  <code>Python</code>  文件来设定配置。此外， <code>JSON</code>  格式也是常用的数据存储格式。无论何种格式，当配置信息不断增加膨胀之后，如何组织配置的结构就成为了一件迫切需要考虑的事情。</p>\n<p>这三种配置格式孰优孰劣，我无法评价。由于我目前接手的工作中使用的是  <code>YAML</code>  格式的配置文件，因此本文主要介绍最近一段时间经过调研搜索后，我决定采用的一种配置文件组织方案。</p>\n<p>在实际阐述方案之前，有必要阐述一下  <code>YAML</code>  和  <code>dataclass</code>  这两个概念。如果读者对这二者比较熟悉，可以直接跳过相关部分。</p>\n<h2 id=\"yaml-中的-tag\"><a class=\"anchor\" href=\"#yaml-中的-tag\">#</a>  <code>YAML</code>  中的  <code>tag</code></h2>\n<p><code>YAML</code>  诞生于 2004 年，根据官网说法<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>，其有 7 条设计目标，其中，易读、不同编程语言间良好的兼容性、可扩展等特性使得其被广泛用于存储格式化的信息。</p>\n<p>关于其具体的语法，可以参考<a href=\"https://yaml.org/spec/1.2.2/\">官方网站</a>或者其他<a href=\"https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html\">教程</a>，这里不做过多介绍，本文主要介绍其  <code>tag</code>  标签功能。</p>\n<p><code>tag</code>  可以标注  <code>YAML</code>  中数据的类型或者其归属的对象类别，其可以是  <code>str</code> 、 <code>int</code> 、 <code>float</code>  等基本类型，也可以是用户自己定义的任何有意义的类别名称。这些标签可以帮助我们在阅读或者解析的时候，更方便地判断数据的归属。</p>\n<p>我们不妨来看一个例子：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'linn'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">gender</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'male'</span></pre></td></tr></table></figure><p>在上述  <code>YAML</code>  文件中，我们定义了三个属性，可以很清晰地看到，这三个属性描述的都是个人信息，它们在许多场景下通常会结伴出现。对于这种数据，有一个专门的称呼叫做数据泥团（Data Clumps）<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>。有时候，我们会发现某些函数包含大量的参数，而这些参数往往一起出现，很显然，在通常的编程语言中，用结构体或者类来组织这种数据，比直接使用原生类型是更好的选择。而在  <code>YAML</code>  中，我们也可以用  <code>tag</code>  来表征这一特点：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\">!Person</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'linn'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">gender</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'male'</span></pre></td></tr></table></figure><p>在  <code>YAML</code>  中，使用  <code>!</code>  来表示这一标识是一个  <code>tag</code>  的名称。相比于仅仅列出属性，增加一个  <code>tag</code>  可以使得数据的语义更加明晰。当我们的配置文件中的数据项膨胀到数十个的时候，增加一个  <code>tag</code>  能够帮助你更好的理解配置选项的意义。</p>\n<h2 id=\"解析-yaml-的-tag\"><a class=\"anchor\" href=\"#解析-yaml-的-tag\">#</a> 解析  <code>YAML</code>  的  <code>tag</code></h2>\n<p>当然，光在  <code>YAML</code>  中定义一个  <code>tag</code> ，并没有全部发挥出  <code>tag</code>  的作用。 <code>tag</code>  黑能配合编程语言，帮助解析  <code>YAML</code>  文件中的内容。</p>\n<p>想象一下，当没有  <code>tag</code>  的时候，我们通常是如何解析  <code>YAML</code>  的？一般情况的代码大致如下（为了方便，直接在文件中用字符串表示  <code>YAML</code>  内容）：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>yaml_str <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>name: 'linn'</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>age: 18</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>gender: 'male'</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>content <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>yaml_str<span class=\"token punctuation\">,</span> Loader<span class=\"token operator\">=</span>yaml<span class=\"token punctuation\">.</span>SafeLoader<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>content</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&#123;'name': 'linn', 'age': 18, 'gender': 'male'&#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>content<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上代码可以分为两个部分：</p>\n<ol>\n<li>读取  <code>YAML</code>  文件的内容，赋值给某个对象。一般而言，读入的内容会存储在字典或者列表中；</li>\n<li>创建某个类的对象，利用读取的  <code>YAML</code>  内容为其初始化。<br />\n对于结构简单的  <code>YAML</code>  文件，上述方法还可接受，但是如果  <code>YAML</code>  文件变得复杂，那么按照上述方法来解析的代码便会变得繁琐。</li>\n</ol>\n<p>我们可以看下面这个例子<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name<span class=\"token punctuation\">:</span> MyBusiness</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>locations<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">-</span> <span class=\"token string\">\"Hawaii\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">-</span> <span class=\"token string\">\"India\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">-</span> <span class=\"token string\">\"Japan\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>employees<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token operator\">-</span> !Employee</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    name<span class=\"token punctuation\">:</span> Matthew Burruss</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">-</span> !Employee</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    name<span class=\"token punctuation\">:</span> John Doe</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p>显然，如果  <code>employees</code>  中的内容较多，我们甚至还需要写一个循环来初始化这些对象。而通过结合  <code>YAML</code>  的  <code>tag</code> ，我们可以自定义  <code>constructor</code>  来解析其内容：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token triple-quoted-string string\">\"\"\"Employee class.\"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    self<span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_id <span class=\"token operator\">=</span> name<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">employee_constructor</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">:</span> yaml<span class=\"token punctuation\">.</span>SafeLoader<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> yaml<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span>MappingNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Employee<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token triple-quoted-string string\">\"\"\"Construct an employee.\"\"\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> Employee<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>loader<span class=\"token punctuation\">.</span>construct_mapping<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_loader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token triple-quoted-string string\">\"\"\"Add constructors to PyYAML loader.\"\"\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  loader <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>SafeLoader</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  loader<span class=\"token punctuation\">.</span>add_constructor<span class=\"token punctuation\">(</span><span class=\"token string\">\"!Employee\"</span><span class=\"token punctuation\">,</span> employee_constructor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> loader</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>yaml<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.yml\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Loader<span class=\"token operator\">=</span>get_loader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  'name': 'MyBusiness',</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  'locations': ['Hawaii', 'India', 'Japan'],</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  'employees': [</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    &lt;__main__.Employee object at 0x7f0ea2694d10>,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    &lt;__main__.Employee object at 0x7f0ea2694d90></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  ]</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><p>这样一来，我们可以直接生成对应的类的对象，省去了自己创建的过程。</p>\n<h2 id=\"dataclass\"><a class=\"anchor\" href=\"#dataclass\">#</a>  <code>dataclass</code></h2>\n<p>你是否经常面临下面的情形：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>当我们在  <code>__init__</code>  函数的参数列表中敲击了一系列参数之后，又需要在  <code>__init__</code>  函数体中，将它们一一赋值给类成员变量。一旦这些变量数量增多，这项工作就成了一项非常繁琐无趣的事情。</p>\n<p>很多时候，我们定义类只是想将一些相关的数据组织起来，但却不得不动手编写许多重复的代码。于是乎，这里就轮到  <code>dataclass</code>  出场了。类比而言， <code>dataclass</code>  可以看成是  <code>C/C++</code>  中的结构体，能够方便我们将一系列的数据组合在一起，同时给每个成员指定默认值，不用再手动为成员变量赋值。</p>\n<p>可以看下面这个例子<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup>：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> dataclasses <span class=\"token keyword\">import</span> dataclass</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lang</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token triple-quoted-string string\">\"\"\"a dataclass that describes a programming language\"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'python'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstrong_type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstatic_type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tage<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">28</span></pre></td></tr></table></figure><p>这里定义了一个编程语言的类  <code>Lang</code> ，我们从  <code>dataclasses</code>  模块中引入了装饰器  <code>dataclass</code> 。之后，我们在类中定义了一系列成员变量。</p>\n<p>使用上述方式定义之后，该类会自动生成一个初始化构造函数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token operator\">=</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            strong_type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span><span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            static_type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token operator\">=</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    self<span class=\"token punctuation\">.</span>strong_type <span class=\"token operator\">=</span> strong_type</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    self<span class=\"token punctuation\">.</span>static_type <span class=\"token operator\">=</span> static_type</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr></table></figure><p>除此之外， <code>__repr__</code>  和  <code>__eq__</code>  函数也会自动生成，便于打印和比较。通过以上方式，再也不用每次都自己定义一个构造函数，并且为每个变量都赋值一遍，省却了繁琐的操作。</p>\n<p>执行效果如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> Lang<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Lang<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> strong_type<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> static_type<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> Lang<span class=\"token punctuation\">(</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Lang<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> strong_type<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> static_type<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> Lang<span class=\"token punctuation\">(</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Lang<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> Lang<span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Lang<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token boolean\">True</span></pre></td></tr></table></figure><p>除此之外， <code>dataclass</code>  可以通过  <code>asdict</code>  或者  <code>astuple</code>  生成类成员的字典或者元组。</p>\n<p>需要注意的是，对于  <code>mutable</code>  类型的变量，如  <code>list</code> 、 <code>map</code>  等，推荐使用  <code>field</code>  来初始化：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> dataclasses <span class=\"token keyword\">import</span> dataclass<span class=\"token punctuation\">,</span> field</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    mylist<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> field<span class=\"token punctuation\">(</span>default_factory<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其他功能的详细介绍，可以参考<a href=\"https://www.cnblogs.com/apocelipes/p/10284346.html\">这篇博客</a>或者<a href=\"https://peps.python.org/pep-0557/\">官方网站</a>的说明。</p>\n<h2 id=\"结合-dataclass-和-yaml\"><a class=\"anchor\" href=\"#结合-dataclass-和-yaml\">#</a> 结合  <code>dataclass</code>  和  <code>YAML</code></h2>\n<p>在介绍以上两部分内容之后，我们可以结合  <code>dataclass</code>  和  <code>YAML</code>  来方便地构建配置类，并从  <code>YAML</code>  文件导入，或者导出到  <code>YAML</code>  文件。</p>\n<p>参考了相关资料后<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3:1\">[3:1]</a></sup><sup class=\"footnote-ref\"><a href=\"#fn5\" id=\"fnref5\">[5]</a></sup>，我编写了下面的参数类模板。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> yaml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> yaml <span class=\"token keyword\">import</span> SafeLoader<span class=\"token punctuation\">,</span> SafeDumper</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> yaml<span class=\"token punctuation\">.</span>nodes <span class=\"token keyword\">import</span> MappingNode</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> dataclasses <span class=\"token keyword\">import</span> dataclass<span class=\"token punctuation\">,</span> asdict<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">,</span> is_dataclass</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Type</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> typing_extensions <span class=\"token keyword\">import</span> Self</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseConfig</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">:</span> SafeLoader<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> MappingNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Self<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"Construct an instance.\"\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>loader<span class=\"token punctuation\">.</span>construct_mapping<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">loader</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> safe_loader<span class=\"token punctuation\">:</span> SafeLoader<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Type<span class=\"token punctuation\">[</span>SafeLoader<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"Add constructors to PyYAML loader.\"\"\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        safe_loader <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>SafeLoader</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        safe_loader<span class=\"token punctuation\">.</span>add_constructor<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"!</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cls<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> cls<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> data_fields<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> cls<span class=\"token punctuation\">.</span>__dataclass_fields__<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cls_type <span class=\"token operator\">=</span> data_fields<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> is_dataclass<span class=\"token punctuation\">(</span>cls_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                safe_loader<span class=\"token punctuation\">.</span>add_constructor<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"!</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cls_type<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> cls_type<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                safe_loader <span class=\"token operator\">=</span> cls_type<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">(</span>SafeLoader<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> safe_loader</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">representer</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> dumper<span class=\"token punctuation\">:</span> SafeDumper<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> MappingNode<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"Represent an instance as a YAML mapping node.\"\"\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> dumper<span class=\"token punctuation\">.</span>represent_mapping<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"!</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cls<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">dumper</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> safe_dumper<span class=\"token punctuation\">:</span> SafeDumper<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Type<span class=\"token punctuation\">[</span>SafeDumper<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"Add representers to a YAML seriailizer.\"\"\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\"># safe_dumper = yaml.SafeDumper</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        safe_dumper<span class=\"token punctuation\">.</span>add_representer<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> cls<span class=\"token punctuation\">.</span>representer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> data_fields<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> cls<span class=\"token punctuation\">.</span>__dataclass_fields__<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            cls_type <span class=\"token operator\">=</span> data_fields<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> is_dataclass<span class=\"token punctuation\">(</span>cls_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                safe_dumper<span class=\"token punctuation\">.</span>add_representer<span class=\"token punctuation\">(</span>cls_type<span class=\"token punctuation\">,</span> cls_type<span class=\"token punctuation\">.</span>representer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                safe_dumper <span class=\"token operator\">=</span> cls_type<span class=\"token punctuation\">.</span>dumper<span class=\"token punctuation\">(</span>safe_dumper<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> safe_dumper</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DatasetConfig</span><span class=\"token punctuation\">(</span>BaseConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    data_root_path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"./data/coco\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    train_path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"./data/coco/train\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    train_ann_path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"./data/coco/annotations/instances_train2017.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">COCODatasetConfig</span><span class=\"token punctuation\">(</span>BaseConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"COCO\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    num_classes<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    dataset<span class=\"token punctuation\">:</span> DatasetConfig <span class=\"token operator\">=</span> field<span class=\"token punctuation\">(</span>default_factory<span class=\"token operator\">=</span>DatasetConfig<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">COCODataConfig</span><span class=\"token punctuation\">(</span>BaseConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    train_data<span class=\"token punctuation\">:</span> COCODatasetConfig <span class=\"token operator\">=</span> field<span class=\"token punctuation\">(</span>default_factory<span class=\"token operator\">=</span>COCODatasetConfig<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    val_data<span class=\"token punctuation\">:</span> COCODatasetConfig <span class=\"token operator\">=</span> field<span class=\"token punctuation\">(</span>default_factory<span class=\"token operator\">=</span>COCODatasetConfig<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\"># If you want dump without tag, change the tag name of the class</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\"># to 'tag:yaml.org,2002:map', this is the default map type of YAML</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\"># @classmethod</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\"># def representer(cls, dumper: SafeDumper, config) -> MappingNode:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">#     \"\"\"Represent an instance as a YAML mapping node.\"\"\"</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">#     return dumper.represent_mapping(\"tag:yaml.org,2002:map\", config.__dict__)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\"># config = COCODatasetConfig()</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\"># config = yaml.load(open(\"output.yaml\", \"rb\"), Loader=COCODataConfig.loader(SafeLoader))</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    config <span class=\"token operator\">=</span> COCODataConfig<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>asdict<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\"># config = DatasetConfig()</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\"># with open(\"output.yaml\", \"w\") as stream:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\"># stream.write(yaml.dump(config, Dumper=COCODatasetConfig.dumper()))</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\"># stream.write(yaml.dump(config, Dumper=COCODataConfig.dumper(SafeDumper)))</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token comment\"># yaml.dump(config, sys.stdout, Dumper=COCODatasetConfig.dumper(), sort_keys=False)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    yaml<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span> Dumper<span class=\"token operator\">=</span>COCODataConfig<span class=\"token punctuation\">.</span>dumper<span class=\"token punctuation\">(</span>SafeDumper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sort_keys<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上述模板可以支持多个  <code>dataclass</code>  类别的嵌套，并且会保留每个类别的  <code>tag</code>  标签，便于将来再读取配置的内容。</p>\n<p>如果不想输出某个  <code>dataclass</code>  类的  <code>tag</code> ，则重载其  <code>representer</code>  和  <code>loader</code>  函数，修改其中设定的  <code>tag</code>  名称为  <code>tag:yaml.org,2002:map</code> <sup class=\"footnote-ref\"><a href=\"#fn6\" id=\"fnref6\">[6]</a></sup>。其他类型可以参看官方文档<sup class=\"footnote-ref\"><a href=\"#fn7\" id=\"fnref7\">[7]</a></sup>。</p>\n<p>如果某些变量依赖于其他变量的赋值，可以使用  <code>__post_init__</code>  方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    c<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> field<span class=\"token punctuation\">(</span>init<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__post_init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>b</pre></td></tr></table></figure><p>此外，如果需要额外的参数用于初始化，但是之后的程序中不需要用到它的话，可以指定一个  <code>field</code>  的类型注解为  <code>dataclasses.InitVar</code> ，那么这个  <code>field</code>  将只能在初始化过程中（ <code>__init__</code>  和  <code>__post_init__</code> ）使用，当初始化完成后访问该  <code>field</code>  会返回一个 <code>dataclasses.Field</code>  对象而不是  <code>field</code>  原本的值，也就是该  <code>field</code>  不再是一个可访问的数据对象。比如一个由数据库对象，它<strong>只需要在初始化的过程中被访问</strong>：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    j<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    database<span class=\"token punctuation\">:</span> InitVar<span class=\"token punctuation\">[</span>DatabaseType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__post_init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> database<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>j <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> database <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            self<span class=\"token punctuation\">.</span>j <span class=\"token operator\">=</span> database<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">'j'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>c <span class=\"token operator\">=</span> C<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> database<span class=\"token operator\">=</span>my_database<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>database</code>  只在初始化过程中用于初始化  <code>i, j</code>  ，后续无法再访问，可以认为是传递了一个额外的参数用于初始化操作。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>通过以上内容，我们得到了一个用于  <code>YAML</code>  格式的通用模板类，用于导入或者导出相关的配置内容，帮助我们更好地管理配置文件中参数的结构，提高工作效率。&lt;span class=&quot;spoiler&quot;&gt; 减少加班 &lt;/span&gt;</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://yaml.org/spec/1.2.2/\">YAML Ain’t Markup Language (YAML™) revision 1.2.2</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://refactoring.guru/smells/data-clumps\">Data Clumps (refactoring.guru)</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>来自博客 <a href=\"https://matthewpburruss.com/post/yaml/\">A Powerful Python Trick: Custom YAML tags &amp; PyYAML | Matthew Burruss (matthewpburruss.com)</a> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a> <a href=\"#fnref3:1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p>来自博客 <a href=\"https://www.cnblogs.com/apocelipes/p/10284346.html\">Python3.7 dataclass 使用指南 - apocelipes - 博客园 (cnblogs.com)</a> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn5\" class=\"footnote-item\"><p><a href=\"https://qiita.com/kzmssk/items/483f25f47e0ed10aa948\">dataclass を使った YAML 形式で保存／ロード可能な設定クラス - Qiita</a> <a href=\"#fnref5\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn6\" class=\"footnote-item\"><p><a href=\"https://caosiyang.github.io/posts/2020/08/30/pyyaml/\">PyYAML 笔记 - 一个单板滑雪爱好者的编程笔记 (caosiyang.github.io)</a> <a href=\"#fnref6\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn7\" class=\"footnote-item\"><p><a href=\"https://yaml.org/type/index.html\">Language-Independent Types for YAML™ Version 1.1</a> <a href=\"#fnref7\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Computer-Science",
                "Algorithm",
                "Python",
                "YAML",
                "dataclass"
            ]
        }
    ]
}