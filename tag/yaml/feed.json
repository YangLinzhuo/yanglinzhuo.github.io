{
    "version": "https://jsonfeed.org/version/1",
    "title": "林•初夏 • All posts by \"yaml\" tag",
    "description": "Linn 的个人博客",
    "home_page_url": "https://linn-ylz.com",
    "items": [
        {
            "id": "https://linn-ylz.com/Computer-Science/Python/dataclass-and-YAML-transform/",
            "url": "https://linn-ylz.com/Computer-Science/Python/dataclass-and-YAML-transform/",
            "title": "dataclass 与 YAML 的相互转换",
            "date_published": "2022-11-10T15:17:33.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在许多工程项目中，经常需要配置一些选项供用户或者员工自己使用。以人工智能领域为例， <code>Paddlepaddle</code> 、 <code>mmdetection</code>  等深度学习框架都需要根据需求在配置文件中配置数据、网络等相关参数。 <code>Paddlepaddle</code>  使用  <code>YAML</code>  格式存储配置信息， <code>mmdetection</code>  则直接使用  <code>Python</code>  文件来设定配置。此外， <code>JSON</code>  格式也是常用的数据存储格式。无论何种格式，当配置信息不断增加膨胀之后，如何组织配置的结构就成为了一件迫切需要考虑的事情。</p>\n<p>这三种配置格式孰优孰劣，我无法评价。由于我目前接手的工作中使用的是  <code>YAML</code>  格式的配置文件，因此本文主要介绍最近一段时间经过调研搜索后，我决定采用的一种配置文件组织方案。</p>\n<p>在实际阐述方案之前，有必要阐述一下  <code>YAML</code>  和  <code>dataclass</code>  这两个概念。如果读者对这二者比较熟悉，可以直接跳过相关部分。</p>\n<h2 id=\"yaml-中的-tag\"><a class=\"anchor\" href=\"#yaml-中的-tag\">#</a>  <code>YAML</code>  中的  <code>tag</code></h2>\n<p><code>YAML</code>  诞生于 2004 年，根据官网说法<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>，其有 7 条设计目标，其中，易读、不同编程语言间良好的兼容性、可扩展等特性使得其被广泛用于存储格式化的信息。</p>\n<p>关于其具体的语法，可以参考<a href=\"https://yaml.org/spec/1.2.2/\">官方网站</a>或者其他<a href=\"https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html\">教程</a>，这里不做过多介绍，本文主要介绍其  <code>tag</code>  标签功能。</p>\n<p><code>tag</code>  可以标注  <code>YAML</code>  中数据的类型或者其归属的对象类别，其可以是  <code>str</code> 、 <code>int</code> 、 <code>float</code>  等基本类型，也可以是用户自己定义的任何有意义的类别名称。这些标签可以帮助我们在阅读或者解析的时候，更方便地判断数据的归属。</p>\n<p>我们不妨来看一个例子：</p>\n<pre><code class=\"language-yaml\">name: 'linn'\nage: 18\ngender: 'male'\n</code></pre>\n<p>在上述  <code>YAML</code>  文件中，我们定义了三个属性，可以很清晰地看到，这三个属性描述的都是个人信息，它们在许多场景下通常会结伴出现。对于这种数据，有一个专门的称呼叫做数据泥团（Data Clumps）<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>。有时候，我们会发现某些函数包含大量的参数，而这些参数往往一起出现，很显然，在通常的编程语言中，用结构体或者类来组织这种数据，比直接使用原生类型是更好的选择。而在  <code>YAML</code>  中，我们也可以用  <code>tag</code>  来表征这一特点：</p>\n<pre><code class=\"language-yaml\">!Person\nname: 'linn'\nage: 18\ngender: 'male'\n</code></pre>\n<p>在  <code>YAML</code>  中，使用  <code>!</code>  来表示这一标识是一个  <code>tag</code>  的名称。相比于仅仅列出属性，增加一个  <code>tag</code>  可以使得数据的语义更加明晰。当我们的配置文件中的数据项膨胀到数十个的时候，增加一个  <code>tag</code>  能够帮助你更好的理解配置选项的意义。</p>\n<h2 id=\"解析-yaml-的-tag\"><a class=\"anchor\" href=\"#解析-yaml-的-tag\">#</a> 解析  <code>YAML</code>  的  <code>tag</code></h2>\n<p>当然，光在  <code>YAML</code>  中定义一个  <code>tag</code> ，并没有全部发挥出  <code>tag</code>  的作用。 <code>tag</code>  黑能配合编程语言，帮助解析  <code>YAML</code>  文件中的内容。</p>\n<p>想象一下，当没有  <code>tag</code>  的时候，我们通常是如何解析  <code>YAML</code>  的？一般情况的代码大致如下（为了方便，直接在文件中用字符串表示  <code>YAML</code>  内容）：</p>\n<pre><code class=\"language-python\">import yaml\nclass Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\nyaml_str = &quot;&quot;&quot;\nname: 'linn'\nage: 18\ngender: 'male'\n&quot;&quot;&quot;\ncontent = yaml.load(yaml_str, Loader=yaml.SafeLoader)\n\n&quot;&quot;&quot;\ncontent\n&#123;'name': 'linn', 'age': 18, 'gender': 'male'&#125;\n&quot;&quot;&quot;\n\nperson = Person(**content)\n</code></pre>\n<p>以上代码可以分为两个部分：</p>\n<ol>\n<li>读取  <code>YAML</code>  文件的内容，赋值给某个对象。一般而言，读入的内容会存储在字典或者列表中；</li>\n<li>创建某个类的对象，利用读取的  <code>YAML</code>  内容为其初始化。<br />\n对于结构简单的  <code>YAML</code>  文件，上述方法还可接受，但是如果  <code>YAML</code>  文件变得复杂，那么按照上述方法来解析的代码便会变得繁琐。</li>\n</ol>\n<p>我们可以看下面这个例子<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>：</p>\n<pre><code class=\"language-python\">name: MyBusiness\nlocations:\n  - &quot;Hawaii&quot;\n  - &quot;India&quot;\n  - &quot;Japan&quot;\nemployees:\n  - !Employee\n    name: Matthew Burruss\n    id: 1\n  - !Employee\n    name: John Doe\n    id: 2\n</code></pre>\n<p>显然，如果  <code>employees</code>  中的内容较多，我们甚至还需要写一个循环来初始化这些对象。而通过结合  <code>YAML</code>  的  <code>tag</code> ，我们可以自定义  <code>constructor</code>  来解析其内容：</p>\n<pre><code class=\"language-python\">import yaml\n\nclass Employee:\n  &quot;&quot;&quot;Employee class.&quot;&quot;&quot;\n  def __init__(self, name, id):\n    self._name, self._id = name, id\n\ndef employee_constructor(loader: yaml.SafeLoader, node: yaml.nodes.MappingNode) -&gt; Employee:\n  &quot;&quot;&quot;Construct an employee.&quot;&quot;&quot;\n  return Employee(**loader.construct_mapping(node))\n\ndef get_loader():\n  &quot;&quot;&quot;Add constructors to PyYAML loader.&quot;&quot;&quot;\n  loader = yaml.SafeLoader\n  loader.add_constructor(&quot;!Employee&quot;, employee_constructor)\n  return loader\n\nyaml.load(open(&quot;config.yml&quot;, &quot;rb&quot;), Loader=get_loader())\n&quot;&quot;&quot;\n&#123;\n  'name': 'MyBusiness',\n  'locations': ['Hawaii', 'India', 'Japan'],\n  'employees': [\n    &lt;__main__.Employee object at 0x7f0ea2694d10&gt;,\n    &lt;__main__.Employee object at 0x7f0ea2694d90&gt;\n  ]\n&#125;\n&quot;&quot;&quot;\n</code></pre>\n<p>这样一来，我们可以直接生成对应的类的对象，省去了自己创建的过程。</p>\n<h2 id=\"dataclass\"><a class=\"anchor\" href=\"#dataclass\">#</a>  <code>dataclass</code></h2>\n<p>你是否经常面临下面的情形：</p>\n<pre><code class=\"language-python\">class Person:\n    def __init__(self, name, age, gender, ...):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        ...\n</code></pre>\n<p>当我们在  <code>__init__</code>  函数的参数列表中敲击了一系列参数之后，又需要在  <code>__init__</code>  函数体中，将它们一一赋值给类成员变量。一旦这些变量数量增多，这项工作就成了一项非常繁琐无趣的事情。</p>\n<p>很多时候，我们定义类只是想将一些相关的数据组织起来，但却不得不动手编写许多重复的代码。于是乎，这里就轮到  <code>dataclass</code>  出场了。类比而言， <code>dataclass</code>  可以看成是  <code>C/C++</code>  中的结构体，能够方便我们将一系列的数据组合在一起，同时给每个成员指定默认值，不用再手动为成员变量赋值。</p>\n<p>可以看下面这个例子<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup>：</p>\n<pre><code class=\"language-python\">from dataclasses import dataclass\n@dataclass\nclass Lang: \n\t&quot;&quot;&quot;a dataclass that describes a programming language&quot;&quot;&quot;\n\tname: str = 'python'\n\tstrong_type: bool = True\n\tstatic_type: bool = False\n\tage: int = 28 \n</code></pre>\n<p>这里定义了一个编程语言的类  <code>Lang</code> ，我们从  <code>dataclasses</code>  模块中引入了装饰器  <code>dataclass</code> 。之后，我们在类中定义了一系列成员变量。</p>\n<p>使用上述方式定义之后，该类会自动生成一个初始化构造函数：</p>\n<pre><code class=\"language-python\">def __init__(self, name: str='python',\n            strong_type: bool=True,\n            static_type: bool=False,\n            age: int=28):\n    self.name = name\n    self.strong_type = strong_type\n    self.static_type = static_type\n    self.age = age\n</code></pre>\n<p>除此之外， <code>__repr__</code>  和  <code>__eq__</code>  函数也会自动生成，便于打印和比较。通过以上方式，再也不用每次都自己定义一个构造函数，并且为每个变量都赋值一遍，省却了繁琐的操作。</p>\n<p>执行效果如下：</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; Lang()\nLang(name='python', strong_type=True, static_type=False, age=28)\n&gt;&gt;&gt; Lang('js', False, False, 23)\nLang(name='js', strong_type=False, static_type=False, age=23)\n&gt;&gt;&gt; Lang('js', False, False, 23) == Lang()\nFalse\n&gt;&gt;&gt; Lang('python', True, False, 28) == Lang()\nTrue\n</code></pre>\n<p>除此之外， <code>dataclass</code>  可以通过  <code>asdict</code>  或者  <code>astuple</code>  生成类成员的字典或者元组。</p>\n<p>需要注意的是，对于  <code>mutable</code>  类型的变量，如  <code>list</code> 、 <code>map</code>  等，推荐使用  <code>field</code>  来初始化：</p>\n<pre><code class=\"language-python\">from dataclasses import dataclass, field\n@dataclass\nclass C:\n    mylist: List[int] = field(default_factory=list)\n</code></pre>\n<p>其他功能的详细介绍，可以参考<a href=\"https://www.cnblogs.com/apocelipes/p/10284346.html\">这篇博客</a>或者<a href=\"https://peps.python.org/pep-0557/\">官方网站</a>的说明。</p>\n<h2 id=\"结合-dataclass-和-yaml\"><a class=\"anchor\" href=\"#结合-dataclass-和-yaml\">#</a> 结合  <code>dataclass</code>  和  <code>YAML</code></h2>\n<p>在介绍以上两部分内容之后，我们可以结合  <code>dataclass</code>  和  <code>YAML</code>  来方便地构建配置类，并从  <code>YAML</code>  文件导入，或者导出到  <code>YAML</code>  文件。</p>\n<p>参考了相关资料后<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3:1\">[3:1]</a></sup><sup class=\"footnote-ref\"><a href=\"#fn5\" id=\"fnref5\">[5]</a></sup>，我编写了下面的参数类模板。</p>\n<pre><code class=\"language-python\">import sys\nimport yaml\nfrom yaml import SafeLoader, SafeDumper\nfrom yaml.nodes import MappingNode\nfrom dataclasses import dataclass, asdict, field, is_dataclass\nfrom typing import Type\nfrom typing_extensions import Self\n\n\n@dataclass\nclass BaseConfig(object):\n    @classmethod\n    def constructor(cls, loader: SafeLoader, node: MappingNode) -&gt; Self:\n        &quot;&quot;&quot;Construct an instance.&quot;&quot;&quot;\n        return cls(**loader.construct_mapping(node))\n\n    @classmethod\n    def loader(cls, safe_loader: SafeLoader) -&gt; Type[SafeLoader]:\n        &quot;&quot;&quot;Add constructors to PyYAML loader.&quot;&quot;&quot;\n        safe_loader = yaml.SafeLoader\n        safe_loader.add_constructor(f&quot;!&#123;cls.__name__&#125;&quot;, cls.constructor)\n        for (name, data_fields) in cls.__dataclass_fields__.items():\n            cls_type = data_fields.type\n            if is_dataclass(cls_type):\n                safe_loader.add_constructor(f&quot;!&#123;cls_type.__name__&#125;&quot;, cls_type.constructor)\n                safe_loader = cls_type.loader(SafeLoader)\n        return safe_loader\n\n    @classmethod\n    def representer(cls, dumper: SafeDumper, config) -&gt; MappingNode:\n        &quot;&quot;&quot;Represent an instance as a YAML mapping node.&quot;&quot;&quot;\n        return dumper.represent_mapping(f&quot;!&#123;cls.__name__&#125;&quot;, config.__dict__)\n\n    @classmethod\n    def dumper(cls, safe_dumper: SafeDumper) -&gt; Type[SafeDumper]:\n        &quot;&quot;&quot;Add representers to a YAML seriailizer.&quot;&quot;&quot;\n        # safe_dumper = yaml.SafeDumper\n        safe_dumper.add_representer(cls, cls.representer)\n        for (name, data_fields) in cls.__dataclass_fields__.items():\n            cls_type = data_fields.type\n            if is_dataclass(cls_type):\n                safe_dumper.add_representer(cls_type, cls_type.representer)\n                safe_dumper = cls_type.dumper(safe_dumper)\n        return safe_dumper\n\n\n@dataclass\nclass DatasetConfig(BaseConfig):\n    data_root_path: str = &quot;./data/coco&quot;\n    train_path: str = &quot;./data/coco/train&quot;\n    train_ann_path: str = &quot;./data/coco/annotations/instances_train2017.json&quot;\n\n\n@dataclass\nclass COCODatasetConfig(BaseConfig):\n    name: str = &quot;COCO&quot;\n    num_classes: int = 80\n    dataset: DatasetConfig = field(default_factory=DatasetConfig)\n\n\n@dataclass\nclass COCODataConfig(BaseConfig):\n    train_data: COCODatasetConfig = field(default_factory=COCODatasetConfig)\n    val_data: COCODatasetConfig = field(default_factory=COCODatasetConfig)\n\n    # If you want dump without tag, change the tag name of the class\n    # to 'tag:yaml.org,2002:map', this is the default map type of YAML\n    # @classmethod\n    # def representer(cls, dumper: SafeDumper, config) -&gt; MappingNode:\n    #     &quot;&quot;&quot;Represent an instance as a YAML mapping node.&quot;&quot;&quot;\n    #     return dumper.represent_mapping(&quot;tag:yaml.org,2002:map&quot;, config.__dict__)\n\nif __name__ == &quot;__main__&quot;:\n    # config = COCODatasetConfig()\n    # config = yaml.load(open(&quot;output.yaml&quot;, &quot;rb&quot;), Loader=COCODataConfig.loader(SafeLoader))\n    config = COCODataConfig()\n    print(config)\n    print(asdict(config))\n    # config = DatasetConfig()\n    # with open(&quot;output.yaml&quot;, &quot;w&quot;) as stream:\n        # stream.write(yaml.dump(config, Dumper=COCODatasetConfig.dumper()))\n        # stream.write(yaml.dump(config, Dumper=COCODataConfig.dumper(SafeDumper)))\n    # yaml.dump(config, sys.stdout, Dumper=COCODatasetConfig.dumper(), sort_keys=False)\n    yaml.dump(config, sys.stdout, Dumper=COCODataConfig.dumper(SafeDumper), sort_keys=False)\n\n\n</code></pre>\n<p>上述模板可以支持多个  <code>dataclass</code>  类别的嵌套，并且会保留每个类别的  <code>tag</code>  标签，便于将来再读取配置的内容。</p>\n<p>如果不想输出某个  <code>dataclass</code>  类的  <code>tag</code> ，则重载其  <code>representer</code>  和  <code>loader</code>  函数，修改其中设定的  <code>tag</code>  名称为  <code>tag:yaml.org,2002:map</code> <sup class=\"footnote-ref\"><a href=\"#fn6\" id=\"fnref6\">[6]</a></sup>。其他类型可以参看官方文档<sup class=\"footnote-ref\"><a href=\"#fn7\" id=\"fnref7\">[7]</a></sup>。</p>\n<p>如果某些变量依赖于其他变量的赋值，可以使用  <code>__post_init__</code>  方法：</p>\n<pre><code class=\"language-python\">@dataclass\nclass C:\n    a: int\n    b: int\n    c: int = field(init=False)\n \n    def __post_init__(self):\n        self.c = self.a + self.b\n</code></pre>\n<p>此外，如果需要额外的参数用于初始化，但是之后的程序中不需要用到它的话，可以指定一个  <code>field</code>  的类型注解为  <code>dataclasses.InitVar</code> ，那么这个  <code>field</code>  将只能在初始化过程中（ <code>__init__</code>  和  <code>__post_init__</code> ）使用，当初始化完成后访问该  <code>field</code>  会返回一个 <code>dataclasses.Field</code>  对象而不是  <code>field</code>  原本的值，也就是该  <code>field</code>  不再是一个可访问的数据对象。比如一个由数据库对象，它<strong>只需要在初始化的过程中被访问</strong>：</p>\n<pre><code class=\"language-python\">@dataclass\nclass C:\n    i: int\n    j: int = None\n    database: InitVar[DatabaseType] = None\n \n    def __post_init__(self, database):\n        if self.j is None and database is not None:\n            self.j = database.lookup('j')\n \nc = C(10, database=my_database)\n</code></pre>\n<p><code>database</code>  只在初始化过程中用于初始化  <code>i, j</code>  ，后续无法再访问，可以认为是传递了一个额外的参数用于初始化操作。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>通过以上内容，我们得到了一个用于  <code>YAML</code>  格式的通用模板类，用于导入或者导出相关的配置内容，帮助我们更好地管理配置文件中参数的结构，提高工作效率。&lt;span class=&quot;spoiler&quot;&gt; 减少加班 &lt;/span&gt;</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://yaml.org/spec/1.2.2/\">YAML Ain’t Markup Language (YAML™) revision 1.2.2</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://refactoring.guru/smells/data-clumps\">Data Clumps (refactoring.guru)</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>来自博客 <a href=\"https://matthewpburruss.com/post/yaml/\">A Powerful Python Trick: Custom YAML tags &amp; PyYAML | Matthew Burruss (matthewpburruss.com)</a> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a> <a href=\"#fnref3:1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p>来自博客 <a href=\"https://www.cnblogs.com/apocelipes/p/10284346.html\">Python3.7 dataclass 使用指南 - apocelipes - 博客园 (cnblogs.com)</a> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn5\" class=\"footnote-item\"><p><a href=\"https://qiita.com/kzmssk/items/483f25f47e0ed10aa948\">dataclass を使った YAML 形式で保存／ロード可能な設定クラス - Qiita</a> <a href=\"#fnref5\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn6\" class=\"footnote-item\"><p><a href=\"https://caosiyang.github.io/posts/2020/08/30/pyyaml/\">PyYAML 笔记 - 一个单板滑雪爱好者的编程笔记 (caosiyang.github.io)</a> <a href=\"#fnref6\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn7\" class=\"footnote-item\"><p><a href=\"https://yaml.org/type/index.html\">Language-Independent Types for YAML™ Version 1.1</a> <a href=\"#fnref7\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Computer-Science",
                "Algorithm",
                "Python",
                "YAML",
                "dataclass"
            ]
        }
    ]
}