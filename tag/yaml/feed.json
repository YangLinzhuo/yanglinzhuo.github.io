{
    "version": "https://jsonfeed.org/version/1",
    "title": "林•初夏 • All posts by \"yaml\" tag",
    "description": "Linn 的个人博客",
    "home_page_url": "https://linn-ylz.com",
    "items": [
        {
            "id": "https://linn-ylz.com/Computer-Science/Python/dataclass-and-YAML-transform/",
            "url": "https://linn-ylz.com/Computer-Science/Python/dataclass-and-YAML-transform/",
            "title": "dataclass 与 YAML 的相互转换",
            "date_published": "2022-11-10T15:17:33.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在许多工程项目中，经常需要配置一些选项供用户或者员工自己使用。以人工智能领域为例， <code>Paddlepaddle</code> 、 <code>mmdetection</code>  等深度学习框架都需要根据需求在配置文件中配置数据、网络等相关参数。 <code>Paddlepaddle</code>  使用  <code>YAML</code>  格式存储配置信息， <code>mmdetection</code>  则直接使用  <code>Python</code>  文件来设定配置。此外， <code>JSON</code>  格式也是常用的数据存储格式。无论何种格式，当配置信息不断增加膨胀之后，如何组织配置的结构就成为了一件迫切需要考虑的事情。</p>\n<p>这三种配置格式孰优孰劣，我无法评价。由于我目前接手的工作中使用的是  <code>YAML</code>  格式的配置文件，因此本文主要介绍最近一段时间经过调研搜索后，我决定采用的一种配置文件组织方案。</p>\n<p>在实际阐述方案之前，有必要阐述一下  <code>YAML</code>  和  <code>dataclass</code>  这两个概念。如果读者对这二者比较熟悉，可以直接跳过相关部分。</p>\n<h2 id=\"yaml-中的-tag\"><a class=\"anchor\" href=\"#yaml-中的-tag\">#</a>  <code>YAML</code>  中的  <code>tag</code></h2>\n<p><code>YAML</code>  诞生于 2004 年，根据官网说法<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>，其有 7 条设计目标，其中，易读、不同编程语言间良好的兼容性、可扩展等特性使得其被广泛用于存储格式化的信息。</p>\n<p>关于其具体的语法，可以参考<a href=\"https://yaml.org/spec/1.2.2/\">官方网站</a>或者其他<a href=\"https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html\">教程</a>，这里不做过多介绍，本文主要介绍其  <code>tag</code>  标签功能。</p>\n<p><code>tag</code>  可以标注  <code>YAML</code>  中数据的类型或者其归属的对象类别，其可以是  <code>str</code> 、 <code>int</code> 、 <code>float</code>  等基本类型，也可以是用户自己定义的任何有意义的类别名称。这些标签可以帮助我们在阅读或者解析的时候，更方便地判断数据的归属。</p>\n<p>我们不妨来看一个例子：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'linn'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">gender</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'male'</span></pre></td></tr></table></figure><p>在上述  <code>YAML</code>  文件中，我们定义了三个属性，可以很清晰地看到，这三个属性描述的都是个人信息，它们在许多场景下通常会结伴出现。对于这种数据，有一个专门的称呼叫做数据泥团（Data Clumps）<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>。有时候，我们会发现某些函数包含大量的参数，而这些参数往往一起出现，很显然，在通常的编程语言中，用结构体或者类来组织这种数据，比直接使用原生类型是更好的选择。而在  <code>YAML</code>  中，我们也可以用  <code>tag</code>  来表征这一特点：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\">!Person</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'linn'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">age</span><span class=\"token punctuation\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">gender</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'male'</span></pre></td></tr></table></figure><p>在  <code>YAML</code>  中，使用  <code>!</code>  来表示这一标识是一个  <code>tag</code>  的名称。相比于仅仅列出属性，增加一个  <code>tag</code>  可以使得数据的语义更加明晰。当我们的配置文件中的数据项膨胀到数十个的时候，增加一个  <code>tag</code>  能够帮助你更好的理解配置选项的意义。</p>\n<h2 id=\"解析-yaml-的-tag\"><a class=\"anchor\" href=\"#解析-yaml-的-tag\">#</a> 解析  <code>YAML</code>  的  <code>tag</code></h2>\n<p>当然，光在  <code>YAML</code>  中定义一个  <code>tag</code> ，并没有全部发挥出  <code>tag</code>  的作用。 <code>tag</code>  黑能配合编程语言，帮助解析  <code>YAML</code>  文件中的内容。</p>\n<p>想象一下，当没有  <code>tag</code>  的时候，我们通常是如何解析  <code>YAML</code>  的？一般情况的代码大致如下（为了方便，直接在文件中用字符串表示  <code>YAML</code>  内容）：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>yaml_str <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>name: 'linn'</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>age: 18</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>gender: 'male'</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>content <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>yaml_str<span class=\"token punctuation\">,</span> Loader<span class=\"token operator\">=</span>yaml<span class=\"token punctuation\">.</span>SafeLoader<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>content</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>&#123;'name': 'linn', 'age': 18, 'gender': 'male'&#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>person <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>content<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上代码可以分为两个部分：</p>\n<ol>\n<li>读取  <code>YAML</code>  文件的内容，赋值给某个对象。一般而言，读入的内容会存储在字典或者列表中；</li>\n<li>创建某个类的对象，利用读取的  <code>YAML</code>  内容为其初始化。<br />\n对于结构简单的  <code>YAML</code>  文件，上述方法还可接受，但是如果  <code>YAML</code>  文件变得复杂，那么按照上述方法来解析的代码便会变得繁琐。</li>\n</ol>\n<p>我们可以看下面这个例子<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name<span class=\"token punctuation\">:</span> MyBusiness</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>locations<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">-</span> <span class=\"token string\">\"Hawaii\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">-</span> <span class=\"token string\">\"India\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">-</span> <span class=\"token string\">\"Japan\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>employees<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token operator\">-</span> !Employee</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    name<span class=\"token punctuation\">:</span> Matthew Burruss</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">-</span> !Employee</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    name<span class=\"token punctuation\">:</span> John Doe</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p>显然，如果  <code>employees</code>  中的内容较多，我们甚至还需要写一个循环来初始化这些对象。而通过结合  <code>YAML</code>  的  <code>tag</code> ，我们可以自定义  <code>constructor</code>  来解析其内容：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token triple-quoted-string string\">\"\"\"Employee class.\"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    self<span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_id <span class=\"token operator\">=</span> name<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">employee_constructor</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">:</span> yaml<span class=\"token punctuation\">.</span>SafeLoader<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> yaml<span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">.</span>MappingNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Employee<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token triple-quoted-string string\">\"\"\"Construct an employee.\"\"\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> Employee<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>loader<span class=\"token punctuation\">.</span>construct_mapping<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_loader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token triple-quoted-string string\">\"\"\"Add constructors to PyYAML loader.\"\"\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  loader <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>SafeLoader</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  loader<span class=\"token punctuation\">.</span>add_constructor<span class=\"token punctuation\">(</span><span class=\"token string\">\"!Employee\"</span><span class=\"token punctuation\">,</span> employee_constructor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> loader</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>yaml<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.yml\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Loader<span class=\"token operator\">=</span>get_loader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  'name': 'MyBusiness',</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  'locations': ['Hawaii', 'India', 'Japan'],</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  'employees': [</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    &lt;__main__.Employee object at 0x7f0ea2694d10>,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    &lt;__main__.Employee object at 0x7f0ea2694d90></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  ]</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\"\"\"</span></pre></td></tr></table></figure><p>这样一来，我们可以直接生成对应的类的对象，省去了自己创建的过程。</p>\n<h2 id=\"dataclass\"><a class=\"anchor\" href=\"#dataclass\">#</a>  <code>dataclass</code></h2>\n<p>你是否经常面临下面的情形：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>当我们在  <code>__init__</code>  函数的参数列表中敲击了一系列参数之后，又需要在  <code>__init__</code>  函数体中，将它们一一赋值给类成员变量。一旦这些变量数量增多，这项工作就成了一项非常繁琐无趣的事情。</p>\n<p>很多时候，我们定义类只是想将一些相关的数据组织起来，但却不得不动手编写许多重复的代码。于是乎，这里就轮到  <code>dataclass</code>  出场了。类比而言， <code>dataclass</code>  可以看成是  <code>C/C++</code>  中的结构体，能够方便我们将一系列的数据组合在一起，同时给每个成员指定默认值，不用再手动为成员变量赋值。</p>\n<p>可以看下面这个例子<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup>：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> dataclasses <span class=\"token keyword\">import</span> dataclass</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lang</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token triple-quoted-string string\">\"\"\"a dataclass that describes a programming language\"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tname<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">'python'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstrong_type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstatic_type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tage<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">28</span></pre></td></tr></table></figure><p>这里定义了一个编程语言的类  <code>Lang</code> ，我们从  <code>dataclasses</code>  模块中引入了装饰器  <code>dataclass</code> 。之后，我们在类中定义了一系列成员变量。</p>\n<p>使用上述方式定义之后，该类会自动生成一个初始化构造函数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token operator\">=</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            strong_type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span><span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            static_type<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token operator\">=</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    self<span class=\"token punctuation\">.</span>strong_type <span class=\"token operator\">=</span> strong_type</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    self<span class=\"token punctuation\">.</span>static_type <span class=\"token operator\">=</span> static_type</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr></table></figure><p>除此之外， <code>__repr__</code>  和  <code>__eq__</code>  函数也会自动生成，便于打印和比较。通过以上方式，再也不用每次都自己定义一个构造函数，并且为每个变量都赋值一遍，省却了繁琐的操作。</p>\n<p>执行效果如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> Lang<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Lang<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> strong_type<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> static_type<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> Lang<span class=\"token punctuation\">(</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Lang<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> strong_type<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> static_type<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> Lang<span class=\"token punctuation\">(</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Lang<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> Lang<span class=\"token punctuation\">(</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Lang<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token boolean\">True</span></pre></td></tr></table></figure><p>除此之外， <code>dataclass</code>  可以通过  <code>asdict</code>  或者  <code>astuple</code>  生成类成员的字典或者元组。</p>\n<p>需要注意的是，对于  <code>mutable</code>  类型的变量，如  <code>list</code> 、 <code>map</code>  等，推荐使用  <code>field</code>  来初始化：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> dataclasses <span class=\"token keyword\">import</span> dataclass<span class=\"token punctuation\">,</span> field</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    mylist<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> field<span class=\"token punctuation\">(</span>default_factory<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其他功能的详细介绍，可以参考<a href=\"https://www.cnblogs.com/apocelipes/p/10284346.html\">这篇博客</a>或者<a href=\"https://peps.python.org/pep-0557/\">官方网站</a>的说明。</p>\n<h2 id=\"结合-dataclass-和-yaml\"><a class=\"anchor\" href=\"#结合-dataclass-和-yaml\">#</a> 结合  <code>dataclass</code>  和  <code>YAML</code></h2>\n<p>在介绍以上两部分内容之后，我们可以结合  <code>dataclass</code>  和  <code>YAML</code>  来方便地构建配置类，并从  <code>YAML</code>  文件导入，或者导出到  <code>YAML</code>  文件。</p>\n<p>参考了相关资料后<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3:1\">[3:1]</a></sup><sup class=\"footnote-ref\"><a href=\"#fn5\" id=\"fnref5\">[5]</a></sup>，我编写了下面的参数类模板。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> yaml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> yaml <span class=\"token keyword\">import</span> SafeLoader<span class=\"token punctuation\">,</span> SafeDumper</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> yaml<span class=\"token punctuation\">.</span>nodes <span class=\"token keyword\">import</span> MappingNode</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> dataclasses <span class=\"token keyword\">import</span> dataclass<span class=\"token punctuation\">,</span> asdict<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">,</span> is_dataclass</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Type</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> typing_extensions <span class=\"token keyword\">import</span> Self</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseConfig</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">:</span> SafeLoader<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> MappingNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Self<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"Construct an instance.\"\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>loader<span class=\"token punctuation\">.</span>construct_mapping<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">loader</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> safe_loader<span class=\"token punctuation\">:</span> SafeLoader<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Type<span class=\"token punctuation\">[</span>SafeLoader<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"Add constructors to PyYAML loader.\"\"\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        safe_loader <span class=\"token operator\">=</span> yaml<span class=\"token punctuation\">.</span>SafeLoader</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        safe_loader<span class=\"token punctuation\">.</span>add_constructor<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"!</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cls<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> cls<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> data_fields<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> cls<span class=\"token punctuation\">.</span>__dataclass_fields__<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cls_type <span class=\"token operator\">=</span> data_fields<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> is_dataclass<span class=\"token punctuation\">(</span>cls_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                safe_loader<span class=\"token punctuation\">.</span>add_constructor<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"!</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cls_type<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> cls_type<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                safe_loader <span class=\"token operator\">=</span> cls_type<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">(</span>SafeLoader<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> safe_loader</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">representer</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> dumper<span class=\"token punctuation\">:</span> SafeDumper<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> MappingNode<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"Represent an instance as a YAML mapping node.\"\"\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> dumper<span class=\"token punctuation\">.</span>represent_mapping<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"!</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cls<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">dumper</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> safe_dumper<span class=\"token punctuation\">:</span> SafeDumper<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Type<span class=\"token punctuation\">[</span>SafeDumper<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"Add representers to a YAML seriailizer.\"\"\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\"># safe_dumper = yaml.SafeDumper</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        safe_dumper<span class=\"token punctuation\">.</span>add_representer<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> cls<span class=\"token punctuation\">.</span>representer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> data_fields<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> cls<span class=\"token punctuation\">.</span>__dataclass_fields__<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            cls_type <span class=\"token operator\">=</span> data_fields<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> is_dataclass<span class=\"token punctuation\">(</span>cls_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                safe_dumper<span class=\"token punctuation\">.</span>add_representer<span class=\"token punctuation\">(</span>cls_type<span class=\"token punctuation\">,</span> cls_type<span class=\"token punctuation\">.</span>representer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                safe_dumper <span class=\"token operator\">=</span> cls_type<span class=\"token punctuation\">.</span>dumper<span class=\"token punctuation\">(</span>safe_dumper<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> safe_dumper</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DatasetConfig</span><span class=\"token punctuation\">(</span>BaseConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    data_root_path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"./data/coco\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    train_path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"./data/coco/train\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    train_ann_path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"./data/coco/annotations/instances_train2017.json\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">COCODatasetConfig</span><span class=\"token punctuation\">(</span>BaseConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"COCO\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    num_classes<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    dataset<span class=\"token punctuation\">:</span> DatasetConfig <span class=\"token operator\">=</span> field<span class=\"token punctuation\">(</span>default_factory<span class=\"token operator\">=</span>DatasetConfig<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">COCODataConfig</span><span class=\"token punctuation\">(</span>BaseConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    train_data<span class=\"token punctuation\">:</span> COCODatasetConfig <span class=\"token operator\">=</span> field<span class=\"token punctuation\">(</span>default_factory<span class=\"token operator\">=</span>COCODatasetConfig<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    val_data<span class=\"token punctuation\">:</span> COCODatasetConfig <span class=\"token operator\">=</span> field<span class=\"token punctuation\">(</span>default_factory<span class=\"token operator\">=</span>COCODatasetConfig<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\"># If you want dump without tag, change the tag name of the class</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\"># to 'tag:yaml.org,2002:map', this is the default map type of YAML</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\"># @classmethod</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\"># def representer(cls, dumper: SafeDumper, config) -> MappingNode:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">#     \"\"\"Represent an instance as a YAML mapping node.\"\"\"</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">#     return dumper.represent_mapping(\"tag:yaml.org,2002:map\", config.__dict__)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\"># config = COCODatasetConfig()</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\"># config = yaml.load(open(\"output.yaml\", \"rb\"), Loader=COCODataConfig.loader(SafeLoader))</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    config <span class=\"token operator\">=</span> COCODataConfig<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>asdict<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\"># config = DatasetConfig()</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\"># with open(\"output.yaml\", \"w\") as stream:</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\"># stream.write(yaml.dump(config, Dumper=COCODatasetConfig.dumper()))</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\"># stream.write(yaml.dump(config, Dumper=COCODataConfig.dumper(SafeDumper)))</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token comment\"># yaml.dump(config, sys.stdout, Dumper=COCODatasetConfig.dumper(), sort_keys=False)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    yaml<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">,</span> Dumper<span class=\"token operator\">=</span>COCODataConfig<span class=\"token punctuation\">.</span>dumper<span class=\"token punctuation\">(</span>SafeDumper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sort_keys<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上述模板可以支持多个  <code>dataclass</code>  类别的嵌套，并且会保留每个类别的  <code>tag</code>  标签，便于将来再读取配置的内容。</p>\n<p>如果不想输出某个  <code>dataclass</code>  类的  <code>tag</code> ，则重载其  <code>representer</code>  和  <code>loader</code>  函数，修改其中设定的  <code>tag</code>  名称为  <code>tag:yaml.org,2002:map</code> <sup class=\"footnote-ref\"><a href=\"#fn6\" id=\"fnref6\">[6]</a></sup>。其他类型可以参看官方文档<sup class=\"footnote-ref\"><a href=\"#fn7\" id=\"fnref7\">[7]</a></sup>。</p>\n<p>如果某些变量依赖于其他变量的赋值，可以使用  <code>__post_init__</code>  方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    c<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> field<span class=\"token punctuation\">(</span>init<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__post_init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>b</pre></td></tr></table></figure><p>此外，如果需要额外的参数用于初始化，但是之后的程序中不需要用到它的话，可以指定一个  <code>field</code>  的类型注解为  <code>dataclasses.InitVar</code> ，那么这个  <code>field</code>  将只能在初始化过程中（ <code>__init__</code>  和  <code>__post_init__</code> ）使用，当初始化完成后访问该  <code>field</code>  会返回一个 <code>dataclasses.Field</code>  对象而不是  <code>field</code>  原本的值，也就是该  <code>field</code>  不再是一个可访问的数据对象。比如一个由数据库对象，它<strong>只需要在初始化的过程中被访问</strong>：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    j<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    database<span class=\"token punctuation\">:</span> InitVar<span class=\"token punctuation\">[</span>DatabaseType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__post_init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> database<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>j <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> database <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            self<span class=\"token punctuation\">.</span>j <span class=\"token operator\">=</span> database<span class=\"token punctuation\">.</span>lookup<span class=\"token punctuation\">(</span><span class=\"token string\">'j'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>c <span class=\"token operator\">=</span> C<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> database<span class=\"token operator\">=</span>my_database<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>database</code>  只在初始化过程中用于初始化  <code>i, j</code>  ，后续无法再访问，可以认为是传递了一个额外的参数用于初始化操作。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>通过以上内容，我们得到了一个用于  <code>YAML</code>  格式的通用模板类，用于导入或者导出相关的配置内容，帮助我们更好地管理配置文件中参数的结构，提高工作效率。&lt;span class=&quot;spoiler&quot;&gt; 减少加班 &lt;/span&gt;</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://yaml.org/spec/1.2.2/\">YAML Ain’t Markup Language (YAML™) revision 1.2.2</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://refactoring.guru/smells/data-clumps\">Data Clumps (refactoring.guru)</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>来自博客 <a href=\"https://matthewpburruss.com/post/yaml/\">A Powerful Python Trick: Custom YAML tags &amp; PyYAML | Matthew Burruss (matthewpburruss.com)</a> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a> <a href=\"#fnref3:1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p>来自博客 <a href=\"https://www.cnblogs.com/apocelipes/p/10284346.html\">Python3.7 dataclass 使用指南 - apocelipes - 博客园 (cnblogs.com)</a> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn5\" class=\"footnote-item\"><p><a href=\"https://qiita.com/kzmssk/items/483f25f47e0ed10aa948\">dataclass を使った YAML 形式で保存／ロード可能な設定クラス - Qiita</a> <a href=\"#fnref5\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn6\" class=\"footnote-item\"><p><a href=\"https://caosiyang.github.io/posts/2020/08/30/pyyaml/\">PyYAML 笔记 - 一个单板滑雪爱好者的编程笔记 (caosiyang.github.io)</a> <a href=\"#fnref6\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn7\" class=\"footnote-item\"><p><a href=\"https://yaml.org/type/index.html\">Language-Independent Types for YAML™ Version 1.1</a> <a href=\"#fnref7\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Computer-Science",
                "Algorithm",
                "Python",
                "YAML",
                "dataclass"
            ]
        }
    ]
}