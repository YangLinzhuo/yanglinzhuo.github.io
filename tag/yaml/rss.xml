<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>林•初夏 • Posts by &#34;yaml&#34; tag</title>
        <link>https://linn-ylz.com</link>
        <description>Linn 的个人博客</description>
        <language>zh-CN</language>
        <pubDate>Thu, 10 Nov 2022 23:17:33 +0800</pubDate>
        <lastBuildDate>Thu, 10 Nov 2022 23:17:33 +0800</lastBuildDate>
        <category>AncientBook</category>
        <category>Book</category>
        <category>Essay</category>
        <category>Game</category>
        <category>Music</category>
        <category>Movie</category>
        <category>Hexo</category>
        <category>Valine</category>
        <category>Waline</category>
        <category>TiddlyWiki</category>
        <category>Fishing</category>
        <category>Computer-Science</category>
        <category>Algorithm</category>
        <category>Cpp</category>
        <category>Binary-Search</category>
        <category>CUDA</category>
        <category>Coding-Interviews</category>
        <category>Configs</category>
        <category>WSL2</category>
        <category>CLion</category>
        <category>PyTorch</category>
        <category>Oh-My-Zsh</category>
        <category>Powershell</category>
        <category>WSL</category>
        <category>Emacs</category>
        <category>Programming-Pearls</category>
        <category>Python</category>
        <category>YAML</category>
        <category>dataclass</category>
        <category>Type-Annotation</category>
        <category>CUTLASS</category>
        <category>CUTE</category>
        <category>History</category>
        <category>ChineseHistory</category>
        <category>Table</category>
        <item>
            <guid isPermalink="true">https://linn-ylz.com/Computer-Science/Python/dataclass-and-YAML-transform/</guid>
            <title>dataclass 与 YAML 的相互转换</title>
            <link>https://linn-ylz.com/Computer-Science/Python/dataclass-and-YAML-transform/</link>
            <category>Computer-Science</category>
            <category>Algorithm</category>
            <category>Python</category>
            <category>YAML</category>
            <category>dataclass</category>
            <pubDate>Thu, 10 Nov 2022 23:17:33 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;在许多工程项目中，经常需要配置一些选项供用户或者员工自己使用。以人工智能领域为例， &lt;code&gt;Paddlepaddle&lt;/code&gt; 、 &lt;code&gt;mmdetection&lt;/code&gt;  等深度学习框架都需要根据需求在配置文件中配置数据、网络等相关参数。 &lt;code&gt;Paddlepaddle&lt;/code&gt;  使用  &lt;code&gt;YAML&lt;/code&gt;  格式存储配置信息， &lt;code&gt;mmdetection&lt;/code&gt;  则直接使用  &lt;code&gt;Python&lt;/code&gt;  文件来设定配置。此外， &lt;code&gt;JSON&lt;/code&gt;  格式也是常用的数据存储格式。无论何种格式，当配置信息不断增加膨胀之后，如何组织配置的结构就成为了一件迫切需要考虑的事情。&lt;/p&gt;
&lt;p&gt;这三种配置格式孰优孰劣，我无法评价。由于我目前接手的工作中使用的是  &lt;code&gt;YAML&lt;/code&gt;  格式的配置文件，因此本文主要介绍最近一段时间经过调研搜索后，我决定采用的一种配置文件组织方案。&lt;/p&gt;
&lt;p&gt;在实际阐述方案之前，有必要阐述一下  &lt;code&gt;YAML&lt;/code&gt;  和  &lt;code&gt;dataclass&lt;/code&gt;  这两个概念。如果读者对这二者比较熟悉，可以直接跳过相关部分。&lt;/p&gt;
&lt;h2 id=&#34;yaml-中的-tag&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yaml-中的-tag&#34;&gt;#&lt;/a&gt;  &lt;code&gt;YAML&lt;/code&gt;  中的  &lt;code&gt;tag&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;YAML&lt;/code&gt;  诞生于 2004 年，根据官网说法&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;，其有 7 条设计目标，其中，易读、不同编程语言间良好的兼容性、可扩展等特性使得其被广泛用于存储格式化的信息。&lt;/p&gt;
&lt;p&gt;关于其具体的语法，可以参考&lt;a href=&#34;https://yaml.org/spec/1.2.2/&#34;&gt;官方网站&lt;/a&gt;或者其他&lt;a href=&#34;https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html&#34;&gt;教程&lt;/a&gt;，这里不做过多介绍，本文主要介绍其  &lt;code&gt;tag&lt;/code&gt;  标签功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tag&lt;/code&gt;  可以标注  &lt;code&gt;YAML&lt;/code&gt;  中数据的类型或者其归属的对象类别，其可以是  &lt;code&gt;str&lt;/code&gt; 、 &lt;code&gt;int&lt;/code&gt; 、 &lt;code&gt;float&lt;/code&gt;  等基本类型，也可以是用户自己定义的任何有意义的类别名称。这些标签可以帮助我们在阅读或者解析的时候，更方便地判断数据的归属。&lt;/p&gt;
&lt;p&gt;我们不妨来看一个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: &#39;linn&#39;
age: 18
gender: &#39;male&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上述  &lt;code&gt;YAML&lt;/code&gt;  文件中，我们定义了三个属性，可以很清晰地看到，这三个属性描述的都是个人信息，它们在许多场景下通常会结伴出现。对于这种数据，有一个专门的称呼叫做数据泥团（Data Clumps）&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn2&#34; id=&#34;fnref2&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt;。有时候，我们会发现某些函数包含大量的参数，而这些参数往往一起出现，很显然，在通常的编程语言中，用结构体或者类来组织这种数据，比直接使用原生类型是更好的选择。而在  &lt;code&gt;YAML&lt;/code&gt;  中，我们也可以用  &lt;code&gt;tag&lt;/code&gt;  来表征这一特点：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;!Person
name: &#39;linn&#39;
age: 18
gender: &#39;male&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在  &lt;code&gt;YAML&lt;/code&gt;  中，使用  &lt;code&gt;!&lt;/code&gt;  来表示这一标识是一个  &lt;code&gt;tag&lt;/code&gt;  的名称。相比于仅仅列出属性，增加一个  &lt;code&gt;tag&lt;/code&gt;  可以使得数据的语义更加明晰。当我们的配置文件中的数据项膨胀到数十个的时候，增加一个  &lt;code&gt;tag&lt;/code&gt;  能够帮助你更好的理解配置选项的意义。&lt;/p&gt;
&lt;h2 id=&#34;解析-yaml-的-tag&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解析-yaml-的-tag&#34;&gt;#&lt;/a&gt; 解析  &lt;code&gt;YAML&lt;/code&gt;  的  &lt;code&gt;tag&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;当然，光在  &lt;code&gt;YAML&lt;/code&gt;  中定义一个  &lt;code&gt;tag&lt;/code&gt; ，并没有全部发挥出  &lt;code&gt;tag&lt;/code&gt;  的作用。 &lt;code&gt;tag&lt;/code&gt;  黑能配合编程语言，帮助解析  &lt;code&gt;YAML&lt;/code&gt;  文件中的内容。&lt;/p&gt;
&lt;p&gt;想象一下，当没有  &lt;code&gt;tag&lt;/code&gt;  的时候，我们通常是如何解析  &lt;code&gt;YAML&lt;/code&gt;  的？一般情况的代码大致如下（为了方便，直接在文件中用字符串表示  &lt;code&gt;YAML&lt;/code&gt;  内容）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yaml
class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

yaml_str = &amp;quot;&amp;quot;&amp;quot;
name: &#39;linn&#39;
age: 18
gender: &#39;male&#39;
&amp;quot;&amp;quot;&amp;quot;
content = yaml.load(yaml_str, Loader=yaml.SafeLoader)

&amp;quot;&amp;quot;&amp;quot;
content
&amp;#123;&#39;name&#39;: &#39;linn&#39;, &#39;age&#39;: 18, &#39;gender&#39;: &#39;male&#39;&amp;#125;
&amp;quot;&amp;quot;&amp;quot;

person = Person(**content)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上代码可以分为两个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取  &lt;code&gt;YAML&lt;/code&gt;  文件的内容，赋值给某个对象。一般而言，读入的内容会存储在字典或者列表中；&lt;/li&gt;
&lt;li&gt;创建某个类的对象，利用读取的  &lt;code&gt;YAML&lt;/code&gt;  内容为其初始化。&lt;br /&gt;
对于结构简单的  &lt;code&gt;YAML&lt;/code&gt;  文件，上述方法还可接受，但是如果  &lt;code&gt;YAML&lt;/code&gt;  文件变得复杂，那么按照上述方法来解析的代码便会变得繁琐。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以看下面这个例子&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn3&#34; id=&#34;fnref3&#34;&gt;[3]&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name: MyBusiness
locations:
  - &amp;quot;Hawaii&amp;quot;
  - &amp;quot;India&amp;quot;
  - &amp;quot;Japan&amp;quot;
employees:
  - !Employee
    name: Matthew Burruss
    id: 1
  - !Employee
    name: John Doe
    id: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显然，如果  &lt;code&gt;employees&lt;/code&gt;  中的内容较多，我们甚至还需要写一个循环来初始化这些对象。而通过结合  &lt;code&gt;YAML&lt;/code&gt;  的  &lt;code&gt;tag&lt;/code&gt; ，我们可以自定义  &lt;code&gt;constructor&lt;/code&gt;  来解析其内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yaml

class Employee:
  &amp;quot;&amp;quot;&amp;quot;Employee class.&amp;quot;&amp;quot;&amp;quot;
  def __init__(self, name, id):
    self._name, self._id = name, id

def employee_constructor(loader: yaml.SafeLoader, node: yaml.nodes.MappingNode) -&amp;gt; Employee:
  &amp;quot;&amp;quot;&amp;quot;Construct an employee.&amp;quot;&amp;quot;&amp;quot;
  return Employee(**loader.construct_mapping(node))

def get_loader():
  &amp;quot;&amp;quot;&amp;quot;Add constructors to PyYAML loader.&amp;quot;&amp;quot;&amp;quot;
  loader = yaml.SafeLoader
  loader.add_constructor(&amp;quot;!Employee&amp;quot;, employee_constructor)
  return loader

yaml.load(open(&amp;quot;config.yml&amp;quot;, &amp;quot;rb&amp;quot;), Loader=get_loader())
&amp;quot;&amp;quot;&amp;quot;
&amp;#123;
  &#39;name&#39;: &#39;MyBusiness&#39;,
  &#39;locations&#39;: [&#39;Hawaii&#39;, &#39;India&#39;, &#39;Japan&#39;],
  &#39;employees&#39;: [
    &amp;lt;__main__.Employee object at 0x7f0ea2694d10&amp;gt;,
    &amp;lt;__main__.Employee object at 0x7f0ea2694d90&amp;gt;
  ]
&amp;#125;
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样一来，我们可以直接生成对应的类的对象，省去了自己创建的过程。&lt;/p&gt;
&lt;h2 id=&#34;dataclass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dataclass&#34;&gt;#&lt;/a&gt;  &lt;code&gt;dataclass&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;你是否经常面临下面的情形：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:
    def __init__(self, name, age, gender, ...):
        self.name = name
        self.age = age
        self.gender = gender
        ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当我们在  &lt;code&gt;__init__&lt;/code&gt;  函数的参数列表中敲击了一系列参数之后，又需要在  &lt;code&gt;__init__&lt;/code&gt;  函数体中，将它们一一赋值给类成员变量。一旦这些变量数量增多，这项工作就成了一项非常繁琐无趣的事情。&lt;/p&gt;
&lt;p&gt;很多时候，我们定义类只是想将一些相关的数据组织起来，但却不得不动手编写许多重复的代码。于是乎，这里就轮到  &lt;code&gt;dataclass&lt;/code&gt;  出场了。类比而言， &lt;code&gt;dataclass&lt;/code&gt;  可以看成是  &lt;code&gt;C/C++&lt;/code&gt;  中的结构体，能够方便我们将一系列的数据组合在一起，同时给每个成员指定默认值，不用再手动为成员变量赋值。&lt;/p&gt;
&lt;p&gt;可以看下面这个例子&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn4&#34; id=&#34;fnref4&#34;&gt;[4]&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dataclasses import dataclass
@dataclass
class Lang: 
	&amp;quot;&amp;quot;&amp;quot;a dataclass that describes a programming language&amp;quot;&amp;quot;&amp;quot;
	name: str = &#39;python&#39;
	strong_type: bool = True
	static_type: bool = False
	age: int = 28 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里定义了一个编程语言的类  &lt;code&gt;Lang&lt;/code&gt; ，我们从  &lt;code&gt;dataclasses&lt;/code&gt;  模块中引入了装饰器  &lt;code&gt;dataclass&lt;/code&gt; 。之后，我们在类中定义了一系列成员变量。&lt;/p&gt;
&lt;p&gt;使用上述方式定义之后，该类会自动生成一个初始化构造函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def __init__(self, name: str=&#39;python&#39;,
            strong_type: bool=True,
            static_type: bool=False,
            age: int=28):
    self.name = name
    self.strong_type = strong_type
    self.static_type = static_type
    self.age = age
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除此之外， &lt;code&gt;__repr__&lt;/code&gt;  和  &lt;code&gt;__eq__&lt;/code&gt;  函数也会自动生成，便于打印和比较。通过以上方式，再也不用每次都自己定义一个构造函数，并且为每个变量都赋值一遍，省却了繁琐的操作。&lt;/p&gt;
&lt;p&gt;执行效果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Lang()
Lang(name=&#39;python&#39;, strong_type=True, static_type=False, age=28)
&amp;gt;&amp;gt;&amp;gt; Lang(&#39;js&#39;, False, False, 23)
Lang(name=&#39;js&#39;, strong_type=False, static_type=False, age=23)
&amp;gt;&amp;gt;&amp;gt; Lang(&#39;js&#39;, False, False, 23) == Lang()
False
&amp;gt;&amp;gt;&amp;gt; Lang(&#39;python&#39;, True, False, 28) == Lang()
True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除此之外， &lt;code&gt;dataclass&lt;/code&gt;  可以通过  &lt;code&gt;asdict&lt;/code&gt;  或者  &lt;code&gt;astuple&lt;/code&gt;  生成类成员的字典或者元组。&lt;/p&gt;
&lt;p&gt;需要注意的是，对于  &lt;code&gt;mutable&lt;/code&gt;  类型的变量，如  &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;map&lt;/code&gt;  等，推荐使用  &lt;code&gt;field&lt;/code&gt;  来初始化：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dataclasses import dataclass, field
@dataclass
class C:
    mylist: List[int] = field(default_factory=list)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其他功能的详细介绍，可以参考&lt;a href=&#34;https://www.cnblogs.com/apocelipes/p/10284346.html&#34;&gt;这篇博客&lt;/a&gt;或者&lt;a href=&#34;https://peps.python.org/pep-0557/&#34;&gt;官方网站&lt;/a&gt;的说明。&lt;/p&gt;
&lt;h2 id=&#34;结合-dataclass-和-yaml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结合-dataclass-和-yaml&#34;&gt;#&lt;/a&gt; 结合  &lt;code&gt;dataclass&lt;/code&gt;  和  &lt;code&gt;YAML&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;在介绍以上两部分内容之后，我们可以结合  &lt;code&gt;dataclass&lt;/code&gt;  和  &lt;code&gt;YAML&lt;/code&gt;  来方便地构建配置类，并从  &lt;code&gt;YAML&lt;/code&gt;  文件导入，或者导出到  &lt;code&gt;YAML&lt;/code&gt;  文件。&lt;/p&gt;
&lt;p&gt;参考了相关资料后&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn3&#34; id=&#34;fnref3:1&#34;&gt;[3:1]&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn5&#34; id=&#34;fnref5&#34;&gt;[5]&lt;/a&gt;&lt;/sup&gt;，我编写了下面的参数类模板。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
import yaml
from yaml import SafeLoader, SafeDumper
from yaml.nodes import MappingNode
from dataclasses import dataclass, asdict, field, is_dataclass
from typing import Type
from typing_extensions import Self


@dataclass
class BaseConfig(object):
    @classmethod
    def constructor(cls, loader: SafeLoader, node: MappingNode) -&amp;gt; Self:
        &amp;quot;&amp;quot;&amp;quot;Construct an instance.&amp;quot;&amp;quot;&amp;quot;
        return cls(**loader.construct_mapping(node))

    @classmethod
    def loader(cls, safe_loader: SafeLoader) -&amp;gt; Type[SafeLoader]:
        &amp;quot;&amp;quot;&amp;quot;Add constructors to PyYAML loader.&amp;quot;&amp;quot;&amp;quot;
        safe_loader = yaml.SafeLoader
        safe_loader.add_constructor(f&amp;quot;!&amp;#123;cls.__name__&amp;#125;&amp;quot;, cls.constructor)
        for (name, data_fields) in cls.__dataclass_fields__.items():
            cls_type = data_fields.type
            if is_dataclass(cls_type):
                safe_loader.add_constructor(f&amp;quot;!&amp;#123;cls_type.__name__&amp;#125;&amp;quot;, cls_type.constructor)
                safe_loader = cls_type.loader(SafeLoader)
        return safe_loader

    @classmethod
    def representer(cls, dumper: SafeDumper, config) -&amp;gt; MappingNode:
        &amp;quot;&amp;quot;&amp;quot;Represent an instance as a YAML mapping node.&amp;quot;&amp;quot;&amp;quot;
        return dumper.represent_mapping(f&amp;quot;!&amp;#123;cls.__name__&amp;#125;&amp;quot;, config.__dict__)

    @classmethod
    def dumper(cls, safe_dumper: SafeDumper) -&amp;gt; Type[SafeDumper]:
        &amp;quot;&amp;quot;&amp;quot;Add representers to a YAML seriailizer.&amp;quot;&amp;quot;&amp;quot;
        # safe_dumper = yaml.SafeDumper
        safe_dumper.add_representer(cls, cls.representer)
        for (name, data_fields) in cls.__dataclass_fields__.items():
            cls_type = data_fields.type
            if is_dataclass(cls_type):
                safe_dumper.add_representer(cls_type, cls_type.representer)
                safe_dumper = cls_type.dumper(safe_dumper)
        return safe_dumper


@dataclass
class DatasetConfig(BaseConfig):
    data_root_path: str = &amp;quot;./data/coco&amp;quot;
    train_path: str = &amp;quot;./data/coco/train&amp;quot;
    train_ann_path: str = &amp;quot;./data/coco/annotations/instances_train2017.json&amp;quot;


@dataclass
class COCODatasetConfig(BaseConfig):
    name: str = &amp;quot;COCO&amp;quot;
    num_classes: int = 80
    dataset: DatasetConfig = field(default_factory=DatasetConfig)


@dataclass
class COCODataConfig(BaseConfig):
    train_data: COCODatasetConfig = field(default_factory=COCODatasetConfig)
    val_data: COCODatasetConfig = field(default_factory=COCODatasetConfig)

    # If you want dump without tag, change the tag name of the class
    # to &#39;tag:yaml.org,2002:map&#39;, this is the default map type of YAML
    # @classmethod
    # def representer(cls, dumper: SafeDumper, config) -&amp;gt; MappingNode:
    #     &amp;quot;&amp;quot;&amp;quot;Represent an instance as a YAML mapping node.&amp;quot;&amp;quot;&amp;quot;
    #     return dumper.represent_mapping(&amp;quot;tag:yaml.org,2002:map&amp;quot;, config.__dict__)

if __name__ == &amp;quot;__main__&amp;quot;:
    # config = COCODatasetConfig()
    # config = yaml.load(open(&amp;quot;output.yaml&amp;quot;, &amp;quot;rb&amp;quot;), Loader=COCODataConfig.loader(SafeLoader))
    config = COCODataConfig()
    print(config)
    print(asdict(config))
    # config = DatasetConfig()
    # with open(&amp;quot;output.yaml&amp;quot;, &amp;quot;w&amp;quot;) as stream:
        # stream.write(yaml.dump(config, Dumper=COCODatasetConfig.dumper()))
        # stream.write(yaml.dump(config, Dumper=COCODataConfig.dumper(SafeDumper)))
    # yaml.dump(config, sys.stdout, Dumper=COCODatasetConfig.dumper(), sort_keys=False)
    yaml.dump(config, sys.stdout, Dumper=COCODataConfig.dumper(SafeDumper), sort_keys=False)


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述模板可以支持多个  &lt;code&gt;dataclass&lt;/code&gt;  类别的嵌套，并且会保留每个类别的  &lt;code&gt;tag&lt;/code&gt;  标签，便于将来再读取配置的内容。&lt;/p&gt;
&lt;p&gt;如果不想输出某个  &lt;code&gt;dataclass&lt;/code&gt;  类的  &lt;code&gt;tag&lt;/code&gt; ，则重载其  &lt;code&gt;representer&lt;/code&gt;  和  &lt;code&gt;loader&lt;/code&gt;  函数，修改其中设定的  &lt;code&gt;tag&lt;/code&gt;  名称为  &lt;code&gt;tag:yaml.org,2002:map&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn6&#34; id=&#34;fnref6&#34;&gt;[6]&lt;/a&gt;&lt;/sup&gt;。其他类型可以参看官方文档&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn7&#34; id=&#34;fnref7&#34;&gt;[7]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;如果某些变量依赖于其他变量的赋值，可以使用  &lt;code&gt;__post_init__&lt;/code&gt;  方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@dataclass
class C:
    a: int
    b: int
    c: int = field(init=False)
 
    def __post_init__(self):
        self.c = self.a + self.b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此外，如果需要额外的参数用于初始化，但是之后的程序中不需要用到它的话，可以指定一个  &lt;code&gt;field&lt;/code&gt;  的类型注解为  &lt;code&gt;dataclasses.InitVar&lt;/code&gt; ，那么这个  &lt;code&gt;field&lt;/code&gt;  将只能在初始化过程中（ &lt;code&gt;__init__&lt;/code&gt;  和  &lt;code&gt;__post_init__&lt;/code&gt; ）使用，当初始化完成后访问该  &lt;code&gt;field&lt;/code&gt;  会返回一个 &lt;code&gt;dataclasses.Field&lt;/code&gt;  对象而不是  &lt;code&gt;field&lt;/code&gt;  原本的值，也就是该  &lt;code&gt;field&lt;/code&gt;  不再是一个可访问的数据对象。比如一个由数据库对象，它&lt;strong&gt;只需要在初始化的过程中被访问&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@dataclass
class C:
    i: int
    j: int = None
    database: InitVar[DatabaseType] = None
 
    def __post_init__(self, database):
        if self.j is None and database is not None:
            self.j = database.lookup(&#39;j&#39;)
 
c = C(10, database=my_database)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;database&lt;/code&gt;  只在初始化过程中用于初始化  &lt;code&gt;i, j&lt;/code&gt;  ，后续无法再访问，可以认为是传递了一个额外的参数用于初始化操作。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;通过以上内容，我们得到了一个用于  &lt;code&gt;YAML&lt;/code&gt;  格式的通用模板类，用于导入或者导出相关的配置内容，帮助我们更好地管理配置文件中参数的结构，提高工作效率。&amp;lt;span class=&amp;quot;spoiler&amp;quot;&amp;gt; 减少加班 &amp;lt;/span&amp;gt;&lt;/p&gt;
&lt;hr class=&#34;footnotes-sep&#34; /&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://yaml.org/spec/1.2.2/&#34;&gt;YAML Ain’t Markup Language (YAML™) revision 1.2.2&lt;/a&gt; &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn2&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://refactoring.guru/smells/data-clumps&#34;&gt;Data Clumps (refactoring.guru)&lt;/a&gt; &lt;a href=&#34;#fnref2&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn3&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;来自博客 &lt;a href=&#34;https://matthewpburruss.com/post/yaml/&#34;&gt;A Powerful Python Trick: Custom YAML tags &amp;amp; PyYAML | Matthew Burruss (matthewpburruss.com)&lt;/a&gt; &lt;a href=&#34;#fnref3&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt; &lt;a href=&#34;#fnref3:1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn4&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;来自博客 &lt;a href=&#34;https://www.cnblogs.com/apocelipes/p/10284346.html&#34;&gt;Python3.7 dataclass 使用指南 - apocelipes - 博客园 (cnblogs.com)&lt;/a&gt; &lt;a href=&#34;#fnref4&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn5&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/kzmssk/items/483f25f47e0ed10aa948&#34;&gt;dataclass を使った YAML 形式で保存／ロード可能な設定クラス - Qiita&lt;/a&gt; &lt;a href=&#34;#fnref5&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn6&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://caosiyang.github.io/posts/2020/08/30/pyyaml/&#34;&gt;PyYAML 笔记 - 一个单板滑雪爱好者的编程笔记 (caosiyang.github.io)&lt;/a&gt; &lt;a href=&#34;#fnref6&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn7&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://yaml.org/type/index.html&#34;&gt;Language-Independent Types for YAML™ Version 1.1&lt;/a&gt; &lt;a href=&#34;#fnref7&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
 ]]></description>
        </item>
    </channel>
</rss>
