{
    "version": "https://jsonfeed.org/version/1",
    "title": "林•初夏 • All posts by \"wsl2\" tag",
    "description": "Linn 的个人博客",
    "home_page_url": "https://linn-ylz.com",
    "items": [
        {
            "id": "https://linn-ylz.com/Computer-Science/Configs/wsl2-installation/",
            "url": "https://linn-ylz.com/Computer-Science/Configs/wsl2-installation/",
            "title": "安装 WSL2",
            "date_published": "2022-08-09T13:26:54.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>之前在自己的笔记本上安装过  <code>Windows</code>  的  <code>Linux</code>  子系统。最近新配置了一台台式机，又需要重新配置，在过程中也稍稍遇到了一些问题，在这里记录下来以备后续的使用。</p>\n<h1 id=\"安装-wsl2\"><a class=\"anchor\" href=\"#安装-wsl2\">#</a> 安装  <code>WSL2</code></h1>\n<p>这里的安装过程全程参照了这个链接的内容👉：<a href=\"https://dowww.spencerwoo.com/\">戳此链接</a>。</p>\n<p>这里以其教程作为主要参考，并补充安装过程中遇到的问题的解决方式。</p>\n<h2 id=\"开启-hyper-v-和-linux-子系统服务\"><a class=\"anchor\" href=\"#开启-hyper-v-和-linux-子系统服务\">#</a> 开启  <code>Hyper-V</code>  和  <code>Linux</code>  子系统服务</h2>\n<p>要安装子系统，首先需要开启相应的  <code>Windows</code>  系统的功能：</p>\n<ul>\n<li>Hyper-V 服务</li>\n<li>Linux 子系统服务</li>\n</ul>\n<p>在管理员权限的  <code>Powershell</code>  中执行以下两条命令进行开启：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</pre></td></tr></table></figure><p>如果以上指令无法成功，也可以在开始菜单搜索  <code>启用或关闭 Windows 功能</code> ，并在其中勾选  <code>Hyper-V</code>  和  <code>适用于 Windows 的 Linux 子系统</code>  服务。之后根据提示重启电脑。</p>\n<h2 id=\"移动-wsl2-位置\"><a class=\"anchor\" href=\"#移动-wsl2-位置\">#</a> 移动  <code>WSL2</code>  位置</h2>\n<p>电脑重启后，运行安装好的子系统，我安装的是  <code>Ubuntu</code>  子系统。</p>\n<p>子系统默认安装在  <code>C</code>  盘，这使得本就不宽裕的硬盘空间雪上加霜，因此这里对子系统的安装位置进行修改。这里参考的是一个问答中提供的答案<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>。</p>\n<p>第一步，使用指令导出子系统文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Export Ubuntu</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wsl <span class=\"token parameter variable\">--export</span> Ubuntu D:<span class=\"token punctuation\">\\</span>backup<span class=\"token punctuation\">\\</span>ubuntu.tar</pre></td></tr></table></figure><p>其中， <code>Ubuntu</code>  是子系统的名称，可以通过  <code>wsl --list</code>  指令进行查看。后续的路径则是子系统文件的导出位置，根据需要进行修改。</p>\n<p>第二步，注销原来的子系统：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Unregister the same distribution to remove it from the C: drive:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wsl <span class=\"token parameter variable\">--unregister</span> Ubuntu</pre></td></tr></table></figure><p>这里仍然需要注意不要输错了子系统的名称。</p>\n<p>第三步，导入第一步中导出的子系统文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Import Ubuntu</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wsl <span class=\"token parameter variable\">--import</span> Ubuntu D:<span class=\"token punctuation\">\\</span>wsl<span class=\"token punctuation\">\\</span> D:<span class=\"token punctuation\">\\</span>backup<span class=\"token punctuation\">\\</span>ubuntu.tar</pre></td></tr></table></figure><p>在导入之后，子系统默认是使用的  <code>root</code>  用户登录，如果需要修改，可以进入  <code>cd %userprofile%\\AppData\\Local\\Microsoft\\WindowsApps</code>  路径，运行命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ubuntu config --default-user <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span></pre></td></tr></table></figure><p><code>%userprofile%</code>  表示的是用户的文件路径，一般是  <code>C:Users\\&lt;windows-log-name&gt;</code> 。如果找不到  <code>AppData</code>  文件夹，看看是否启用了隐藏文件可见。</p>\n<p>然后指令中的  <code>&lt;username&gt;</code>  是指在第一次运行子系统时输入的用户名。执行完成之后，子系统默认使用普通用户进行登录。</p>\n<h1 id=\"安装-nodejs-服务\"><a class=\"anchor\" href=\"#安装-nodejs-服务\">#</a> 安装  <code>Node.js</code>  服务</h1>\n<p>之后本想尝试在子系统下使用  <code>Node.js</code>  来运行博客，但是后来发现子系统的文件  <code>I/O</code>  速度相比原生系统还是太慢，这里还是选择在  <code>Windows</code>  下使用  <code>Node.js</code>  来运行博客的的后台服务。下文内容暂且保留以备不时之需。</p>\n<h2 id=\"安装-n-管理-nodejs-版本\"><a class=\"anchor\" href=\"#安装-n-管理-nodejs-版本\">#</a> 安装  <code>n</code>  管理  <code>Node.js</code>  版本</h2>\n<p>在文章开头提到的子系统安装链接中，提到了使用  <code>n</code>  来管理  <code>Node.js</code>  的版本。由于直接使用官网<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>的命令安装无法成功获取脚本，因此仍然选择通过浏览器访问脚本文件，并在本地文件夹创建相应的脚本，在其中粘贴从浏览器复制的脚本内容。之后运行以下指令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">bash</span> n lts</pre></td></tr></table></figure><p>以上指令可能需要使用  <code>sudo</code>  权限。<br />\n运行之后使用  <code>node --version</code>  和  <code>npm --version</code>  确认是否安装成功。</p>\n<p>安装完成后， <code>node</code>  命令运行正常，但是  <code>npm</code>  命令遇到了以下错误：</p>\n<div class=\"note warning\">\n<p>/usr/bin/env: ‘bash\\r’: No such file or directory</p>\n</div>\n<p>这里参考了<a href=\"https://peaku.co/questions/3239-despues-de-instalar-npm-en-wsl-ubuntu-2004,-aparece-el-mensaje-%26quot;-usr-bin-env:-%26%2339;bash%5Cr%26%2339;:-no-such-file-or-directory%26quot;\">此链接</a>解决。按照其中被采纳的答案，创建  <code>/etc/wsl.conf</code>  文件，并在其中添加以下内容：</p>\n<pre><code class=\"language-test\">[interop]\nappendWindowsPath = false\n</code></pre>\n<p>然后在  <code>Powershell</code>  中使用  <code>wsl --shutdown</code>  关闭子系统，之后重新打开，运行  <code>bash n lts</code>  安装命令。之后  <code>npm --version</code>  命令能够正常显示。</p>\n<h2 id=\"安装-yarn\"><a class=\"anchor\" href=\"#安装-yarn\">#</a> 安装 yarn</h2>\n<p>接下来，使用  <code>npm</code>  安装  <code>yarn</code>  进行包管理。相比于原生的  <code>npm</code> ，该工具更加现代。使用如下命令安装  <code>yarn</code> ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> <span class=\"token function\">yarn</span></pre></td></tr></table></figure><p>运行  <code>yarn --version</code> ，成功输出版本信息则安装成功。</p>\n<h3 id=\"结合-yarn-安装-hexo\"><a class=\"anchor\" href=\"#结合-yarn-安装-hexo\">#</a> 结合 yarn 安装 Hexo</h3>\n<p>之后，参考一篇博客的内容<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>，使用  <code>yarn</code>  安装  <code>Hexo</code>  服务。</p>\n<p>使用如下指令安装  <code>hexo</code> ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-cli <span class=\"token parameter variable\">-g</span></pre></td></tr></table></figure><p>以上指令执行后，运行  <code>hexo -v</code>  如果返回版本等信息，则说明安装成功。</p>\n<p>在这里，我碰到了无法运行  <code>hexo</code>  的问题，尝试过参考  <code>StackOverflow</code>  中的答案<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup>使用  <code>yarn global add hexo-cli</code>  安装，仍然无法解决该问题。</p>\n<p>后来发现，需要在环境变量添加  <code>yarn</code>  的相关路径，具体参考<a href=\"https://classic.yarnpkg.com/en/docs/cli/global\">此链接</a>，使用如下指令添加：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">yarn</span> global bin<span class=\"token variable\">)</span></span>:<span class=\"token environment constant\">$PATH</span>\"</span></pre></td></tr></table></figure><p>之后可以成功运行  <code>hexo</code>  命令。</p>\n<h2 id=\"卸载\"><a class=\"anchor\" href=\"#卸载\">#</a> 卸载</h2>\n<p>由于子系统的文件  <code>I/O</code>  过于缓慢，因此最后还是放弃在子系统中运行  <code>Hexo</code>  相关的服务。对于安装的上述软件，使用以下指令删除：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 删除 n 包管理器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">bash</span> n uninstall</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查找 yarn 和 node_modules 等残留文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 以下例子表示查找包含 yarn 名称的文件，过滤 /mnt/ 开头的路径，这部分是 Windows 系统中的文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">locate</span> <span class=\"token string\">'*yarn*'</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token string\">'/mnt/'</span></pre></td></tr></table></figure><p>找到路径后，使用  <code>rm</code>  删除相关的文件即可。</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://superuser.com/questions/1550622/move-wsl2-file-system-to-another-drive\">https://superuser.com/questions/1550622/move-wsl2-file-system-to-another-drive</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://github.com/tj/n\"> <code>n</code>  的官方  <code>GitHub</code>  仓库</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><a href=\"https://www.taojishu8.com/2021/01/28/%E3%80%90Hexo%E3%80%91%E2%91%A1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/\">【Hexo】②如何使用 Hexo 和 GitHub 搭建个人博客</a> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p><a href=\"https://stackoverflow.com/questions/48484265/failed-to-install-hexo-cli-on-mac\">Failed to install hexo-cli on mac</a> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Computer-Science",
                "Configs",
                "WSL2"
            ]
        },
        {
            "id": "https://linn-ylz.com/Computer-Science/Configs/clion-wsl2-cuda-configs/",
            "url": "https://linn-ylz.com/Computer-Science/Configs/clion-wsl2-cuda-configs/",
            "title": "通过 CLion 在 WSL2 的 CUDA 环境下使用 libtorch",
            "date_published": "2021-10-08T15:32:30.000Z",
            "content_html": "<h1 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 说明</h1>\n<p>本文记录使用  <code>CLion</code>  的  <code>IDE</code>  环境，使用  <code>WSL2</code>  环境下的  <code>CUDA</code>  来调用  <code>PyTorch</code>  的  <code>libtorch</code>  库内容。</p>\n<p><code>libtorch</code>  是  <code>PyTorch</code>  框架提供的  <code>C++</code>  接口，因为最近的课题对性能有比较高的要求，并且有自定义算子的需求，所以需要用到相关的代码。</p>\n<p><code>WSL2</code>  下的  <code>CUDA</code>  环境配置可以参考 <a href=\"/Computer-Science/Configs/wsl2-cuda-configs/\" title=\"WSL2 下的 CUDA 配置\">这篇文章</a>。</p>\n<h1 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h1>\n<h2 id=\"下载-libtorch\"><a class=\"anchor\" href=\"#下载-libtorch\">#</a> 下载  <code>libtorch</code></h2>\n<p>从  <code>PyTorch</code>  的<a href=\"https://pytorch.org/\">官方网站</a>下载自己所需版本的  <code>libtorch</code>  。注意和自己的  <code>CUDA</code>  版本也要对应。</p>\n<h2 id=\"clion-配置\"><a class=\"anchor\" href=\"#clion-配置\">#</a>  <code>CLion</code>  配置</h2>\n<p>打开  <code>CLion</code>  新建一个  <code>CUDA executable</code>  工程。然后修改  <code>CMakeLists.txt</code>  和  <code>CMake</code>  的相关配置。</p>\n<h3 id=\"wsl2-环境配置\"><a class=\"anchor\" href=\"#wsl2-环境配置\">#</a>  <code>WSL2</code>  环境配置</h3>\n<p>参考这篇<a href=\"https://zhuanlan.zhihu.com/p/272522594\">知乎文章</a>中的<strong>第三步 - 配置 Clion 内的 Toolchains</strong> 这一部分的内容。</p>\n<h3 id=\"cmake-配置\"><a class=\"anchor\" href=\"#cmake-配置\">#</a>  <code>CMake</code>  配置</h3>\n<p>按照  <code>File</code> -&gt; <code>Settings</code> -&gt; <code>Build,Execution,Development</code> -&gt; <code>CMake</code>  的路径，在其中的  <code>CMake options</code>  选项中添加  <code>-DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc</code>  的内容。如下图所示：</p>\n<p><img loading=\"lazy\" data-src=\"/images/clion-wsl2-cuda-configs-cmake-options.jpg\" alt=\"CMake options\" /></p>\n<h3 id=\"修改-cmakeliststxt\"><a class=\"anchor\" href=\"#修改-cmakeliststxt\">#</a> 修改  <code>CMakeLists.txt</code></h3>\n<p>首先将下载好的  <code>libtorch</code>  文件解压，这里我解压到了本文件夹下的  <code>libtorch</code>  文件夹中。在  <code>CMakeLists.txt</code>  文件中设置  <code>CMAKE_PREFIX_PATH</code>  变量，添加  <code>libtorch</code>  的路径。添加  <code>find_package(Torch REQUIRED)</code>  语句，以及  <code>target_link_libraries(ProjectName &quot;$&#123;TORCH_LIBRARIES&#125;&quot;)</code> ，这两行是最关键的内容。</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>ProjectName CXX CUDA<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_PREFIX_PATH</span> libtorch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>Torch REQUIRED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>ProjectName <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">TORCH_LIBRARIES</span><span class=\"token punctuation\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上方的代码中省去了  <code>CLion</code>  中默认提供的内容，以便让内容更清晰。</p>\n<h3 id=\"代码测试\"><a class=\"anchor\" href=\"#代码测试\">#</a> 代码测试</h3>\n<p>在工程中添加一个  <code>main.cpp</code>  文件，注意在  <code>CMakeLists.txt</code>  也要对应修改  <code>add_executable(ProjectName main.cpp)</code>  这一行的内容。</p>\n<p>在  <code>main.cpp</code>  中添加如下的测试代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;torch/torch.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    torch<span class=\"token double-colon punctuation\">::</span>Tensor tensor <span class=\"token operator\">=</span> torch<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> tensor <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> tensor<span class=\"token punctuation\">.</span><span class=\"token function\">cuda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果编译并运行成功，那么配置完成。</p>\n<h1 id=\"可能的错误\"><a class=\"anchor\" href=\"#可能的错误\">#</a> 可能的错误</h1>\n<p>如果碰到  <code>PyTorch requires cuDNN 7 and above.</code>  这一问题，可以参考这个 <a href=\"https://github.com/pytorch/pytorch/issues/40965\"> <code>GitHub</code>  链接</a>。问题的原因在于无法识别系统中的  <code>cuDNN</code>  版本。我自己碰到这个问题的原因是没有把  <code>cuDNN</code>  中的  <code>cudnn_version.h</code>  这一头文件复制到对应位置，在复制之后问题解决。</p>\n",
            "tags": [
                "Computer-Science",
                "CUDA",
                "Configs",
                "WSL2",
                "CLion",
                "PyTorch"
            ]
        }
    ]
}