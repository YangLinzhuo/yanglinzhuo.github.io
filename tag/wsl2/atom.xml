<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://linn-ylz.com</id>
    <title>林•初夏 • Posts by &#34;wsl2&#34; tag</title>
    <link href="https://linn-ylz.com" />
    <updated>2022-08-09T13:26:54.000Z</updated>
    <category term="AncientBook" />
    <category term="Book" />
    <category term="Essay" />
    <category term="Game" />
    <category term="Music" />
    <category term="Movie" />
    <category term="Hexo" />
    <category term="Valine" />
    <category term="Waline" />
    <category term="TiddlyWiki" />
    <category term="Fishing" />
    <category term="Computer-Science" />
    <category term="Algorithm" />
    <category term="Cpp" />
    <category term="Binary-Search" />
    <category term="CUDA" />
    <category term="Coding-Interviews" />
    <category term="Configs" />
    <category term="WSL2" />
    <category term="CLion" />
    <category term="PyTorch" />
    <category term="Oh-My-Zsh" />
    <category term="Powershell" />
    <category term="WSL" />
    <category term="Emacs" />
    <category term="Programming-Pearls" />
    <category term="Python" />
    <category term="YAML" />
    <category term="dataclass" />
    <category term="Type-Annotation" />
    <category term="CUTLASS" />
    <category term="CUTE" />
    <category term="History" />
    <category term="ChineseHistory" />
    <category term="Table" />
    <entry>
        <id>https://linn-ylz.com/Computer-Science/Configs/wsl2-installation/</id>
        <title>安装 WSL2</title>
        <link rel="alternate" href="https://linn-ylz.com/Computer-Science/Configs/wsl2-installation/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;之前在自己的笔记本上安装过  &lt;code&gt;Windows&lt;/code&gt;  的  &lt;code&gt;Linux&lt;/code&gt;  子系统。最近新配置了一台台式机，又需要重新配置，在过程中也稍稍遇到了一些问题，在这里记录下来以备后续的使用。&lt;/p&gt;
&lt;h1 id=&#34;安装-wsl2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-wsl2&#34;&gt;#&lt;/a&gt; 安装  &lt;code&gt;WSL2&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;这里的安装过程全程参照了这个链接的内容👉：&lt;a href=&#34;https://dowww.spencerwoo.com/&#34;&gt;戳此链接&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里以其教程作为主要参考，并补充安装过程中遇到的问题的解决方式。&lt;/p&gt;
&lt;h2 id=&#34;开启-hyper-v-和-linux-子系统服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开启-hyper-v-和-linux-子系统服务&#34;&gt;#&lt;/a&gt; 开启  &lt;code&gt;Hyper-V&lt;/code&gt;  和  &lt;code&gt;Linux&lt;/code&gt;  子系统服务&lt;/h2&gt;
&lt;p&gt;要安装子系统，首先需要开启相应的  &lt;code&gt;Windows&lt;/code&gt;  系统的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hyper-V 服务&lt;/li&gt;
&lt;li&gt;Linux 子系统服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在管理员权限的  &lt;code&gt;Powershell&lt;/code&gt;  中执行以下两条命令进行开启：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果以上指令无法成功，也可以在开始菜单搜索  &lt;code&gt;启用或关闭 Windows 功能&lt;/code&gt; ，并在其中勾选  &lt;code&gt;Hyper-V&lt;/code&gt;  和  &lt;code&gt;适用于 Windows 的 Linux 子系统&lt;/code&gt;  服务。之后根据提示重启电脑。&lt;/p&gt;
&lt;h2 id=&#34;移动-wsl2-位置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#移动-wsl2-位置&#34;&gt;#&lt;/a&gt; 移动  &lt;code&gt;WSL2&lt;/code&gt;  位置&lt;/h2&gt;
&lt;p&gt;电脑重启后，运行安装好的子系统，我安装的是  &lt;code&gt;Ubuntu&lt;/code&gt;  子系统。&lt;/p&gt;
&lt;p&gt;子系统默认安装在  &lt;code&gt;C&lt;/code&gt;  盘，这使得本就不宽裕的硬盘空间雪上加霜，因此这里对子系统的安装位置进行修改。这里参考的是一个问答中提供的答案&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;第一步，使用指令导出子系统文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Export Ubuntu
wsl --export Ubuntu D:\backup\ubuntu.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中， &lt;code&gt;Ubuntu&lt;/code&gt;  是子系统的名称，可以通过  &lt;code&gt;wsl --list&lt;/code&gt;  指令进行查看。后续的路径则是子系统文件的导出位置，根据需要进行修改。&lt;/p&gt;
&lt;p&gt;第二步，注销原来的子系统：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Unregister the same distribution to remove it from the C: drive:
wsl --unregister Ubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里仍然需要注意不要输错了子系统的名称。&lt;/p&gt;
&lt;p&gt;第三步，导入第一步中导出的子系统文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Import Ubuntu
wsl --import Ubuntu D:\wsl\ D:\backup\ubuntu.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在导入之后，子系统默认是使用的  &lt;code&gt;root&lt;/code&gt;  用户登录，如果需要修改，可以进入  &lt;code&gt;cd %userprofile%\AppData\Local\Microsoft\WindowsApps&lt;/code&gt;  路径，运行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ubuntu config --default-user &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;%userprofile%&lt;/code&gt;  表示的是用户的文件路径，一般是  &lt;code&gt;C:Users\&amp;lt;windows-log-name&amp;gt;&lt;/code&gt; 。如果找不到  &lt;code&gt;AppData&lt;/code&gt;  文件夹，看看是否启用了隐藏文件可见。&lt;/p&gt;
&lt;p&gt;然后指令中的  &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt;  是指在第一次运行子系统时输入的用户名。执行完成之后，子系统默认使用普通用户进行登录。&lt;/p&gt;
&lt;h1 id=&#34;安装-nodejs-服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-nodejs-服务&#34;&gt;#&lt;/a&gt; 安装  &lt;code&gt;Node.js&lt;/code&gt;  服务&lt;/h1&gt;
&lt;p&gt;之后本想尝试在子系统下使用  &lt;code&gt;Node.js&lt;/code&gt;  来运行博客，但是后来发现子系统的文件  &lt;code&gt;I/O&lt;/code&gt;  速度相比原生系统还是太慢，这里还是选择在  &lt;code&gt;Windows&lt;/code&gt;  下使用  &lt;code&gt;Node.js&lt;/code&gt;  来运行博客的的后台服务。下文内容暂且保留以备不时之需。&lt;/p&gt;
&lt;h2 id=&#34;安装-n-管理-nodejs-版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-n-管理-nodejs-版本&#34;&gt;#&lt;/a&gt; 安装  &lt;code&gt;n&lt;/code&gt;  管理  &lt;code&gt;Node.js&lt;/code&gt;  版本&lt;/h2&gt;
&lt;p&gt;在文章开头提到的子系统安装链接中，提到了使用  &lt;code&gt;n&lt;/code&gt;  来管理  &lt;code&gt;Node.js&lt;/code&gt;  的版本。由于直接使用官网&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn2&#34; id=&#34;fnref2&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt;的命令安装无法成功获取脚本，因此仍然选择通过浏览器访问脚本文件，并在本地文件夹创建相应的脚本，在其中粘贴从浏览器复制的脚本内容。之后运行以下指令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash n lts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上指令可能需要使用  &lt;code&gt;sudo&lt;/code&gt;  权限。&lt;br /&gt;
运行之后使用  &lt;code&gt;node --version&lt;/code&gt;  和  &lt;code&gt;npm --version&lt;/code&gt;  确认是否安装成功。&lt;/p&gt;
&lt;p&gt;安装完成后， &lt;code&gt;node&lt;/code&gt;  命令运行正常，但是  &lt;code&gt;npm&lt;/code&gt;  命令遇到了以下错误：&lt;/p&gt;
&lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;/usr/bin/env: ‘bash\r’: No such file or directory&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这里参考了&lt;a href=&#34;https://peaku.co/questions/3239-despues-de-instalar-npm-en-wsl-ubuntu-2004,-aparece-el-mensaje-%26quot;-usr-bin-env:-%26%2339;bash%5Cr%26%2339;:-no-such-file-or-directory%26quot;&#34;&gt;此链接&lt;/a&gt;解决。按照其中被采纳的答案，创建  &lt;code&gt;/etc/wsl.conf&lt;/code&gt;  文件，并在其中添加以下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-test&#34;&gt;[interop]
appendWindowsPath = false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在  &lt;code&gt;Powershell&lt;/code&gt;  中使用  &lt;code&gt;wsl --shutdown&lt;/code&gt;  关闭子系统，之后重新打开，运行  &lt;code&gt;bash n lts&lt;/code&gt;  安装命令。之后  &lt;code&gt;npm --version&lt;/code&gt;  命令能够正常显示。&lt;/p&gt;
&lt;h2 id=&#34;安装-yarn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-yarn&#34;&gt;#&lt;/a&gt; 安装 yarn&lt;/h2&gt;
&lt;p&gt;接下来，使用  &lt;code&gt;npm&lt;/code&gt;  安装  &lt;code&gt;yarn&lt;/code&gt;  进行包管理。相比于原生的  &lt;code&gt;npm&lt;/code&gt; ，该工具更加现代。使用如下命令安装  &lt;code&gt;yarn&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g yarn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行  &lt;code&gt;yarn --version&lt;/code&gt; ，成功输出版本信息则安装成功。&lt;/p&gt;
&lt;h3 id=&#34;结合-yarn-安装-hexo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结合-yarn-安装-hexo&#34;&gt;#&lt;/a&gt; 结合 yarn 安装 Hexo&lt;/h3&gt;
&lt;p&gt;之后，参考一篇博客的内容&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn3&#34; id=&#34;fnref3&#34;&gt;[3]&lt;/a&gt;&lt;/sup&gt;，使用  &lt;code&gt;yarn&lt;/code&gt;  安装  &lt;code&gt;Hexo&lt;/code&gt;  服务。&lt;/p&gt;
&lt;p&gt;使用如下指令安装  &lt;code&gt;hexo&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add hexo-cli -g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上指令执行后，运行  &lt;code&gt;hexo -v&lt;/code&gt;  如果返回版本等信息，则说明安装成功。&lt;/p&gt;
&lt;p&gt;在这里，我碰到了无法运行  &lt;code&gt;hexo&lt;/code&gt;  的问题，尝试过参考  &lt;code&gt;StackOverflow&lt;/code&gt;  中的答案&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn4&#34; id=&#34;fnref4&#34;&gt;[4]&lt;/a&gt;&lt;/sup&gt;使用  &lt;code&gt;yarn global add hexo-cli&lt;/code&gt;  安装，仍然无法解决该问题。&lt;/p&gt;
&lt;p&gt;后来发现，需要在环境变量添加  &lt;code&gt;yarn&lt;/code&gt;  的相关路径，具体参考&lt;a href=&#34;https://classic.yarnpkg.com/en/docs/cli/global&#34;&gt;此链接&lt;/a&gt;，使用如下指令添加：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=&amp;quot;$(yarn global bin):$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之后可以成功运行  &lt;code&gt;hexo&lt;/code&gt;  命令。&lt;/p&gt;
&lt;h2 id=&#34;卸载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#卸载&#34;&gt;#&lt;/a&gt; 卸载&lt;/h2&gt;
&lt;p&gt;由于子系统的文件  &lt;code&gt;I/O&lt;/code&gt;  过于缓慢，因此最后还是放弃在子系统中运行  &lt;code&gt;Hexo&lt;/code&gt;  相关的服务。对于安装的上述软件，使用以下指令删除：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 删除 n 包管理器
sudo bash n uninstall

# 查找 yarn 和 node_modules 等残留文件
# 以下例子表示查找包含 yarn 名称的文件，过滤 /mnt/ 开头的路径，这部分是 Windows 系统中的文件
locate &#39;*yarn*&#39; | grep -v &#39;/mnt/&#39; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;找到路径后，使用  &lt;code&gt;rm&lt;/code&gt;  删除相关的文件即可。&lt;/p&gt;
&lt;hr class=&#34;footnotes-sep&#34; /&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://superuser.com/questions/1550622/move-wsl2-file-system-to-another-drive&#34;&gt;https://superuser.com/questions/1550622/move-wsl2-file-system-to-another-drive&lt;/a&gt; &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn2&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/tj/n&#34;&gt; &lt;code&gt;n&lt;/code&gt;  的官方  &lt;code&gt;GitHub&lt;/code&gt;  仓库&lt;/a&gt; &lt;a href=&#34;#fnref2&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn3&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://www.taojishu8.com/2021/01/28/%E3%80%90Hexo%E3%80%91%E2%91%A1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/&#34;&gt;【Hexo】②如何使用 Hexo 和 GitHub 搭建个人博客&lt;/a&gt; &lt;a href=&#34;#fnref3&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn4&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/48484265/failed-to-install-hexo-cli-on-mac&#34;&gt;Failed to install hexo-cli on mac&lt;/a&gt; &lt;a href=&#34;#fnref4&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        <category term="Computer-Science" />
        <category term="Configs" />
        <category term="WSL2" />
        <updated>2022-08-09T13:26:54.000Z</updated>
    </entry>
    <entry>
        <id>https://linn-ylz.com/Computer-Science/Configs/clion-wsl2-cuda-configs/</id>
        <title>通过 CLion 在 WSL2 的 CUDA 环境下使用 libtorch</title>
        <link rel="alternate" href="https://linn-ylz.com/Computer-Science/Configs/clion-wsl2-cuda-configs/"/>
        <content type="html">&lt;h1 id=&#34;说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说明&#34;&gt;#&lt;/a&gt; 说明&lt;/h1&gt;
&lt;p&gt;本文记录使用  &lt;code&gt;CLion&lt;/code&gt;  的  &lt;code&gt;IDE&lt;/code&gt;  环境，使用  &lt;code&gt;WSL2&lt;/code&gt;  环境下的  &lt;code&gt;CUDA&lt;/code&gt;  来调用  &lt;code&gt;PyTorch&lt;/code&gt;  的  &lt;code&gt;libtorch&lt;/code&gt;  库内容。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;libtorch&lt;/code&gt;  是  &lt;code&gt;PyTorch&lt;/code&gt;  框架提供的  &lt;code&gt;C++&lt;/code&gt;  接口，因为最近的课题对性能有比较高的要求，并且有自定义算子的需求，所以需要用到相关的代码。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WSL2&lt;/code&gt;  下的  &lt;code&gt;CUDA&lt;/code&gt;  环境配置可以参考 &lt;a href=&#34;/Computer-Science/Configs/wsl2-cuda-configs/&#34; title=&#34;WSL2 下的 CUDA 配置&#34;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置&#34;&gt;#&lt;/a&gt; 配置&lt;/h1&gt;
&lt;h2 id=&#34;下载-libtorch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载-libtorch&#34;&gt;#&lt;/a&gt; 下载  &lt;code&gt;libtorch&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;从  &lt;code&gt;PyTorch&lt;/code&gt;  的&lt;a href=&#34;https://pytorch.org/&#34;&gt;官方网站&lt;/a&gt;下载自己所需版本的  &lt;code&gt;libtorch&lt;/code&gt;  。注意和自己的  &lt;code&gt;CUDA&lt;/code&gt;  版本也要对应。&lt;/p&gt;
&lt;h2 id=&#34;clion-配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#clion-配置&#34;&gt;#&lt;/a&gt;  &lt;code&gt;CLion&lt;/code&gt;  配置&lt;/h2&gt;
&lt;p&gt;打开  &lt;code&gt;CLion&lt;/code&gt;  新建一个  &lt;code&gt;CUDA executable&lt;/code&gt;  工程。然后修改  &lt;code&gt;CMakeLists.txt&lt;/code&gt;  和  &lt;code&gt;CMake&lt;/code&gt;  的相关配置。&lt;/p&gt;
&lt;h3 id=&#34;wsl2-环境配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wsl2-环境配置&#34;&gt;#&lt;/a&gt;  &lt;code&gt;WSL2&lt;/code&gt;  环境配置&lt;/h3&gt;
&lt;p&gt;参考这篇&lt;a href=&#34;https://zhuanlan.zhihu.com/p/272522594&#34;&gt;知乎文章&lt;/a&gt;中的&lt;strong&gt;第三步 - 配置 Clion 内的 Toolchains&lt;/strong&gt; 这一部分的内容。&lt;/p&gt;
&lt;h3 id=&#34;cmake-配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cmake-配置&#34;&gt;#&lt;/a&gt;  &lt;code&gt;CMake&lt;/code&gt;  配置&lt;/h3&gt;
&lt;p&gt;按照  &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Build,Execution,Development&lt;/code&gt; -&amp;gt; &lt;code&gt;CMake&lt;/code&gt;  的路径，在其中的  &lt;code&gt;CMake options&lt;/code&gt;  选项中添加  &lt;code&gt;-DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc&lt;/code&gt;  的内容。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;/images/clion-wsl2-cuda-configs-cmake-options.jpg&#34; alt=&#34;CMake options&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;修改-cmakeliststxt&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改-cmakeliststxt&#34;&gt;#&lt;/a&gt; 修改  &lt;code&gt;CMakeLists.txt&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;首先将下载好的  &lt;code&gt;libtorch&lt;/code&gt;  文件解压，这里我解压到了本文件夹下的  &lt;code&gt;libtorch&lt;/code&gt;  文件夹中。在  &lt;code&gt;CMakeLists.txt&lt;/code&gt;  文件中设置  &lt;code&gt;CMAKE_PREFIX_PATH&lt;/code&gt;  变量，添加  &lt;code&gt;libtorch&lt;/code&gt;  的路径。添加  &lt;code&gt;find_package(Torch REQUIRED)&lt;/code&gt;  语句，以及  &lt;code&gt;target_link_libraries(ProjectName &amp;quot;$&amp;#123;TORCH_LIBRARIES&amp;#125;&amp;quot;)&lt;/code&gt; ，这两行是最关键的内容。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;project(ProjectName CXX CUDA)
set(CMAKE_PREFIX_PATH libtorch)
find_package(Torch REQUIRED)
target_link_libraries(ProjectName &amp;quot;$&amp;#123;TORCH_LIBRARIES&amp;#125;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上方的代码中省去了  &lt;code&gt;CLion&lt;/code&gt;  中默认提供的内容，以便让内容更清晰。&lt;/p&gt;
&lt;h3 id=&#34;代码测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码测试&#34;&gt;#&lt;/a&gt; 代码测试&lt;/h3&gt;
&lt;p&gt;在工程中添加一个  &lt;code&gt;main.cpp&lt;/code&gt;  文件，注意在  &lt;code&gt;CMakeLists.txt&lt;/code&gt;  也要对应修改  &lt;code&gt;add_executable(ProjectName main.cpp)&lt;/code&gt;  这一行的内容。&lt;/p&gt;
&lt;p&gt;在  &lt;code&gt;main.cpp&lt;/code&gt;  中添加如下的测试代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;torch/torch.h&amp;gt;

int main() &amp;#123;
    torch::Tensor tensor = torch::rand(&amp;#123;2,3&amp;#125;);
    std::cout &amp;lt;&amp;lt; tensor &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; tensor.cuda() &amp;lt;&amp;lt; std::endl;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果编译并运行成功，那么配置完成。&lt;/p&gt;
&lt;h1 id=&#34;可能的错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可能的错误&#34;&gt;#&lt;/a&gt; 可能的错误&lt;/h1&gt;
&lt;p&gt;如果碰到  &lt;code&gt;PyTorch requires cuDNN 7 and above.&lt;/code&gt;  这一问题，可以参考这个 &lt;a href=&#34;https://github.com/pytorch/pytorch/issues/40965&#34;&gt; &lt;code&gt;GitHub&lt;/code&gt;  链接&lt;/a&gt;。问题的原因在于无法识别系统中的  &lt;code&gt;cuDNN&lt;/code&gt;  版本。我自己碰到这个问题的原因是没有把  &lt;code&gt;cuDNN&lt;/code&gt;  中的  &lt;code&gt;cudnn_version.h&lt;/code&gt;  这一头文件复制到对应位置，在复制之后问题解决。&lt;/p&gt;
</content>
        <category term="Computer-Science" />
        <category term="CUDA" />
        <category term="Configs" />
        <category term="WSL2" />
        <category term="CLion" />
        <category term="PyTorch" />
        <updated>2021-10-08T15:32:30.000Z</updated>
    </entry>
</feed>
