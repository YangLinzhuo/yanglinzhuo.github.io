{
    "version": "https://jsonfeed.org/version/1",
    "title": "林•初夏 • All posts by \"valine\" tag",
    "description": "Linn 的个人博客",
    "home_page_url": "https://linn-ylz.com",
    "items": [
        {
            "id": "https://linn-ylz.com/Hexo/transfer-waline-2/",
            "url": "https://linn-ylz.com/Hexo/transfer-waline-2/",
            "title": "ShokaX 主题迁移",
            "date_published": "2024-11-09T10:09:10.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>近日尝试在新电脑上配置博客环境，发现原来的  <code>Shoka</code>  主题已经过于陈旧了，环境搭建非常困难，依赖的软件包版本老旧，并且原作者没有时间在进行维护和开发，已经到了需要动手解决以下的时候了。在之前的文章 <a href=\"/Computer-Science/Algorithm/about-binary-search/\" title=\"二分搜索探究\">《从 Valine 迁移到 Waline》</a> 中，介绍了从  <code>Valine</code>  迁移到  <code>Waline</code>  的方法。因为  <code>Shoka</code>  主题的原因，在迁移过程中遇到了很多问题，只能通过一些临时的方法来解决，造成了维护上的困难。这也最终让我下定决心更换到新的  <code>ShokaX</code>  主题。</p>\n<p>一段时间前曾经尝试过切换到  <code>ShokaX</code>  主题，但是当时这个新主题也还未稳定，存在一些问题，加之工作太忙，没时间抽空完成迁移。最近  <code>ShokaX</code>  主题也算稳定了下来，于是趁着在新电脑上搭建环境的机会，正好一并迁移过来。</p>\n<p>按照  <code>ShokaX</code>  自己的说法，它是 &quot; <code>Shoka</code>  的一个二次开发版（算精神续作），致力于提高性能和优化魔改体验，诞生原因是目前  <code>Shoka</code>  已经三年没有更新了，积压了大量 BUG 和功能请求。&quot;</p>\n<p>本篇文章就是对迁移过程中问题的一个记录，便于之后复现博客环境。</p>\n<h1 id=\"第三方工具\"><a class=\"anchor\" href=\"#第三方工具\">#</a> 第三方工具</h1>\n<h2 id=\"git\"><a class=\"anchor\" href=\"#git\">#</a> Git</h2>\n<p>这次新环境的网络遇到些问题， <code>Git</code>  仓库总是无法拉取。</p>\n<p>首先是报错  <code>port 22 connection refused</code> ，这个参考外网的一个办法<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>解决了。其做法是在  <code>~/.ssh/config</code>  中添加如下配置，让  <code>Git</code>  连接走 443 端口：</p>\n<pre><code class=\"language-text\"># GitHub config\nHost github.com\n    Hostname ssh.github.com\n    Port 443\n    User git\n</code></pre>\n<p>上述问题解决后，一段时间能够正常工作，后来又遇到问题，这次换 443 端口也拒绝连接请求了...。最后配置了  <code>WSL</code>  环境的代理之后才总算是告一段落。</p>\n<p>具体而言是添加如下环境变量：</p>\n<pre><code class=\"language-shell\">export hostip=$(ip route show | grep -i default | awk '&#123; print $3&#125;')\nexport https_proxy=&quot;http://$&#123;hostip&#125;:7890&quot;\nexport http_proxy=&quot;http://$&#123;hostip&#125;:7890&quot;\n</code></pre>\n<p>也可以在  <code>.bashrc</code>  或者  <code>.zshrc</code>  等环境配置文件中添加，这样每次启动之后就会自动设置代理。这里的端口注意修改为自己代理软件对应的端口。这里主要参考了一篇 WSL2 环境使用 Clash 代理的记录<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>以及微软官方 WSL 使用命令说明<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>。</p>\n<h2 id=\"nodejs\"><a class=\"anchor\" href=\"#nodejs\">#</a> Node.js</h2>\n<p>然后是  <code>Node.js</code>  安装。这里推荐使用  <code>nvm</code> <sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup> 这个软件包来管理  <code>Node.js</code>  的环境。</p>\n<p>如果想使用其他方法安装，可以参考相关博客<sup class=\"footnote-ref\"><a href=\"#fn5\" id=\"fnref5\">[5]</a></sup>。</p>\n<p>首先执行以下命令安装  <code>nvm</code> ：</p>\n<pre><code class=\"language-shell\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n</code></pre>\n<p>注意版本号可能会有差别。</p>\n<p>然后初始化环境：</p>\n<pre><code class=\"language-shell\">source ~/.zshrc\n</code></pre>\n<p>使用  <code>bash</code>  的话就是  <code>source ~/.bashrc</code> 。</p>\n<pre><code class=\"language-shell\">nvm list-remote  # 查看 NVM 哪些版本的 Node 可用\nnvm install --lts  # 下载lts最新版\n\n# 验证版本\nnode -v\nnpm -v\n</code></pre>\n<h1 id=\"shokax-主题安装\"><a class=\"anchor\" href=\"#shokax-主题安装\">#</a> ShokaX 主题安装</h1>\n<p><code>ShokaX</code>  官方推荐使用  <code>pnpm</code>  管理包，因此需要先安装：</p>\n<pre><code class=\"language-shell\">npm install -g pnpm\n</code></pre>\n<p><code>ShokaX</code>  的官方文档<sup class=\"footnote-ref\"><a href=\"#fn6\" id=\"fnref6\">[6]</a></sup>中有详细的安装说明。如果不想折腾，那么可以选择其中的第一种方式，所谓 &quot;ShokaX 即食罐头&quot;：</p>\n<pre><code class=\"language-shell\">git clone https://github.com/theme-shoka-x/shokax-can --depth=1\ncd shokax-can\npnpm install\nhexo s # 如果报错更换为 pnpm dlx hexo s\n</code></pre>\n<p>我因为有之前写的文档，所以采用  <code>Git</code>  安装的方式，将  <code>ShokaX</code>  主题安装到  <code>themes</code>  文件夹下：</p>\n<pre><code class=\"language-shell\">cd themes\ngit clone https://github.com/theme-shoka-x/hexo-theme-shokaX.git # 可替换为你自己的项目\ncd shokax\nnode ./toolbox/compiler.mjs\ncd ../..\nhexo s # 或 pnpm dlx hexo s\nnode ./themes/shokax/toolbox/hoistdep.mjs\n</code></pre>\n<p>上述  <code>node</code>  命令执行中可能会缺少一些依赖，直接安装即可：</p>\n<pre><code class=\"language-shell\"># 安装 node 执行命令依赖\npnpm install esbuild\npnpm install glob\n\n# 安装主题依赖\npnpm install\n</code></pre>\n<h1 id=\"shokax-主题配置\"><a class=\"anchor\" href=\"#shokax-主题配置\">#</a> ShokaX 主题配置</h1>\n<p>主题配置主要参考  <code>ShokaX</code>  的官方文档<sup class=\"footnote-ref\"><a href=\"#fn6\" id=\"fnref6:1\">[6:1]</a></sup>中的配置相关部分，其中注意以下配置：</p>\n<pre><code class=\"language-yaml\">syntax_highlighter: false\n</code></pre>\n<p>在  <code>hexo</code>  大于等于  <code>7.0.0-rc1</code>  的时候需要按照上面的方式设置，否则可能代码块渲染不对。</p>\n<p>此外， <code>ShokaX</code>  中的某些图片资源存放在了  <code>assets</code>  文件夹而非原来的  <code>images</code>  文件夹，如果有图片链接出现了问题，可以  <code>F12</code>  浏览器工具查看图片是否路径正确。</p>\n<p>其他的配置基本上是从原来的  <code>Shoka</code>  配置中复制而来。</p>\n<h1 id=\"重新部署-vercel\"><a class=\"anchor\" href=\"#重新部署-vercel\">#</a> 重新部署 Vercel</h1>\n<p>在本地部署之后，发现评论系统的无法访问到后端的地址。经过排查发现是 Vercel 部署的评论后端和当前主题使用的  <code>waline</code>  版本不匹配导致的。新版的  <code>waline</code>  在请求链接中会添加  <code>/api</code>  的部分，而原来的版本中则没有，因此访问会产生 404。解决方法即用新版本  <code>waline</code>  重新部署。具体部署步骤可以查看之前的文章 <a href=\"/Computer-Science/Algorithm/about-binary-search/\" title=\"二分搜索探究\">《从 Valine 迁移到 Waline》</a>。</p>\n<p>记得复制环境变量以及添加域名。</p>\n<h1 id=\"一键部署\"><a class=\"anchor\" href=\"#一键部署\">#</a> 一键部署</h1>\n<p>一键部署需要安装  <code>hexo</code>  的工具：</p>\n<pre><code class=\"language-shell\">pnpm install hexo-deployer-git\n</code></pre>\n<p>并在配置文件中配置部署的仓库信息：</p>\n<pre><code class=\"language-yaml\">deploy:\n  type: git\n  repo: https://github.com/YangLinzhuo/yanglinzhuo.github.io\n  branch: master\n</code></pre>\n<p>搭建完成并部署到  <code>GitHubPages</code>  之后发现网页白屏，排查发现是生成的  <code>index.html</code>  文件为空<sup class=\"footnote-ref\"><a href=\"#fn7\" id=\"fnref7\">[7]</a></sup>。重新生成部署后解决。</p>\n<h1 id=\"修改主题\"><a class=\"anchor\" href=\"#修改主题\">#</a> 修改主题</h1>\n<h2 id=\"footer-显示效果修改\"><a class=\"anchor\" href=\"#footer-显示效果修改\">#</a>  <code>footer</code>  显示效果修改</h2>\n<p>排查中顺便修改了一下主题内容  <code>themes/shokax/layout/_partials/post/footer.pug</code> ：</p>\n<pre><code class=\"language-pug\">div(class=&quot;meta&quot;)\n    if theme.twikoo.enable || theme.waline.pageview\n        span(class=&quot;item&quot;)\n            span(class=&quot;icon&quot;)\n                i(class=&quot;ic i-eye&quot;)\n            span(class=&quot;text&quot;)\n                !=__('footer.total_views') + __('symbol.colon')\n            - var prefixedPath = post.path.startsWith('/') ? post.path : '/' + post.path\n            span(id=&quot;twikoo_visitors&quot; class=&quot;waline-pageview-count&quot; data-path=prefixedPath)\n                !=__('footer.loading')\n    if date(post.date) !== date(post.updated) || time(post.date) !== time(post.updated)\n        span(class=&quot;item&quot;)\n            span(class=&quot;icon&quot;)\n                i(class=&quot;ic i-calendar-check&quot;)\n            span(class=&quot;text&quot;)\n                != __('post.edited') + __('symbol.space')\n            time(title=__('post.modified') + __('symbol.colon') + full_date(post.updated) itemprop=&quot;dateModified&quot; datetime=moment(post.updated).format())\n                != date(post.updated)\n\n    != shokax_inject('postMeta')\n</code></pre>\n<p>这里把浏览量和更新日期的逻辑分开了，并且修改了原来代码中的一些硬编码的文本内容，使用  <code>i18n</code>  文件中的文本统一替换。</p>\n<h2 id=\"404-页面\"><a class=\"anchor\" href=\"#404-页面\">#</a>  <code>404</code>  页面</h2>\n<p>默认情况下的 404 页面不显示内容。这里需要修改  <code>themes/shokax/layout/page.pug</code>  文件中的内容：</p>\n<pre><code class=\"language-pug\">block content\n    if page.type === 'categories'\n        div(class=&quot;collapse wrap&quot;)\n            h2(class=&quot;item title&quot;)\n                a(href=url_for(site.path))\n                    != __('menu.home')\n                small\n                != _p('counter.categories', site.categories.length)\n            != _list_categories(3)\n    else if page.type === 'tags'\n        div(class=&quot;collapse wrap&quot;)\n            h2(class=&quot;item title&quot;)\n                a(href=url_for(site.path))\n                    != __('menu.home')\n                small\n                != _p('counter.tag_cloud', site.tags.length)\n            div(class=&quot;tag cloud&quot;)\n                != tagcloud(&#123;min_font: theme.tagcloud.min,max_font: theme.tagcloud.max,amount: theme.tagcloud.amount,color: true,start_color: theme.tagcloud.start,end_color: theme.tagcloud.end&#125;)\n    else if page.type == '404'\n        div(class=&quot;page wrap&quot;)\n            div(class=&quot;notfound&quot;)\n                != __('title.not_found')\n    else\n        div(class=&quot;page wrap&quot;)\n            != partial('_partials/post/post.pug', &#123;post: page&#125;)\n        +CommentRender\n</code></pre>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://backendtea.com/post/ssh-could-not-connect/\">How to fix &quot;connect to host github.com port 22: Operation timed out&quot; | BackEndTea</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://gist.github.com/libChan/3a804a46b532cc326a2ee55b27e8ac19?permalink_comment_id=4841732\">WSL2 使用 clash for windows 代理</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/networking#identify-ip-address\">使用 WSL 访问网络应用程序 | Microsoft Learn</a> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p><a href=\"https://github.com/nvm-sh/nvm\">nvm-sh/nvm: Node Version Manager - POSIX-compliant bash script to manage multiple active node.js versions</a> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn5\" class=\"footnote-item\"><p><a href=\"https://www.cnblogs.com/echohye/p/18271522\">Ubuntu 22.04 安装 NodeJS - 槑孒 - 博客园</a> <a href=\"#fnref5\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn6\" class=\"footnote-item\"><p><a href=\"https://docs-hexo.shokax.top/getting-started/\">安装 ShokaX | ShokaX Docs</a> <a href=\"#fnref6\" class=\"footnote-backref\">↩︎</a> <a href=\"#fnref6:1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn7\" class=\"footnote-item\"><p><a href=\"https://blog.csdn.net/weixin_45178128/article/details/121230175\">Hexo+github 搭博客，搭完后访问发现白屏了，什么也没有。_hexo 部署后网站空白 - CSDN 博客</a> <a href=\"#fnref7\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Hexo",
                "Valine",
                "Waline"
            ]
        },
        {
            "id": "https://linn-ylz.com/Hexo/transfer-waline/",
            "url": "https://linn-ylz.com/Hexo/transfer-waline/",
            "title": "从 Valine 迁移到 Waline",
            "date_published": "2022-07-24T07:09:21.000Z",
            "content_html": "<div class=\"note info\">\n<p>2022-12-02 更新<br />\n根据评论区小伙伴 @<a href=\"https://maredevi.fun/\">MareDevi</a> 的介绍，成功解决了文章浏览量显示的问题，撒花！🌸</p>\n</div>\n<div class=\"note warning\">\n<p><s>想来想去，很多问题还是没有解决，主要还是  <code>Waline</code>  与博客主题不完全兼容，加上自己对前端也不是很了解，最后还是改了回去。真是太折腾了。流石程序员。</s></p>\n</div>\n<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>由于  <code>Valine</code>  评论系统的通知问题以及其他原因，考虑更换  <code>Waline</code>  作为新的评论系统，但是原来的  <code>Shoka</code>  主题使用的是作者修改后的  <code>MiniValine</code>  系统，在修改上碰到了很大的麻烦，<s>最后只能忍痛割爱更换了现在的  <code>butterfly</code>  主题。这次更换也是对博客进行了一个大刀阔斧的修改，但是也摆脱了  <code>Valine</code>  系统这个累赘。原来经常有评论无法及时提醒，而我自己有时候又不会经常上网站查看，因此有的消息过了很久才能发现。最后还是下定决心进行迁移。</s></p>\n<p>经过查找，发现了一个小姐姐提供的修改方法<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>，在  <code>Shoka</code>  中能够引入  <code>Waline</code>  。最后还是保留了  <code>Shoka</code>  主题，然后将评论系统换成了  <code>Waline</code>  的系统，虽然还有一些兼容性上的问题，但总归还算保住了现在这个好看的主题。有些小问题折腾了几天也没能完全解决，姑且就到此为止吧。关于遇到的问题，在文章最后一小节有补充。</p>\n<h1 id=\"域名注册\"><a class=\"anchor\" href=\"#域名注册\">#</a> 域名注册</h1>\n<p>这次顺便更换了一个自己的域名。经过一番搜索后选择了 <a href=\"https://www.dynadot.com/\">Dynadot</a> 域名商，域名就是现在的  <code>linn-ylz.com</code> 。依照教程<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>购买域名，全部完成之后，使用  <code>Cloudflare</code>  的  <code>DNS</code>  服务，参考另一个教程<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>。</p>\n<p>以上的步骤按照教程基本能够比较轻松地完成，不多赘述。</p>\n<h2 id=\"自定义域名\"><a class=\"anchor\" href=\"#自定义域名\">#</a> 自定义域名</h2>\n<p>在  <code>Vercel</code>  中设置自定义域名需要和  <code>Cloudflare</code>  的配置相匹配，具体可以参考这篇<a href=\"https://tangly1024.com/article/vercel-domain\">教程</a>。需要注意，在  <code>Cloudflare</code>  中，需要将  <code>SSL/TLS</code>  的加密模式设置为完全（Full），否则可能会遇到 “重定向过多” 的错误而无法访问。</p>\n<h1 id=\"更换-waline\"><a class=\"anchor\" href=\"#更换-waline\">#</a> 更换 Waline</h1>\n<p>按照  <code>Waline</code>  的<a href=\"https://waline.js.org/guide/get-started.html\">教程</a>进行配置。</p>\n<h2 id=\"leancloud-设置\"><a class=\"anchor\" href=\"#leancloud-设置\">#</a> LeanCloud 设置</h2>\n<p>因为之前已经注册配置过  <code>LeanCloud</code>  了，所以这里不再赘述。可以参考之前的文章 <a href=\"/Hexo/blog-comment-push/\" title=\"Shoka 评论推送功能实现\">Shoka 评论推送功能实现</a>。</p>\n<h2 id=\"vercel-配置\"><a class=\"anchor\" href=\"#vercel-配置\">#</a> Vercel 配置</h2>\n<p>注册  <code>Vercel</code>  完成之后，按照  <code>Waline</code>  的官方教程进行配置。我在这里碰到了一点问题，从  <code>Waline</code>  的入口进入  <code>Vercel</code>  之后，在选择  <code>GitHub</code>  仓库的时无法填写表格，因此无法直接进行 deploy。但是直接选择自己的仓库却又可以。最后只能采用曲线救国的方法，自己 Fork 了仓库，然后再从自己的仓库中进行选择。然而直接 deploy 仓库会报错  <code>This Serverless Function has crashed</code> ，据官方说法，只需要复制  <code>example</code>  文件夹下的内容即可<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup>。</p>\n<p>在  <code>Vercel</code>  的  <code>Settings</code>  中，选择  <code>Environment Variables</code>  添加环境变量，主要是  <code>LEAN_ID</code> ， <code>LEAN_KEY</code> ， <code>LEAN_MASTER_KEY</code>  三个值。</p>\n<div class=\"note info\">\n<p>如果是使用的国内版的  <code>LeanCloud</code> ，还需要额外设置  <code>LEAN_SERVER</code>  变量。</p>\n</div>\n<h3 id=\"添加自定义域名\"><a class=\"anchor\" href=\"#添加自定义域名\">#</a> 添加自定义域名</h3>\n<p>参照  <code>Waline</code>  教程中的内容，在  <code>Settings</code>  中选择  <code>Domain</code>  进入域名配置页。教程的说明进行配置。</p>\n<p>关于在域名服务器商处添加新的  <code>CNAME</code>  解析记录这一条，由于我是在  <code>Cloudflare</code>  注册的  <code>DNS</code>  服务，因此需要在其中进行配置。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Type</th>\n<th style=\"text-align:left\">Name</th>\n<th style=\"text-align:left\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">CNAME</td>\n<td style=\"text-align:left\">example</td>\n<td style=\"text-align:left\"><a href=\"http://cname.vercel-dns.com\">cname.vercel-dns.com</a></td>\n</tr>\n</tbody>\n</table>\n<table>\n<caption id=\"\" style=\"caption-side: bottom\">域名配置参数表</caption>\n<thead>\n<tr>\n<th style=\"text-align:left\">Type</th>\n<th style=\"text-align:left\">Name</th>\n<th style=\"text-align:left\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">CNAME</td>\n<td style=\"text-align:left\">example</td>\n<td style=\"text-align:left\"><a href=\"http://cname.vercel-dns.com\">cname.vercel-dns.com</a></td>\n</tr>\n</tbody>\n</table>\n<p>按我自己的例子，我的域名是  <code>linn-ylz.com</code> ，我选择的用于  <code>Waline</code>  的域名是  <code>comments.linn-ylz.com</code> ，那么在  <code>Cloudflare</code>  配置中添加  <code>CNAME</code>  配置，名称输入  <code>comments</code> ，对应的值为  <code>cname.vercel-dns.com</code> 。</p>\n<p><img loading=\"lazy\" data-src=\"/images/transfer-waline/vercel-cloudflare-config.png\" alt=\"Cloudflare 域名配置\" /></p>\n<p>上述配置完成之后可以从  <code>Vercel</code>  中打开网页进行评论测试。</p>\n<h1 id=\"邮件通知配置\"><a class=\"anchor\" href=\"#邮件通知配置\">#</a> 邮件通知配置</h1>\n<p>这一部分主要参考  <code>Waline</code>  中的<a href=\"https://waline.js.org/guide/server/notification.html\">评论通知</a>教程内容。我选择的是其中的邮件通知服务。教程中列举了以下必须配置的内容：</p>\n<ul>\n<li><code>SMTP_SERVICE</code> : SMTP 邮件发送服务提供商。</li>\n<li><code>SMTP_USER</code> : SMTP 邮件发送服务的用户名，一般为登录邮箱。</li>\n<li><code>SMTP_PASS</code> : SMTP 邮件发送服务的密码，一般为邮箱登录密码，部分邮箱 (例如 163) 是单独的 SMTP 密码。</li>\n<li><code>SITE_NAME</code> : 网站名称，用于在消息中显示。</li>\n<li><code>SITE_URL</code> : 网站地址，用于在消息中显示。</li>\n<li><code>AUTHOR_EMAIL</code> : 博主邮箱，用来接收新评论通知。如果是博主发布的评论则不进行提醒通知。</li>\n</ul>\n<p>以上变量均在  <code>Vercel</code>  中的环境变量设置中添加。由于官方文档惜字如金，所以这里再详细说一下配置的细节。</p>\n<p><code>SMTP_SERVICE</code> 、 <code>SMTP_USER</code> 、 <code>SMTP_PASS</code>  这三项内容是对应发送通知邮件的邮箱。比如我有两个邮箱，一个是 QQ 邮箱，另一个是 Outlook 邮箱，我选择用 QQ 邮箱发送消息到我的 Outlook 邮箱，通知有评论相关的内容到达。那么以上三项内容便需要填写 QQ 邮箱相关的信息。比如 QQ 邮箱的  <code>SMTP_SERVICE</code>  是  <code>QQ</code> ， <code>SMTP_USER</code>  即对应 QQ 邮箱，如  <code>123456789@qq.com</code> 。而  <code>SMTP_PASS</code>  并不是 QQ 邮箱的密码，需要在 QQ 邮箱的 <code>设置</code> 中，找到  <code>账户</code>  选项卡，在  <code>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</code>  一栏有一个提示，最后有一个生成授权码的可点击链接，点击它之后，会要求你向某个号码发送一条指定内容的短信，发送完成之后会弹窗提示你一个授权码，这个授权码即填写到  <code>SMTP_PASS</code>  中的内容。</p>\n<p><code>SITE_NAME</code>  是消息中显示的网站名称， <code>SITE_URL</code>  则是网站的地址。注意这里填写的地址要包含前面的协议部分，以我自己为例就是  <code>https://linn-ylz.com</code> 。<sup class=\"footnote-ref\"><a href=\"#fn5\" id=\"fnref5\">[5]</a></sup></p>\n<p><code>AUTHOR_EMAIL</code>  就是用于接收评论通知的邮箱。</p>\n<p>以上内容如果均配置正确，那么应该能够正常接收通知了。</p>\n<h1 id=\"修复-leancloud-数据库格式问题\"><a class=\"anchor\" href=\"#修复-leancloud-数据库格式问题\">#</a> 修复 LeanCloud 数据库格式问题</h1>\n<p>尽管  <code>Waline</code>  也支持  <code>LeanCloud</code> ，但是在读取其中的内容时，因为数据库表格键值的不匹配会在显示上出现一些问题，这点可能和我之前使用的是  <code>MiniValine</code>  有关。</p>\n<h2 id=\"阅读量\"><a class=\"anchor\" href=\"#阅读量\">#</a> 阅读量</h2>\n<p>首先是阅读量的问题，在  <code>LeanCloud</code>  原来的内容中，存储了之前的网页的访问数量。但是转到  <code>Waline</code>  之后数值却从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 开始计算了。在  <code>LeanCloud</code>  后台，也发现和原来的文章不算同一个数据列。经过一番排查没有找到很好的解决办法，因此只能把之前的计数值复制到新的数据项之中，因为文章数量不多，操作起来倒也没费太多时间。</p>\n<h2 id=\"评论\"><a class=\"anchor\" href=\"#评论\">#</a> 评论</h2>\n<p>在  <code>Vercel</code>  搭建好之后，进入  <code>Waline</code>  的管理平台，发现虽然评论能够正常读取，但是评论的时间显示却存在问题，经排查， <code>Waline</code>  使用的是  <code>insertedAt</code>  列的数据作为评论的发表时间，而之前的数据则是直接使用的  <code>createdAt</code>  列的数据，因此  <code>Waline</code>  读取不到之前评论的发表时间，这里把  <code>createdAt</code>  列的内容复制到  <code>insertedAt</code>  列之后可以正常显示时间了。</p>\n<p>另一个问题是在文章的底部没有显示对应的评论，经排查，是因为之前的评论系统使用的路径是  <code>A/B/</code>  这样的格式，而  <code>Waline</code>  使用的是  <code>/A/B</code>  的格式，相差了一个  <code>/</code>  符号，修正过后，评论能够在文章底部正常显示。</p>\n<h1 id=\"网站访问量\"><a class=\"anchor\" href=\"#网站访问量\">#</a> 网站访问量</h1>\n<p>网站的访客数量统计使用的是 “不蒜子”，但是其无法进行初始化，因此已经搭建好一段时间的网站的数值便不准确，这里参考<a href=\"https://juejin.cn/post/7035570281414393864\">这篇文章</a>的办法，在主题文件中修改  <code>card_webinfo.pug</code>  文件，在其中添加以下内容：</p>\n<pre><code class=\"language-javascript\">    script.\n        function checkPv()&#123; \n            var init_pv = parseInt(!&#123;theme.busuanzi.init_pv&#125;)\n            var pv = document.getElementById(&quot;busuanzi_value_site_pv&quot;)\n            if (pv.innerText === '')&#123;\n            setTimeout(checkPv, 100)\n            &#125; else &#123;\n                pv.innerText = parseInt(pv.innerText) + init_pv\n            &#125;\n        &#125;\n    script checkPv()\n\n    script.\n        function checkUv()&#123; \n            var init_uv = parseInt(!&#123;theme.busuanzi.init_uv&#125;)\n            var uv = document.getElementById(&quot;busuanzi_value_site_uv&quot;)\n            if (uv.innerText === '')&#123;\n            setTimeout(checkUv, 100)\n            &#125;else&#123;\n                uv.innerText = parseInt(uv.innerText) + init_uv\n            &#125;\n        &#125;\n    script checkUv()\n</code></pre>\n<h1 id=\"在-shoka-中使用-waline\"><a class=\"anchor\" href=\"#在-shoka-中使用-waline\">#</a> 在 Shoka 中使用 Waline</h1>\n<p>如文章开头所述，使用了一个小姐姐提供的方法<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1:1\">[1:1]</a></sup>，成功将评论系统更换为了  <code>Waline</code> 。虽然如此，但是还存在一些问题。</p>\n<p>首先是和  <code>MiniValine</code>  的冲突问题，原来博客中的最近评论和文章浏览量统计是通过  <code>MiniValine</code>  的功能实现的，更换为  <code>Waline</code>  之后便失效了。虽然  <code>Waline</code>  也有提供这些功能，但是由于本人对于前端实在是苦手，因此最后也只是解决了最近评论的问题。文章浏览量统计在很多时候还是不能正常显示，只有通过刷新网页才能够正常显示，最后还是妥协成现在这个状况了。</p>\n<h2 id=\"最近评论问题\"><a class=\"anchor\" href=\"#最近评论问题\">#</a> 最近评论问题</h2>\n<p>对于最近评论，我采用的办法是在网页 DOM 结构树生成完成之后，通过  <code>Waline</code>  的 API 接口进行查询，然后输出到网页中。这里的代码参考的是刚才提到的小姐姐的  <code>GitHub</code>  中的相关文件<sup class=\"footnote-ref\"><a href=\"#fn6\" id=\"fnref6\">[6]</a></sup>。</p>\n<pre><code class=\"language-javascript\">const getRecentComments = function () &#123;\n  console.log(&quot;getRecentComments triggered.&quot;)\n  if (CONFIG.waline.serverURL) &#123;\n    var t = document.querySelector(&quot;.waline-recent-comments&quot;);\n    function renderTime(date) &#123;\n        let myDate = new Date(date).toJSON();\n        return new Date(+new Date(myDate) + 8 * 3600 * 1000).toISOString().replace(/T/g, ' ').replace(/\\.[\\d]&#123;3&#125;Z/, '')\n    &#125;\n    function formatTime(time) &#123;\n        let d = Math.floor(time / (1000 * 60 * 60 * 24));\n        let h = Math.floor(time / (1000 * 60 * 60) % 24);\n        let m = Math.floor(time / (1000 * 60) % 60);\n        let s = Math.floor(time / 1000 % 60);\n        if (d &gt; 0) &#123;\n            return d + ' 天前'\n        &#125; else if (h &gt; 0) &#123;\n            return h + ' 小时前'\n        &#125; else if (m &gt; 0) &#123;\n            return m + ' 分钟前'\n        &#125; else if (s &gt; 0) &#123;\n            return s + ' 秒钟前'\n        &#125;\n\n    &#125;\n    let str = ' @ '\n    let reg = /&lt;.*?&gt;/ig;\n    let date = new Date();\n    let url = CONFIG.waline.serverURL;\n    let count = 10;\n    var t = document.querySelector(&quot;.waline-recent-comments&quot;);\n    if (t &amp;&amp; !t.classList.contains(&quot;loaded&quot;)) &#123;\n      console.log(&quot;load recent comments&quot;);\n      fetch(url+'/comment?type=recent&amp;count='+count)\n        .then(response =&gt; response.json())\n        .then(data =&gt; &#123;\n            let arr = data.filter(item =&gt; item.pid !== undefined);\n            let i = arr.length;\n            console.log(&quot;total &quot; + i + &quot; comments&quot;);\n            for (var r = &quot;&quot;, o = 0; o &lt; i; o++) &#123;\n                let comment = arr[o].comment.replace(reg, '');\n                let gap = formatTime(date - new Date(renderTime(arr[o].createdAt)))\n                r += `&lt;li class=&quot;item&quot;&gt;&lt;a href=&quot;$&#123;arr[o].url + '#' + arr[o].objectId&#125;&quot;&gt;\n                    &lt;span class=&quot;breadcrumb&quot;&gt;$&#123;arr[o].nick + str + gap&#125;&lt;/span&gt;\n                    &lt;span&gt;$&#123;comment&#125;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;`;\n                t.innerHTML = r;\n                t.classList.add(&quot;loaded&quot;); \n                // e.config.pjax &amp;&amp; e.config.pjax.refresh(t)\n            &#125;\n        &#125;).catch(console.error)\n      &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>上述内容我添加在  <code>source/js/_app/pjax.js</code>  文件中，直接添加在最底部即可。上述函数添加后，再添加一个事件监听器：</p>\n<pre><code class=\"language-javascript\">window.addEventListener('DOMContentLoaded', getRecentComments);\n</code></pre>\n<p>该监听器表示在 DOM 资源生成完毕之后，执行该函数进行查询。</p>\n<h2 id=\"文章浏览量统计\"><a class=\"anchor\" href=\"#文章浏览量统计\">#</a> 文章浏览量统计</h2>\n<p>文章浏览量统计和最近评论的解决思路类似，也是在 DOM 结构树生成完毕之后，进行查询。</p>\n<pre><code class=\"language-javascript\">const getPageView = function () &#123;\n  console.log(&quot;getPageView triggered.&quot;);\n  if (CONFIG.waline.serverURL) &#123;\n    var t = document.querySelector(&quot;.leancloud-visitors-count&quot;);\n    let path = window.location.pathname;\n    let url = CONFIG.waline.serverURL;\n    if (t) &#123;\n      console.log(&quot;Load page views&quot;);\n      console.log(&quot;Current page path: &quot; + path);\n      let https = url+'/article?path='+path;\n      fetch(https)\n        .then(response =&gt; response.json())\n        .then(data =&gt; &#123;\n          console.log(&quot;Pageview: &quot; + data);\n          t.innerHTML = data;\n        &#125;).catch(console.error);\n    &#125;\n  &#125;\n&#125;\n\nwindow.addEventListener('DOMContentLoaded', getPageView);\n</code></pre>\n<p>除此之外，还需要修改  <code>layout/_partials/post/footer.njk</code>  这一文件中的内容。首先把  <code>if theme.valine.appId and theme.valine.appKey and theme.valine.visitor</code>  这一语句修改成  <code>if theme.waline.serverURL</code> ，否则在没有  <code>Valine</code>  配置的情况下，文章浏览量的元素不会显示。然后把  <code>&lt;span id=&quot;&#123;&#123; page.path | replace('index.html', '') &#125;&#125;&quot;...&quot;&gt;</code>  这个标签中的内容修改掉，比如我修改成了  <code>&lt;span class=&quot;item&quot;&gt;</code> 。这里之所以把  <code>&lt;span&gt;</code>  标签中的内容修改掉是因为我发现如果保留该标签，该数值一直是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>，应该是会被某个脚本执行的内容覆盖掉。具体原理还不明确。</p>\n<p>但是这个方法存在的问题是，除非刷新网页，否则浏览数据不会正常显示。</p>\n<p>尽管花了很多时间尝试别的方法，但是最后还是没有彻底解决。如果有哪位前端大佬能够不吝赐教，感激不尽。</p>\n<h2 id=\"评论系统样式问题\"><a class=\"anchor\" href=\"#评论系统样式问题\">#</a> 评论系统样式问题</h2>\n<p>由于  <code>Waline</code>  系统的默认样式和  <code>Shoka</code>  不是非常搭配，因此仍然参考小姐姐的教程<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1:2\">[1:2]</a></sup>进行了配置，但是发现并没有生效。经过排查是因为原来主题中存在的  <code>MiniValine</code>  相关的样式覆盖了配置的样式。最好把相关的  <code>MiniValine</code>  的内容全部注释掉。</p>\n<h1 id=\"终\"><a class=\"anchor\" href=\"#终\">#</a> 终</h1>\n<p>花了几天总算是把博客主题折腾好了。虽然花了不少功夫，<s>还额外给网页增加了几十次浏览量。</s> 还有些问题没有完全解决，但是能够保住这个主题还是很高兴的。<s>只要能保住太原，他要多少我给多少！</s></p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://ry.mk/2022/03/06/zai-shoka-zhong-tian-zeng-waline-ping-lun-xi-tong-bing-zi-ding-yi-yang-shi\">在 Shoka 中添增 Waline 评论系统并自定义样式</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a> <a href=\"#fnref1:1\" class=\"footnote-backref\">↩︎</a> <a href=\"#fnref1:2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://oldtang.com/2420.html#%E4%B8%89%E3%80%81%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B9%B6%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D\">Dynadot 网站注册账户、购买域名、支付宝付款、解析域名教程</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><a href=\"https://www.bandwagonhost.net/5986.html\">使用 Cloudflare 免费 DNS 服务器解析域名到搬瓦工 VPS 主机建站教程</a> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p><a href=\"https://github.com/walinejs/waline/discussions/1098\">Vercel 重新部署后 Serverless Function has crashed</a> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn5\" class=\"footnote-item\"><p><a href=\"https://github.com/walinejs/waline/issues/480\">[BUG] 配置邮件通知成功后，无法定位到评论所在的具体文章</a> <a href=\"#fnref5\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn6\" class=\"footnote-item\"><p><a href=\"https://github.com/WakabaYu/WakabaYu.github.io/blob/master/js/rcomment.js\">最近评论获取</a> <a href=\"#fnref6\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Hexo",
                "Valine",
                "Waline"
            ]
        }
    ]
}