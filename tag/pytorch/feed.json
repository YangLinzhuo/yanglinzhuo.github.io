{
    "version": "https://jsonfeed.org/version/1",
    "title": "林•初夏 • All posts by \"pytorch\" tag",
    "description": "Linn 的个人博客",
    "home_page_url": "https://linn-ylz.com",
    "items": [
        {
            "id": "https://linn-ylz.com/Computer-Science/Configs/clion-wsl2-cuda-configs/",
            "url": "https://linn-ylz.com/Computer-Science/Configs/clion-wsl2-cuda-configs/",
            "title": "通过 CLion 在 WSL2 的 CUDA 环境下使用 libtorch",
            "date_published": "2021-10-08T15:32:30.000Z",
            "content_html": "<h1 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 说明</h1>\n<p>本文记录使用  <code>CLion</code>  的  <code>IDE</code>  环境，使用  <code>WSL2</code>  环境下的  <code>CUDA</code>  来调用  <code>PyTorch</code>  的  <code>libtorch</code>  库内容。</p>\n<p><code>libtorch</code>  是  <code>PyTorch</code>  框架提供的  <code>C++</code>  接口，因为最近的课题对性能有比较高的要求，并且有自定义算子的需求，所以需要用到相关的代码。</p>\n<p><code>WSL2</code>  下的  <code>CUDA</code>  环境配置可以参考 <a href=\"/Computer-Science/Configs/wsl2-cuda-configs/\" title=\"WSL2 下的 CUDA 配置\">这篇文章</a>。</p>\n<h1 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h1>\n<h2 id=\"下载-libtorch\"><a class=\"anchor\" href=\"#下载-libtorch\">#</a> 下载  <code>libtorch</code></h2>\n<p>从  <code>PyTorch</code>  的<a href=\"https://pytorch.org/\">官方网站</a>下载自己所需版本的  <code>libtorch</code>  。注意和自己的  <code>CUDA</code>  版本也要对应。</p>\n<h2 id=\"clion-配置\"><a class=\"anchor\" href=\"#clion-配置\">#</a>  <code>CLion</code>  配置</h2>\n<p>打开  <code>CLion</code>  新建一个  <code>CUDA executable</code>  工程。然后修改  <code>CMakeLists.txt</code>  和  <code>CMake</code>  的相关配置。</p>\n<h3 id=\"wsl2-环境配置\"><a class=\"anchor\" href=\"#wsl2-环境配置\">#</a>  <code>WSL2</code>  环境配置</h3>\n<p>参考这篇<a href=\"https://zhuanlan.zhihu.com/p/272522594\">知乎文章</a>中的<strong>第三步 - 配置 Clion 内的 Toolchains</strong> 这一部分的内容。</p>\n<h3 id=\"cmake-配置\"><a class=\"anchor\" href=\"#cmake-配置\">#</a>  <code>CMake</code>  配置</h3>\n<p>按照  <code>File</code> -&gt; <code>Settings</code> -&gt; <code>Build,Execution,Development</code> -&gt; <code>CMake</code>  的路径，在其中的  <code>CMake options</code>  选项中添加  <code>-DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc</code>  的内容。如下图所示：</p>\n<p><img loading=\"lazy\" data-src=\"/images/clion-wsl2-cuda-configs-cmake-options.jpg\" alt=\"CMake options\" /></p>\n<h3 id=\"修改-cmakeliststxt\"><a class=\"anchor\" href=\"#修改-cmakeliststxt\">#</a> 修改  <code>CMakeLists.txt</code></h3>\n<p>首先将下载好的  <code>libtorch</code>  文件解压，这里我解压到了本文件夹下的  <code>libtorch</code>  文件夹中。在  <code>CMakeLists.txt</code>  文件中设置  <code>CMAKE_PREFIX_PATH</code>  变量，添加  <code>libtorch</code>  的路径。添加  <code>find_package(Torch REQUIRED)</code>  语句，以及  <code>target_link_libraries(ProjectName &quot;$&#123;TORCH_LIBRARIES&#125;&quot;)</code> ，这两行是最关键的内容。</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>ProjectName CXX CUDA<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_PREFIX_PATH</span> libtorch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>Torch REQUIRED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>ProjectName <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">TORCH_LIBRARIES</span><span class=\"token punctuation\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上方的代码中省去了  <code>CLion</code>  中默认提供的内容，以便让内容更清晰。</p>\n<h3 id=\"代码测试\"><a class=\"anchor\" href=\"#代码测试\">#</a> 代码测试</h3>\n<p>在工程中添加一个  <code>main.cpp</code>  文件，注意在  <code>CMakeLists.txt</code>  也要对应修改  <code>add_executable(ProjectName main.cpp)</code>  这一行的内容。</p>\n<p>在  <code>main.cpp</code>  中添加如下的测试代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;torch/torch.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    torch<span class=\"token double-colon punctuation\">::</span>Tensor tensor <span class=\"token operator\">=</span> torch<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> tensor <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> tensor<span class=\"token punctuation\">.</span><span class=\"token function\">cuda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果编译并运行成功，那么配置完成。</p>\n<h1 id=\"可能的错误\"><a class=\"anchor\" href=\"#可能的错误\">#</a> 可能的错误</h1>\n<p>如果碰到  <code>PyTorch requires cuDNN 7 and above.</code>  这一问题，可以参考这个 <a href=\"https://github.com/pytorch/pytorch/issues/40965\"> <code>GitHub</code>  链接</a>。问题的原因在于无法识别系统中的  <code>cuDNN</code>  版本。我自己碰到这个问题的原因是没有把  <code>cuDNN</code>  中的  <code>cudnn_version.h</code>  这一头文件复制到对应位置，在复制之后问题解决。</p>\n",
            "tags": [
                "Computer-Science",
                "CUDA",
                "Configs",
                "WSL2",
                "CLion",
                "PyTorch"
            ]
        }
    ]
}