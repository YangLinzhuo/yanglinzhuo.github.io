{
    "version": "https://jsonfeed.org/version/1",
    "title": "林•初夏 • All posts by \"configs\" tag",
    "description": "Linn 的个人博客",
    "home_page_url": "https://linn-ylz.com",
    "items": [
        {
            "id": "https://linn-ylz.com/Computer-Science/Configs/powershell-configs/",
            "url": "https://linn-ylz.com/Computer-Science/Configs/powershell-configs/",
            "title": "Powershell 配置",
            "date_published": "2023-04-01T07:44:34.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>虽然目前  <code>Windows</code>  对  <code>WSL</code>  已经支持很多常规的操作，但是有时候仍然不得不在  <code>Windows</code>  环境下执行某些命令。尤其  <code>WSL</code>  的文件  <code>IO</code>  速率相比于原生  <code>Windows</code>  系统存在一定差距，尤其是  <code>Git</code>  仓库稍微大一点便能明显感受到延迟。此外， <code>WSL</code>  的网络代理有时候也会出现故障， <code>Git</code>  操作很不方便。因此，基于  <code>Powershell</code>  配置一些支持常用操作，能够更方便自己的开发。</p>\n<h2 id=\"升级\"><a class=\"anchor\" href=\"#升级\">#</a> 升级</h2>\n<p>由于需要使用到一些模块，因此需要首先升级系统的  <code>Powershell</code>  ， <code>Windows</code>  官方提供了多种可选方式升级或安装最新的  <code>Powershell</code> ，参见<a href=\"https://learn.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.3\">在 Windows 上安装 PowerShell - PowerShell | Microsoft Learn</a>。<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<p>如果网络状况良好，那么推荐直接使用  <code>winget</code>  命令安装。否则也可以下载  <code>msi</code>  安装包安装。</p>\n<h2 id=\"autosuggestion-工具\"><a class=\"anchor\" href=\"#autosuggestion-工具\">#</a> Autosuggestion 工具</h2>\n<p><code>WSL</code>  下可以通过  <code>oh-my-zsh</code>  配置  <code>auto-suggestion</code>  工具，可以在输入命令时显示以往使用的命令。 <code>Powershell</code>  也可以配置类似的工具。<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></p>\n<p>使用该工具需要安装相关依赖：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Install-Module</span> PSReadLine <span class=\"token operator\">-</span>RequiredVersion 2<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>0</pre></td></tr></table></figure><p>安装完成后，可以使用以下命令启用 Autosuggestion 功能：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Import-Module</span> PSReadLine</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Set-PSReadLineOption</span> <span class=\"token operator\">-</span>PredictionSource History</pre></td></tr></table></figure><p>以上命令只在当前窗口有效。如果需要默认启动，需要编辑配置文件。</p>\n<h3 id=\"编辑-powershell-配置文件\"><a class=\"anchor\" href=\"#编辑-powershell-配置文件\">#</a> 编辑  <code>Powershell</code>  配置文件</h3>\n<p>首先需要检查是否已有配置文件：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Test-path</span> <span class=\"token variable\">$profile</span></pre></td></tr></table></figure><p>如果结果为  <code>True</code> ，说明已经包含该文件。为  <code>False</code> ，则需要自行生成：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">New-item</span> –<span class=\"token function\">type</span> file –force <span class=\"token variable\">$profile</span></pre></td></tr></table></figure><p>执行命令设置执行权限（该命令需要管理员权限）：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Set-ExecutionPolicy</span> RemoteSigned</pre></td></tr></table></figure><p>之后编辑该文件：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>notepad <span class=\"token variable\">$profile</span></pre></td></tr></table></figure><p>将语句添加到该配置文件中：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Import-Module</span> PSReadLine</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Set-PSReadLineOption</span> <span class=\"token operator\">-</span>PredictionSource History</pre></td></tr></table></figure><p>此外，该工具也支持其他功能：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Shows navigable menu of all options when hitting Tab</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Set-PSReadlineKeyHandler</span> <span class=\"token operator\">-</span>Key Tab <span class=\"token operator\">-</span><span class=\"token keyword\">Function</span> MenuComplete</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Autocompletion for arrow keys</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">Set-PSReadlineKeyHandler</span> <span class=\"token operator\">-</span>Key UpArrow <span class=\"token operator\">-</span><span class=\"token keyword\">Function</span> HistorySearchBackward</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">Set-PSReadlineKeyHandler</span> <span class=\"token operator\">-</span>Key DownArrow <span class=\"token operator\">-</span><span class=\"token keyword\">Function</span> HistorySearchForward</pre></td></tr></table></figure><h2 id=\"ls-命令显示高亮\"><a class=\"anchor\" href=\"#ls-命令显示高亮\">#</a>  <code>ls</code>  命令显示高亮</h2>\n<p><a href=\"https://stackoverflow.com/a/30788506\">https://stackoverflow.com/a/30788506</a></p>\n<p>通过以下命令安装  <code>Color</code>  模块，支持  <code>ls</code>  命令显示高亮<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Install-Module</span> Color</pre></td></tr></table></figure><p>之后，在配置文件中添加导入模块语句：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Import-Module</span> Color</pre></td></tr></table></figure><h2 id=\"美化\"><a class=\"anchor\" href=\"#美化\">#</a> 美化</h2>\n<p>类似于  <code>oh-my-zsh</code> ， <code>Powershell</code>  可以使用  <code>oh-my-posh</code>  来美化。</p>\n<p>使用以下命令安装  <code>oh-my-posh</code> ：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>winget install JanDeDobbeleer<span class=\"token punctuation\">.</span>OhMyPosh <span class=\"token operator\">-</span>s winget</pre></td></tr></table></figure><h3 id=\"启用主题\"><a class=\"anchor\" href=\"#启用主题\">#</a> 启用主题</h3>\n<p>使用以下命令可以激活自己想要的主题：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>oh-my-posh init pwsh <span class=\"token operator\">--</span>config <span class=\"token string\">\"<span class=\"token variable\">$env</span>:POSH_THEMES_PATH/ys.omp.json\"</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Invoke-Expression</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中  <code>ys</code>  是想要启用的主题的名称，终端主题可以在官方网站主题页面查看。<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup></p>\n<p>以上命令也可以加入到  <code>Powershell</code>  的配置文件中。</p>\n<h3 id=\"安装字体\"><a class=\"anchor\" href=\"#安装字体\">#</a> 安装字体</h3>\n<p>许多主题可能用到了特殊字符，如果终端中出现了方块显示的符号，可以下载官方推荐的 Nerd 字体。<sup class=\"footnote-ref\"><a href=\"#fn5\" id=\"fnref5\">[5]</a></sup></p>\n<p>字体下载网站：<a href=\"https://www.nerdfonts.com/font-downloads\">Nerd Fonts - Iconic font aggregator, glyphs/icons collection, &amp; fonts patcher</a></p>\n<h3 id=\"posh-git-模块\"><a class=\"anchor\" href=\"#posh-git-模块\">#</a>  <code>posh-git</code>  模块</h3>\n<p>安装  <code>posh-git</code>  模块可以为  <code>oh-my-posh</code>  提供  <code>git</code>  状态显示和命令补全等功能。使用以下命令安装：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Install-Module</span> posh-git</pre></td></tr></table></figure><p>并在配置文件中添加导入语句。</p>\n<p>注意，在某些较大的  <code>Git</code>  仓库中，该模块可能会影响实际的性能，因此可以视情况决定是否启用。</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://learn.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.3\">在 Windows 上安装 PowerShell - PowerShell | Microsoft Learn</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://dev.to/animo/fish-like-autosuggestion-in-powershell-21ec\">Fish-like Autosuggestion in Powershell - DEV Community 👩‍💻👨‍💻</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><a href=\"https://stackoverflow.com/questions/9406434/powershell-properly-coloring-get-childitem-output-once-and-for-all/30788506#30788506\">colors - Powershell: Properly coloring Get-Childitem output once and for all - Stack Overflow</a> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p><a href=\"https://ohmyposh.dev/docs/themes\">Themes | Oh My Posh</a> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn5\" class=\"footnote-item\"><p><a href=\"https://www.nerdfonts.com/font-downloads\">Nerd Fonts - Iconic font aggregator, glyphs/icons collection, &amp; fonts patcher</a> <a href=\"#fnref5\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Computer-Science",
                "Configs",
                "Powershell"
            ]
        },
        {
            "id": "https://linn-ylz.com/Computer-Science/Configs/wsl2-installation/",
            "url": "https://linn-ylz.com/Computer-Science/Configs/wsl2-installation/",
            "title": "安装 WSL2",
            "date_published": "2022-08-09T13:26:54.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>之前在自己的笔记本上安装过  <code>Windows</code>  的  <code>Linux</code>  子系统。最近新配置了一台台式机，又需要重新配置，在过程中也稍稍遇到了一些问题，在这里记录下来以备后续的使用。</p>\n<h1 id=\"安装-wsl2\"><a class=\"anchor\" href=\"#安装-wsl2\">#</a> 安装  <code>WSL2</code></h1>\n<p>这里的安装过程全程参照了这个链接的内容👉：<a href=\"https://dowww.spencerwoo.com/\">戳此链接</a>。</p>\n<p>这里以其教程作为主要参考，并补充安装过程中遇到的问题的解决方式。</p>\n<h2 id=\"开启-hyper-v-和-linux-子系统服务\"><a class=\"anchor\" href=\"#开启-hyper-v-和-linux-子系统服务\">#</a> 开启  <code>Hyper-V</code>  和  <code>Linux</code>  子系统服务</h2>\n<p>要安装子系统，首先需要开启相应的  <code>Windows</code>  系统的功能：</p>\n<ul>\n<li>Hyper-V 服务</li>\n<li>Linux 子系统服务</li>\n</ul>\n<p>在管理员权限的  <code>Powershell</code>  中执行以下两条命令进行开启：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</pre></td></tr></table></figure><p>如果以上指令无法成功，也可以在开始菜单搜索  <code>启用或关闭 Windows 功能</code> ，并在其中勾选  <code>Hyper-V</code>  和  <code>适用于 Windows 的 Linux 子系统</code>  服务。之后根据提示重启电脑。</p>\n<h2 id=\"移动-wsl2-位置\"><a class=\"anchor\" href=\"#移动-wsl2-位置\">#</a> 移动  <code>WSL2</code>  位置</h2>\n<p>电脑重启后，运行安装好的子系统，我安装的是  <code>Ubuntu</code>  子系统。</p>\n<p>子系统默认安装在  <code>C</code>  盘，这使得本就不宽裕的硬盘空间雪上加霜，因此这里对子系统的安装位置进行修改。这里参考的是一个问答中提供的答案<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>。</p>\n<p>第一步，使用指令导出子系统文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Export Ubuntu</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wsl <span class=\"token parameter variable\">--export</span> Ubuntu D:<span class=\"token punctuation\">\\</span>backup<span class=\"token punctuation\">\\</span>ubuntu.tar</pre></td></tr></table></figure><p>其中， <code>Ubuntu</code>  是子系统的名称，可以通过  <code>wsl --list</code>  指令进行查看。后续的路径则是子系统文件的导出位置，根据需要进行修改。</p>\n<p>第二步，注销原来的子系统：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Unregister the same distribution to remove it from the C: drive:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wsl <span class=\"token parameter variable\">--unregister</span> Ubuntu</pre></td></tr></table></figure><p>这里仍然需要注意不要输错了子系统的名称。</p>\n<p>第三步，导入第一步中导出的子系统文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Import Ubuntu</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wsl <span class=\"token parameter variable\">--import</span> Ubuntu D:<span class=\"token punctuation\">\\</span>wsl<span class=\"token punctuation\">\\</span> D:<span class=\"token punctuation\">\\</span>backup<span class=\"token punctuation\">\\</span>ubuntu.tar</pre></td></tr></table></figure><p>在导入之后，子系统默认是使用的  <code>root</code>  用户登录，如果需要修改，可以进入  <code>cd %userprofile%\\AppData\\Local\\Microsoft\\WindowsApps</code>  路径，运行命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ubuntu config --default-user <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span></pre></td></tr></table></figure><p><code>%userprofile%</code>  表示的是用户的文件路径，一般是  <code>C:Users\\&lt;windows-log-name&gt;</code> 。如果找不到  <code>AppData</code>  文件夹，看看是否启用了隐藏文件可见。</p>\n<p>然后指令中的  <code>&lt;username&gt;</code>  是指在第一次运行子系统时输入的用户名。执行完成之后，子系统默认使用普通用户进行登录。</p>\n<h1 id=\"安装-nodejs-服务\"><a class=\"anchor\" href=\"#安装-nodejs-服务\">#</a> 安装  <code>Node.js</code>  服务</h1>\n<p>之后本想尝试在子系统下使用  <code>Node.js</code>  来运行博客，但是后来发现子系统的文件  <code>I/O</code>  速度相比原生系统还是太慢，这里还是选择在  <code>Windows</code>  下使用  <code>Node.js</code>  来运行博客的的后台服务。下文内容暂且保留以备不时之需。</p>\n<h2 id=\"安装-n-管理-nodejs-版本\"><a class=\"anchor\" href=\"#安装-n-管理-nodejs-版本\">#</a> 安装  <code>n</code>  管理  <code>Node.js</code>  版本</h2>\n<p>在文章开头提到的子系统安装链接中，提到了使用  <code>n</code>  来管理  <code>Node.js</code>  的版本。由于直接使用官网<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>的命令安装无法成功获取脚本，因此仍然选择通过浏览器访问脚本文件，并在本地文件夹创建相应的脚本，在其中粘贴从浏览器复制的脚本内容。之后运行以下指令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">bash</span> n lts</pre></td></tr></table></figure><p>以上指令可能需要使用  <code>sudo</code>  权限。<br />\n运行之后使用  <code>node --version</code>  和  <code>npm --version</code>  确认是否安装成功。</p>\n<p>安装完成后， <code>node</code>  命令运行正常，但是  <code>npm</code>  命令遇到了以下错误：</p>\n<div class=\"note warning\">\n<p>/usr/bin/env: ‘bash\\r’: No such file or directory</p>\n</div>\n<p>这里参考了<a href=\"https://peaku.co/questions/3239-despues-de-instalar-npm-en-wsl-ubuntu-2004,-aparece-el-mensaje-%26quot;-usr-bin-env:-%26%2339;bash%5Cr%26%2339;:-no-such-file-or-directory%26quot;\">此链接</a>解决。按照其中被采纳的答案，创建  <code>/etc/wsl.conf</code>  文件，并在其中添加以下内容：</p>\n<pre><code class=\"language-test\">[interop]\nappendWindowsPath = false\n</code></pre>\n<p>然后在  <code>Powershell</code>  中使用  <code>wsl --shutdown</code>  关闭子系统，之后重新打开，运行  <code>bash n lts</code>  安装命令。之后  <code>npm --version</code>  命令能够正常显示。</p>\n<h2 id=\"安装-yarn\"><a class=\"anchor\" href=\"#安装-yarn\">#</a> 安装 yarn</h2>\n<p>接下来，使用  <code>npm</code>  安装  <code>yarn</code>  进行包管理。相比于原生的  <code>npm</code> ，该工具更加现代。使用如下命令安装  <code>yarn</code> ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> <span class=\"token function\">yarn</span></pre></td></tr></table></figure><p>运行  <code>yarn --version</code> ，成功输出版本信息则安装成功。</p>\n<h3 id=\"结合-yarn-安装-hexo\"><a class=\"anchor\" href=\"#结合-yarn-安装-hexo\">#</a> 结合 yarn 安装 Hexo</h3>\n<p>之后，参考一篇博客的内容<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>，使用  <code>yarn</code>  安装  <code>Hexo</code>  服务。</p>\n<p>使用如下指令安装  <code>hexo</code> ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-cli <span class=\"token parameter variable\">-g</span></pre></td></tr></table></figure><p>以上指令执行后，运行  <code>hexo -v</code>  如果返回版本等信息，则说明安装成功。</p>\n<p>在这里，我碰到了无法运行  <code>hexo</code>  的问题，尝试过参考  <code>StackOverflow</code>  中的答案<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup>使用  <code>yarn global add hexo-cli</code>  安装，仍然无法解决该问题。</p>\n<p>后来发现，需要在环境变量添加  <code>yarn</code>  的相关路径，具体参考<a href=\"https://classic.yarnpkg.com/en/docs/cli/global\">此链接</a>，使用如下指令添加：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">yarn</span> global bin<span class=\"token variable\">)</span></span>:<span class=\"token environment constant\">$PATH</span>\"</span></pre></td></tr></table></figure><p>之后可以成功运行  <code>hexo</code>  命令。</p>\n<h2 id=\"卸载\"><a class=\"anchor\" href=\"#卸载\">#</a> 卸载</h2>\n<p>由于子系统的文件  <code>I/O</code>  过于缓慢，因此最后还是放弃在子系统中运行  <code>Hexo</code>  相关的服务。对于安装的上述软件，使用以下指令删除：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 删除 n 包管理器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">bash</span> n uninstall</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查找 yarn 和 node_modules 等残留文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 以下例子表示查找包含 yarn 名称的文件，过滤 /mnt/ 开头的路径，这部分是 Windows 系统中的文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">locate</span> <span class=\"token string\">'*yarn*'</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token string\">'/mnt/'</span></pre></td></tr></table></figure><p>找到路径后，使用  <code>rm</code>  删除相关的文件即可。</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://superuser.com/questions/1550622/move-wsl2-file-system-to-another-drive\">https://superuser.com/questions/1550622/move-wsl2-file-system-to-another-drive</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://github.com/tj/n\"> <code>n</code>  的官方  <code>GitHub</code>  仓库</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p><a href=\"https://www.taojishu8.com/2021/01/28/%E3%80%90Hexo%E3%80%91%E2%91%A1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/\">【Hexo】②如何使用 Hexo 和 GitHub 搭建个人博客</a> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p><a href=\"https://stackoverflow.com/questions/48484265/failed-to-install-hexo-cli-on-mac\">Failed to install hexo-cli on mac</a> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Computer-Science",
                "Configs",
                "WSL2"
            ]
        },
        {
            "id": "https://linn-ylz.com/Computer-Science/Configs/oh-my-zsh-and-plugins/",
            "url": "https://linn-ylz.com/Computer-Science/Configs/oh-my-zsh-and-plugins/",
            "title": "Oh My Zsh 及插件配置",
            "date_published": "2022-01-08T15:41:04.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p><code>Oh My Zsh</code>  是一款非常流行的  <code>zsh</code>  配置管理工具，而  <code>zsh</code>  又是一款能够很好地替代  <code>bash</code>  的  <code>shell</code> 。二者的结合能够为终端提供许多非常实用的功能。</p>\n<p>我个人使用  <code>Windows</code>  系统的  <code>WSL</code> ，使用  <code>Ubuntu</code>  环境。因此下文中的命令执行环境默认都是  <code>Ubuntu</code> 。</p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<h2 id=\"安装-zsh\"><a class=\"anchor\" href=\"#安装-zsh\">#</a> 安装  <code>zsh</code></h2>\n<p>要安装  <code>Oh My Zsh</code> ，首先必须要有一个  <code>zsh</code>  环境， <code>zsh</code>  是原始的  <code>bash</code>  终端  <code>shell</code>  的一个良好的替代品。安装  <code>zsh</code>  非常简单：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">zsh</span></pre></td></tr></table></figure><p>安装完成之后，使用下列指令将默认  <code>shell</code>  改为  <code>zsh</code> ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>chsh <span class=\"token parameter variable\">-s</span> /usr/bin/zsh</pre></td></tr></table></figure><p>命令中的路径可能需要根据实际情况进行修改，可以使用  <code>which zsh</code>  命令查看  <code>zsh</code>  的路径。</p>\n<h2 id=\"安装-oh-my-zsh\"><a class=\"anchor\" href=\"#安装-oh-my-zsh\">#</a> 安装  <code>Oh My Zsh</code></h2>\n<p>安装完  <code>zsh</code>  之后，便可以开始  <code>Oh My Zsh</code>  的安装了。更详细的内容，可以参考<a href=\"https://github.com/ohmyzsh/ohmyzsh\" title=\"Oh My Zsh 官方 GitHub 链接\">官方链接</a>，本文只做简要的介绍。</p>\n<table>\n<caption id=\"ohmyzsh\" style=\"caption-side: bottom\">Oh My Zsh 安装命令</caption>\n<thead>\n<tr>\n<th style=\"text-align:left\">Method</th>\n<th style=\"text-align:left\">Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>curl</code></td>\n<td style=\"text-align:left\"><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>wget</code></td>\n<td style=\"text-align:left\"><code>sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fetch</code></td>\n<td style=\"text-align:left\"><code>sh -c &quot;$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<p>在这一步，虽然我使用了代理，也能够  <code>Ping</code>  通链接域名  <code>raw.githubusercontent.com</code> ，但是命令仍然不能执行成功。替代方法是在浏览器中直接访问这个链接，复制其中的文件内容，在本地创建  <code>install.sh</code>  脚本，并运行  <code>sh install.sh</code>  进行安装。</p>\n<p>安装完成之后，应该能够看到终端命令行的  <code>prompt</code>  会发生变化，这说明安装成功了。如果没有任何改变，可能需要重新启动终端。</p>\n<h1 id=\"主题和插件配置\"><a class=\"anchor\" href=\"#主题和插件配置\">#</a> 主题和插件配置</h1>\n<p>安装完成之后可以进一步配置主题来自定义终端的样式，或者安装其他的插件来增强终端的功能，提升终端的使用体验。</p>\n<h2 id=\"主题配置\"><a class=\"anchor\" href=\"#主题配置\">#</a> 主题配置</h2>\n<p><code>Oh My Zsh</code>  的主题需要修改  <code>~/.zshrc</code>  来进行配置，在其中找到  <code>ZSH_THEME</code>  这一变量所在的位置，根据需要将后面的主题改为自己喜欢的主题的名称，比如最经典的  <code>robbyrussell</code> 。</p>\n<p>在  <code>~/.oh-my-zsh/themes</code>  文件夹中有许多内置的主题文件，可以根据自己的喜好进行选择。如果还想要更多的主题，可以在网上进行搜索，然后放到这个文件夹下，并修改  <code>~/.zshrc</code>  中的配置。我自己基于  <code>xiong-chiamiov-plus</code>  主题自定义了一个主题。</p>\n<p>修改完成后记得执行  <code>source ~/.zshrc</code>  指令以使得修改得到应用。</p>\n<h2 id=\"插件配置\"><a class=\"anchor\" href=\"#插件配置\">#</a> 插件配置</h2>\n<p>插件配置需要在  <code>~/.zshrc</code>  中找到  <code>plugins</code>  变量所在的位置，在括号中写入需要的插件的名称，注意插件名称之间使用空格进行分隔， <code>Oh My Zsh</code>  默认启用了对  <code>git</code>  插件。</p>\n<p>在  <code>~/.oh-my-zsh/plugins</code>  路径下能找到许多其他的插件，可以根据需要进行启用。这里推荐几个我自己使用的插件。</p>\n<h3 id=\"zsh-autosuggestions\"><a class=\"anchor\" href=\"#zsh-autosuggestions\">#</a>  <code>zsh-autosuggestions</code></h3>\n<p>这一插件会根据过往输入的指令历史，依照你当前输入的指令内容推测你想要输入的完整指令，在你输入了部分指令之后，会在终端上给出提示，如果是想要的指令的话，可以使用方向键右键应用这条指令。快捷键可以根据自己的需要进行修改。</p>\n<p>执行下述命令将插件下载到  <code>$ZSH_CUSTOM/plugins</code>  文件夹下，默认位置在  <code>~/.oh-my-zsh/plugins</code>  此处：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-autosuggestions <span class=\"token variable\">$&#123;ZSH_CUSTOM<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom&#125;</span>/plugins/zsh-autosuggestions</pre></td></tr></table></figure><p>然后编辑  <code>~/.zshrc</code>  中的  <code>plugins</code>  变量：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># other plugins...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    zsh-autosuggestions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用  <code>source ~/.zshrc</code>  应用修改。</p>\n<h3 id=\"zsh-syntax-highlighting\"><a class=\"anchor\" href=\"#zsh-syntax-highlighting\">#</a>  <code>zsh-syntax-highlighting</code></h3>\n<p>这一插件能够高亮你在命令行中的输入，具体的示例可以参看官方  <code>GitHub</code>  的内容。这里我个人觉得最实用的功能就是能够显示你当前输入的命令是否正确，如果输入的指令存在，那么会以绿色进行高亮，否则会以红色进行高亮，这样能够直观地判断指令是否输入正确。</p>\n<p>和上一段的安装过程类似，执行下述命令下载插件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"token variable\">$&#123;ZSH_CUSTOM<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom&#125;</span>/plugins/zsh-syntax-highlighting</pre></td></tr></table></figure><p>然后修改  <code>~/.zshrc</code>  中的  <code>plugins</code>  变量：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>plugins<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> zsh-syntax-highlighting<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用  <code>source ~/.zshrc</code>  应用修改。</p>\n<h3 id=\"autojump\"><a class=\"anchor\" href=\"#autojump\">#</a>  <code>autojump</code></h3>\n<p>这个指令会根据过往的文件访问内容为每个文件夹确定一个权重，根据权重高低选择跳转的文件夹。例如我最近经常访问某个  <code>src</code>  文件夹，那么我输入  <code>j src</code>  指令之后，便会自动跳转到该文件夹。更多的功能可以查看该项目的 <a href=\"https://github.com/wting/autojump\"> <code>GitHub</code>  主页</a>。</p>\n<p>执行下列指令进行安装：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> autojump</pre></td></tr></table></figure><p>修改  <code>~/.zshrc</code>  的  <code>plugins</code>  变量：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>plugins<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> autojump<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用  <code>source ~/.zshrc</code>  应用修改。</p>\n<h3 id=\"material-colors\"><a class=\"anchor\" href=\"#material-colors\">#</a>  <code>material-colors</code></h3>\n<p>根据文件类型用不同颜色显示其名称。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/zpm-zsh/material-colors ~/.oh-my-zsh/custom/plugins/material-colors</pre></td></tr></table></figure><p>修改  <code>~/.zshrc</code>  的  <code>plugins</code>  变量：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>plugins<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> material-colors<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"内置插件\"><a class=\"anchor\" href=\"#内置插件\">#</a> 内置插件</h3>\n<p>出了第三方插件之外， <code>Oh My Zsh</code>  内置了许多插件，出了最常用的  <code>git</code>  插件之外，还有一些插件也值得推荐。</p>\n<h4 id=\"extract\"><a class=\"anchor\" href=\"#extract\">#</a>  <code>extract</code></h4>\n<p>用于解压文件，不用再去纠结  <code>tar</code>  一类命令的具体参数细节。</p>\n<h4 id=\"colored-man-pages\"><a class=\"anchor\" href=\"#colored-man-pages\">#</a>  <code>colored-man-pages</code></h4>\n<p>使用  <code>man</code>  命令查看其他指令的说明文档时，对内容进行高亮，使得内容更加清晰。</p>\n<h1 id=\"其他选项设置\"><a class=\"anchor\" href=\"#其他选项设置\">#</a> 其他选项设置</h1>\n<p>在某些比较到的工程项目文件夹之下， <code>git</code>  插件的  <code>prompt</code>  功能会严重影响  <code>shell</code>  的响应速度。尽管这一功能能够帮助我们查看  <code>git</code>  项目中是否有文件被修改，但是严重影响了终端的响应速度，而实际中我们经常会使用  <code>git status</code>  确认文件的修改情况，因此权衡之后，还是决定关闭这个功能以提升日常的使用体验。</p>\n<p>这里去除  <code>~/.zshrc</code>  中的以下内容的注释：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">DISABLE_UNTRACKED_FILES_DIRTY</span><span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span></pre></td></tr></table></figure><p>之后使用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> <span class=\"token parameter variable\">--add</span> oh-my-zsh.hide-dirty <span class=\"token number\">1</span></pre></td></tr></table></figure><p>停用追踪文件修改的功能以提升  <code>shell</code>  的响应速度。</p>\n<p>执行上述操作之后，实测  <code>shell</code>  的响应速度有了明显的提升。</p>\n",
            "tags": [
                "Computer-Science",
                "Configs",
                "Oh-My-Zsh"
            ]
        },
        {
            "id": "https://linn-ylz.com/Computer-Science/Configs/clion-wsl2-cuda-configs/",
            "url": "https://linn-ylz.com/Computer-Science/Configs/clion-wsl2-cuda-configs/",
            "title": "通过 CLion 在 WSL2 的 CUDA 环境下使用 libtorch",
            "date_published": "2021-10-08T15:32:30.000Z",
            "content_html": "<h1 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 说明</h1>\n<p>本文记录使用  <code>CLion</code>  的  <code>IDE</code>  环境，使用  <code>WSL2</code>  环境下的  <code>CUDA</code>  来调用  <code>PyTorch</code>  的  <code>libtorch</code>  库内容。</p>\n<p><code>libtorch</code>  是  <code>PyTorch</code>  框架提供的  <code>C++</code>  接口，因为最近的课题对性能有比较高的要求，并且有自定义算子的需求，所以需要用到相关的代码。</p>\n<p><code>WSL2</code>  下的  <code>CUDA</code>  环境配置可以参考 <a href=\"/Computer-Science/Configs/wsl2-cuda-configs/\" title=\"WSL2 下的 CUDA 配置\">这篇文章</a>。</p>\n<h1 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h1>\n<h2 id=\"下载-libtorch\"><a class=\"anchor\" href=\"#下载-libtorch\">#</a> 下载  <code>libtorch</code></h2>\n<p>从  <code>PyTorch</code>  的<a href=\"https://pytorch.org/\">官方网站</a>下载自己所需版本的  <code>libtorch</code>  。注意和自己的  <code>CUDA</code>  版本也要对应。</p>\n<h2 id=\"clion-配置\"><a class=\"anchor\" href=\"#clion-配置\">#</a>  <code>CLion</code>  配置</h2>\n<p>打开  <code>CLion</code>  新建一个  <code>CUDA executable</code>  工程。然后修改  <code>CMakeLists.txt</code>  和  <code>CMake</code>  的相关配置。</p>\n<h3 id=\"wsl2-环境配置\"><a class=\"anchor\" href=\"#wsl2-环境配置\">#</a>  <code>WSL2</code>  环境配置</h3>\n<p>参考这篇<a href=\"https://zhuanlan.zhihu.com/p/272522594\">知乎文章</a>中的<strong>第三步 - 配置 Clion 内的 Toolchains</strong> 这一部分的内容。</p>\n<h3 id=\"cmake-配置\"><a class=\"anchor\" href=\"#cmake-配置\">#</a>  <code>CMake</code>  配置</h3>\n<p>按照  <code>File</code> -&gt; <code>Settings</code> -&gt; <code>Build,Execution,Development</code> -&gt; <code>CMake</code>  的路径，在其中的  <code>CMake options</code>  选项中添加  <code>-DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc</code>  的内容。如下图所示：</p>\n<p><img loading=\"lazy\" data-src=\"/images/clion-wsl2-cuda-configs-cmake-options.jpg\" alt=\"CMake options\" /></p>\n<h3 id=\"修改-cmakeliststxt\"><a class=\"anchor\" href=\"#修改-cmakeliststxt\">#</a> 修改  <code>CMakeLists.txt</code></h3>\n<p>首先将下载好的  <code>libtorch</code>  文件解压，这里我解压到了本文件夹下的  <code>libtorch</code>  文件夹中。在  <code>CMakeLists.txt</code>  文件中设置  <code>CMAKE_PREFIX_PATH</code>  变量，添加  <code>libtorch</code>  的路径。添加  <code>find_package(Torch REQUIRED)</code>  语句，以及  <code>target_link_libraries(ProjectName &quot;$&#123;TORCH_LIBRARIES&#125;&quot;)</code> ，这两行是最关键的内容。</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>ProjectName CXX CUDA<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">CMAKE_PREFIX_PATH</span> libtorch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">find_package</span><span class=\"token punctuation\">(</span>Torch REQUIRED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>ProjectName <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">TORCH_LIBRARIES</span><span class=\"token punctuation\">&#125;</span></span>\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上方的代码中省去了  <code>CLion</code>  中默认提供的内容，以便让内容更清晰。</p>\n<h3 id=\"代码测试\"><a class=\"anchor\" href=\"#代码测试\">#</a> 代码测试</h3>\n<p>在工程中添加一个  <code>main.cpp</code>  文件，注意在  <code>CMakeLists.txt</code>  也要对应修改  <code>add_executable(ProjectName main.cpp)</code>  这一行的内容。</p>\n<p>在  <code>main.cpp</code>  中添加如下的测试代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;torch/torch.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    torch<span class=\"token double-colon punctuation\">::</span>Tensor tensor <span class=\"token operator\">=</span> torch<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> tensor <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> tensor<span class=\"token punctuation\">.</span><span class=\"token function\">cuda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果编译并运行成功，那么配置完成。</p>\n<h1 id=\"可能的错误\"><a class=\"anchor\" href=\"#可能的错误\">#</a> 可能的错误</h1>\n<p>如果碰到  <code>PyTorch requires cuDNN 7 and above.</code>  这一问题，可以参考这个 <a href=\"https://github.com/pytorch/pytorch/issues/40965\"> <code>GitHub</code>  链接</a>。问题的原因在于无法识别系统中的  <code>cuDNN</code>  版本。我自己碰到这个问题的原因是没有把  <code>cuDNN</code>  中的  <code>cudnn_version.h</code>  这一头文件复制到对应位置，在复制之后问题解决。</p>\n",
            "tags": [
                "Computer-Science",
                "CUDA",
                "Configs",
                "WSL2",
                "CLion",
                "PyTorch"
            ]
        },
        {
            "id": "https://linn-ylz.com/Computer-Science/Configs/wsl2-cuda-configs/",
            "url": "https://linn-ylz.com/Computer-Science/Configs/wsl2-cuda-configs/",
            "title": "WSL2 下的 CUDA 配置",
            "date_published": "2021-10-08T14:56:26.000Z",
            "content_html": "<h1 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 说明</h1>\n<p>本文记录  <code>Windows</code>  环境下  <code>WSL2</code>  系统中配置  <code>CUDA</code>  环境的过程。配置过程主要参考这篇<a href=\"https://zhuanlan.zhihu.com/p/350399229\">知乎文章</a>以及<a href=\"https://docs.nvidia.com/cuda/wsl-user-guide/index.html\">官方文档</a>。</p>\n<p>本文内容中省去在  <code>Windows</code>  下安装  <code>WSL2</code>  的过程，这里默认已经安装该环境。如果没有安装  <code>WSL2</code> ，可以参考官方文档中提供的说明。</p>\n<h1 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h1>\n<h2 id=\"安装驱动\"><a class=\"anchor\" href=\"#安装驱动\">#</a> 安装驱动</h2>\n<p>参考官方文档中的 <a href=\"https://docs.nvidia.com/cuda/wsl-user-guide/index.html#:~:text=Release%20Preview%20Channel.-,2.3.%C2%A0Installing%20NVIDIA%20Windows%20Drivers%20for%20CUDA%2C%20DirectX%2C%20and%20DirectML%20Support,-Download%20the%20NVIDIA\">2.3 小节</a>。</p>\n<p>下载好驱动之后直接安装，安装选项均为默认值。</p>\n<h2 id=\"安装-cuda\"><a class=\"anchor\" href=\"#安装-cuda\">#</a> 安装  <code>CUDA</code></h2>\n<p>参考官方文档中的 <a href=\"https://docs.nvidia.com/cuda/wsl-user-guide/index.html#ch03a-setting-up-cuda\">2.6 小节</a>。文档中提供了几种可选的方法，任选一种即可，如果全部执行一遍反而可能会出问题。我自己选择的是  <code>Installation of CUDA Toolkit using WSL-Ubuntu Package</code>  这一节中的方法。依照后续的指令来看， <code>WSL2</code>  需要安装  <code>Ubuntu-20.04</code>  的版本。</p>\n<p>首先依次执行以下指令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">wget</span> https://developer.download.nvidia.com/compute/cuda/11.4.0/local_installers/cuda-repo-wsl-ubuntu-11-4-local_11.4.0-1_amd64.deb</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> dpkg <span class=\"token parameter variable\">-i</span> cuda-repo-wsl-ubuntu-11-4-local_11.4.0-1_amd64.deb</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> /var/cuda-repo-wsl-ubuntu-11-4-local/7fa2af80.pub</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> cuda</pre></td></tr></table></figure><p>上述指令中安装的  <code>CUDA</code>  版本是  <code>11.4</code>  的，虽然我自己的  <code>Windows</code>  中安装的  <code>CUDA</code>  版本是  <code>10.1</code> ，但是好像不匹配也并无大碍。安装过程中可以将  <code>apt</code>  的源更换为阿里提供的镜像，具体更改方法可以参考此<a href=\"https://cloud.tencent.com/developer/article/1538304\">链接</a>。</p>\n<p>安装完成后，修改  <code>WSL2</code>  系统的环境变量。通常是在  <code>~/.bashrc</code>  文件中添加如下内容：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CUDA_HOME</span><span class=\"token operator\">=</span>/usr/local/cuda</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$CUDA_HOME</span>/bin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">LD_LIBRARY_PATH</span><span class=\"token operator\">=</span>/usr/local/cuda-11.4/lib64<span class=\"token variable\">$&#123;LD_LIBRARY_PATH<span class=\"token operator\">:+</span><span class=\"token operator\">:</span>$&#123;LD_LIBRARY_PATH&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我自己因为安装了  <code>zsh</code>  中断，所以我在  <code>~/.zshrc</code>  文件中添加上述内容。注意其中的  <code>CUDA</code>  版本号和自己的版本对应。</p>\n<p>上述修改完成后，在终端输入如下指令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nvcc <span class=\"token parameter variable\">--version</span></pre></td></tr></table></figure><p>如果得到如下类似的输出说明安装成功了：</p>\n<p><img loading=\"lazy\" data-src=\"/images/wsl2-cuda-configs-nvcc-version.jpg\" alt=\"nvcc version\" /></p>\n<h2 id=\"安装-cudnn\"><a class=\"anchor\" href=\"#安装-cudnn\">#</a> 安装  <code>cuDNN</code></h2>\n<p>在<a href=\"com/rdp/cudnn-download\">官网</a>下载和  <code>CUDA</code>  对应的  <code>cuDNN</code>  版本。可能需要预先注册账号。下载时选择  <code>cuDNN Library for Linux (x86)</code> 。</p>\n<p>下载完成后使用如下指令解压，并将文件移动到对应的文件夹：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> cudnn-11.4-linux-x64-v8.2.4.15.tgz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> <span class=\"token parameter variable\">-P</span> cuda/lib64/libcudnn* /usr/local/cuda-11.4/lib64/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span>  cuda/include/cudnn* /usr/local/cuda-11.4/include/</pre></td></tr></table></figure><p>然后为所有文件设置权限：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> a+r /usr/local/cuda-11.0/include/cudnn*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> a+r /usr/local/cuda-11.0/lib64/libcudnn*</pre></td></tr></table></figure><h2 id=\"验证安装\"><a class=\"anchor\" href=\"#验证安装\">#</a> 验证安装</h2>\n<p>执行以下指令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/cuda/samples/4_Finance/BlackScholes</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./BlackScholes</pre></td></tr></table></figure><p>如果得到  <code>Test passed</code>  的输出说明安装成功：</p>\n<p><img loading=\"lazy\" data-src=\"/images/wsl2-cuda-configs-check-cuda-installation.jpg\" alt=\"check cuda installation\" /></p>\n",
            "tags": [
                "Computer-Science",
                "CUDA",
                "Configs",
                "WSL"
            ]
        }
    ]
}