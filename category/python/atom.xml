<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://linn-ylz.com</id>
    <title>林•初夏 • Posts by &#34;python&#34; category</title>
    <link href="https://linn-ylz.com" />
    <updated>2023-06-22T02:39:47.000Z</updated>
    <category term="AncientBook" />
    <category term="Book" />
    <category term="Essay" />
    <category term="Game" />
    <category term="Music" />
    <category term="Movie" />
    <category term="Hexo" />
    <category term="Valine" />
    <category term="Waline" />
    <category term="TiddlyWiki" />
    <category term="Fishing" />
    <category term="Computer-Science" />
    <category term="Algorithm" />
    <category term="Cpp" />
    <category term="Binary-Search" />
    <category term="CUDA" />
    <category term="Coding-Interviews" />
    <category term="Configs" />
    <category term="WSL2" />
    <category term="CLion" />
    <category term="PyTorch" />
    <category term="Oh-My-Zsh" />
    <category term="Powershell" />
    <category term="WSL" />
    <category term="Emacs" />
    <category term="Programming-Pearls" />
    <category term="Python" />
    <category term="YAML" />
    <category term="dataclass" />
    <category term="Type-Annotation" />
    <category term="CUTLASS" />
    <category term="CUTE" />
    <category term="History" />
    <category term="ChineseHistory" />
    <category term="Table" />
    <entry>
        <id>https://linn-ylz.com/Computer-Science/Python/python-type-annotations-and-custom-types/</id>
        <title>Python 类型注释及自定义类型</title>
        <link rel="alternate" href="https://linn-ylz.com/Computer-Science/Python/python-type-annotations-and-custom-types/"/>
        <content type="html">&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;  以其动态特性而受到许多开发者的欢迎。但是当工程项目变得越来越复杂的时候，这一特性又往往会使得开发者头疼不已。想一想，当看着一段代码，却无法确定其中变量的特定类型，无法下手编写代码。即便强行编写完成也只能在运行时检查是否出错，这无疑会对开发效率产生很大影响。&lt;/p&gt;
&lt;h2 id=&#34;类型系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类型系统&#34;&gt;#&lt;/a&gt; 类型系统&lt;/h2&gt;
&lt;p&gt;按照一般的分类形式， &lt;code&gt;Python&lt;/code&gt;  属于动态的强类型系统的编程语言。此外， &lt;code&gt;Python&lt;/code&gt;  还支持 Duck Typing 这一特性。&lt;/p&gt;
&lt;p&gt;所谓的 Duck Typing，即：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If it walks like a duck and it quacks like a duck, then it must be a duck.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译成计算机语言，就是，加入某个变量支持 A 类型的所有操作，那么我们就可以将其视为 A 类型的变量。我们可以看这样一段代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import Iterable  
def print_items(items: Iterable):  
    for item in items:  
        print(item)  

print_items([1,2,3])  
print_items(&amp;#123;4, 5, 6&amp;#125;)  
print_items(&amp;#123;&amp;quot;A&amp;quot;: 1, &amp;quot;B&amp;quot;: 2, &amp;quot;C&amp;quot;: 3&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述的  &lt;code&gt;print_items&lt;/code&gt;  函数，只要输入的  &lt;code&gt;items&lt;/code&gt;  支持  &lt;code&gt;__iter__&lt;/code&gt;  操作，就能够成功调用该函数。即只要支持了  &lt;code&gt;__iter__&lt;/code&gt;  操作，我们就可以将  &lt;code&gt;items&lt;/code&gt;  视为  &lt;code&gt;Iterable&lt;/code&gt;  类型的变量。这里按照语法  &lt;code&gt;&amp;lt;var&amp;gt;: &amp;lt;type&amp;gt;&lt;/code&gt;  标注的  &lt;code&gt;Iterable&lt;/code&gt;  类型即  &lt;code&gt;Python&lt;/code&gt;  中的一种类型注释，用于帮助开发者更方便地理解代码，并且可以通过静态类型检查工具来检查潜在的类型错误。具体细节将在本文后续内容中介绍。&lt;/p&gt;
&lt;p&gt;虽然 Duck Typing 的特性非常便利，但是它是一把双刃剑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Duck Typing 可以增加代码的健壮性，可以通过构建抽象类接口来支持多种类型变量的调用，不需要针对某个类型编写特定代码。&lt;/li&gt;
&lt;li&gt;但是如果滥用 Duck Typing，某些时候可能会使开发者迷惑，因为支持的某些操作可能并不符合直觉。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类型注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类型注释&#34;&gt;#&lt;/a&gt; 类型注释&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;  的动态类型在编写小规模代码时非常方便，但是当代码规模变大后，就很难知晓某段复杂代码中变量的类型，只有在运行时才能够知道其类型。对于这点， &lt;code&gt;Python&lt;/code&gt;  之父 Guido van Rossum 曾经说过：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ve learned a painful lesson that for small programs dynamic typing is great. For large programs you have to have a more disciplined approach and it helps if the language actually gives you that discipline, rather than telling you &amp;quot;Well, you can do whatever you want.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了帮助解决这一困扰许多开发者的问题， &lt;code&gt;Python&lt;/code&gt;  从 3.7 开始提供了较为完备的类型支持系统。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;  的类型注释（Type Annotations），是一种类型提示（Type Hints），用于提示开发者某种变量的具体类型。其语法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def find_workers_available_for_time(open_time: datetime.datetime) -&amp;gt; list[str]:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于通常的变量定义，也可以添加类型注释：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number: int = 0  
text: str = &amp;quot;useless&amp;quot;  
values: list[float] = [1.2, 3.4, 6.0]  
worker: Worker = Worker()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在  &lt;code&gt;Python 3.8&lt;/code&gt;  之前，上述代码可能会报错，需要在代码开头添加  &lt;code&gt;from __future__ import anntations&lt;/code&gt;  语句。如果是更老版本的  &lt;code&gt;Python&lt;/code&gt; ，可以通过以下方式添加类型注释：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ratio = get_ratio(5,3) # type: float  
def get_workers(open): # type: (datetime.datetime) -&amp;gt; List[str]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是这种方式过于繁琐，可读性也不强，推荐使用较新版本的  &lt;code&gt;Python&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;许多人可能担心这些额外的代码会影响运行性能，但其实不必在意，因为这些代码并不会实际运行。&lt;/p&gt;
&lt;p&gt;除了提示开发者变量的代码类型之外，类型注释还能够帮助 IDE 提供自动补全功能。还可以此借助  &lt;code&gt;mypy&lt;/code&gt;  等 Typechecker 来帮助检查代码的正确性。&lt;/p&gt;
&lt;p&gt;虽然类型注释有很多好处，但是我们也不需要处处使用。对于简单的代码，过多的类型注释反而会影响对实际代码的阅读。&lt;/p&gt;
&lt;h2 id=&#34;复杂类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复杂类型&#34;&gt;#&lt;/a&gt; 复杂类型&lt;/h2&gt;
&lt;p&gt;在上一节中的类型注释，都是由  &lt;code&gt;Python&lt;/code&gt;  中的基础类型构成的。本节介绍一些其他类型以构建更复杂的类型注释。&lt;/p&gt;
&lt;h3 id=&#34;optional&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#optional&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Optional&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Python&lt;/code&gt;  中的变量可以动态绑定，都可以赋值为  &lt;code&gt;None&lt;/code&gt; 。为了能够在类型中表示这一点，可以使用  &lt;code&gt;Optional&lt;/code&gt;  这一类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import Optional  
maybe_a_string: Optional[str] = &amp;quot;abcdef&amp;quot; # This has a value  
maybe_a_string: Optional[str] = None # This is the absence of a value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Optional&lt;/code&gt;  能够提示这一变量有可能是  &lt;code&gt;None&lt;/code&gt;  类型。能够帮助区分空值和  &lt;code&gt;None&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;union&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#union&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Union&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Union&lt;/code&gt;  用于表示一系列独立类型的并集。例如， &lt;code&gt;Union[int, str]&lt;/code&gt;  表示某个变量可能是  &lt;code&gt;int&lt;/code&gt;  或  &lt;code&gt;str&lt;/code&gt;  中的一种。此外， &lt;code&gt;Union[int, None]&lt;/code&gt;  和  &lt;code&gt;Optional[int]&lt;/code&gt;  在表示上是等价的。&lt;/p&gt;
&lt;h3 id=&#34;literal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#literal&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Literal&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Literal&lt;/code&gt;  类型可以限制某些类型的取值范围。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import Literal  
@dataclass  
class Error:  
    error_code: Literal[1,2,3,4,5]  
    disposed_of: bool  

@dataclass  
class Snack:  
    name: Literal[&amp;quot;Pretzel&amp;quot;, &amp;quot;Hot Dog&amp;quot;, &amp;quot;Veggie Burger&amp;quot;]  
    condiments: set[Literal[&amp;quot;Mustard&amp;quot;, &amp;quot;Ketchup&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;&lt;code&gt;Literal&lt;/code&gt;  在 Python 3.8 引入。They are a little more lightweight than Python enumerations. 比枚举略轻量。&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;annotated&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#annotated&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Annotated&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Literal&lt;/code&gt;  仅能够限定某些基本的类型，提供基本限制。无法提供像 “特定长度的字符串”，“匹配特定正则表达式的字符串” 等类型限制。&lt;/p&gt;
&lt;p&gt;在这些情形下，可以使用  &lt;code&gt;Annotated&lt;/code&gt;  类型实现。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x: Annotated[int, ValueRange(3,5)]  
y: Annotated[str, MatchesRegex(&#39;[0-9]&amp;#123;4&amp;#125;&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不过，Typechecker 无法帮助我们检查这一类型的错误，因为类型过于复杂，无法通过静态分析得到结果。因此，我们仍然需要自行在代码中对输入做检查。这样能够使得变量类型取值范围更加明晰，使代码更清晰。&lt;/p&gt;
&lt;h3 id=&#34;newtype&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#newtype&#34;&gt;#&lt;/a&gt;  &lt;code&gt;NewType&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;NewType&lt;/code&gt;  能够帮助提供更复杂的类型表达。 &lt;code&gt;NewType&lt;/code&gt;  会基于已有类型创建一个新的类型，并拥有和已有类型相同的 fields 和 methods。尽管如此，这个新创建的类型和原类型是无法互换的。&lt;/p&gt;
&lt;p&gt;可以看以下的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import NewType  

class HotDog:  
    &#39;&#39;&#39; Used to represent an unservable hot dog&#39;&#39;&#39;  
    # ... snip hot dog class implementation ...  

ReadyToServeHotDog = NewType(&amp;quot;ReadyToServeHotDog&amp;quot;, HotDog)  

def dispense_to_customer(hot_dog: ReadyToServeHotDog):  
    # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码中  &lt;code&gt;ReadyToServeHotDog&lt;/code&gt;  和  &lt;code&gt;HotDog&lt;/code&gt;  是不等价的。在要求了  &lt;code&gt;ReadyToServeHotDog&lt;/code&gt;  的时候，传递  &lt;code&gt;HotDog&lt;/code&gt;  是不可行的，但是反过来是可以的。&lt;/p&gt;
&lt;p&gt;与此同时，我们需要提供一个类型转换方式，否则开发者不知道该如何得到这一新类型的对象。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def prepare_for_serving(hot_dog: HotDog) -&amp;gt; ReadyToServeHotDog:  
    assert not hot_dog.is_plated(), &amp;quot;Hot dog should not already be plated&amp;quot;  
    hot_dog.put_on_plate()  
    hot_dog.add_napkins()  
    return ReadyToServeHotDog(hot_dog)

def make_snack():  
    serve_to_customer(ReadyToServeHotDog(HotDog()))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样一来，所有的  &lt;code&gt;ReadyToServeHotDog&lt;/code&gt;  在创建时都会检查是否满足了特定的条件，保证了我们调用函数的正确性。这种函数称为 blessed function。我们需要告诉开发者，在任何时候，只能使用这些 blessed function 来创建我们构造的新类型。不过目前只有使用注释这种方法，暂时没有其他有效手段能够显式提醒开发者。&lt;/p&gt;
&lt;p&gt;实际上，我们可以通过创造新的  &lt;code&gt;class&lt;/code&gt;  来实现类似的效果，也能够提供更有效地防止非法值类型的传入。但是相对而言， &lt;code&gt;NewType&lt;/code&gt;  的实现更加轻量。&lt;/p&gt;
&lt;p&gt;需要注意， &lt;code&gt;NewType&lt;/code&gt;  和类型别名不是一回事。类型别名和原类型是完全等价的，在任意时刻，语义上可以等价互换。但是  &lt;code&gt;NewType&lt;/code&gt;  不是。&lt;/p&gt;
&lt;p&gt;例如  &lt;code&gt;IdOrName = Union[str, int]&lt;/code&gt; ， &lt;code&gt;IdOrName&lt;/code&gt;  和  &lt;code&gt;Union[str, int]&lt;/code&gt;  类型是等价的。类型别名在表示某些复杂嵌套类型的时候比较直观，比如  &lt;code&gt;IDOrNameLookup&lt;/code&gt;  显然比  &lt;code&gt;Union[dict[int, User], list[dict[str, User]]]&lt;/code&gt;  更直观。&lt;/p&gt;
&lt;h3 id=&#34;final&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#final&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Final&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Final&lt;/code&gt;  类型在 Python 3.8 中引入，该类型的值在赋值之后就无法再绑定到其他内容上。&lt;/p&gt;
&lt;p&gt;例如，我们定义的品牌的名称，不会轻易修改：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;VENDOR_NAME: Final[str] = &amp;quot;Viafore&#39;s Auto-Dog&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果开发者后续错误地尝试修改其内容，Typechecker 会报错：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def display_vendor_information():  
    vendor_info = &amp;quot;Auto-Dog v1.0&amp;quot;  
    # whoops, copy-paste error, this code should be vendor_info += VENDOR_NAME  
    VENDOR_NAME += VENDOR_NAME  
    print(vendor_info)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是需要注意， &lt;code&gt;Final&lt;/code&gt;  和  &lt;code&gt;C++&lt;/code&gt;  中的  &lt;code&gt;const&lt;/code&gt;  类型是不同的，因为 Python 并不限制通过函数修改对象的内容，它仅仅限制了将某个变量绑定到其他对象上。&lt;/p&gt;
&lt;h2 id=&#34;容器类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#容器类型&#34;&gt;#&lt;/a&gt; 容器类型&lt;/h2&gt;
&lt;p&gt;除了对一般的  &lt;code&gt;int&lt;/code&gt;  等基础类型之外， &lt;code&gt;Python&lt;/code&gt;  中还常用  &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;dict&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt;  等容器类型。相比于单个值类型的变量，其类型注释要更加复杂。&lt;/p&gt;
&lt;p&gt;看以下例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def create_author_count_mapping(cookbooks: list) -&amp;gt; dict:  
    counter = defaultdict(lambda: 0)  
    for book in cookbooks:  
        counter[book.author] += 1  
    return counter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;尽管我们知道输入是一个  &lt;code&gt;list&lt;/code&gt; ，输出是一个  &lt;code&gt;dict&lt;/code&gt; ，但是我们仍然不清楚其中对象的具体类型。&lt;/p&gt;
&lt;p&gt;我们可以为容器中的对象添加类型说明：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;AuthorToCountMapping = dict[str, int] 

def create_author_count_mapping(cookbooks: list[Cookbook]) -&amp;gt; AuthorToCountMapping:  
    counter = defaultdict(lambda: 0)  
    for book in cookbooks:  
        counter[book.author] += 1  
    return counter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里，使用类型别名表示返回值的类型，在此处的上下文语境中能更加清楚地表明代码的意图。&lt;/p&gt;
&lt;h3 id=&#34;同构数据-vs-异构数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同构数据-vs-异构数据&#34;&gt;#&lt;/a&gt; 同构数据 vs. 异构数据&lt;/h3&gt;
&lt;p&gt;在表示容器中的对象类型时，我们经常会遇到一个问题：如果容器中的对象类型并不总是一致的，我们该如何表示其类型？&lt;/p&gt;
&lt;p&gt;我们可以将容器分为 homogeneous collections（同构容器） 和 heterogeneous collections（异构容器） 两种类型，按其中元素类型是否一致来区分。&lt;/p&gt;
&lt;p&gt;在一般情况下，我们应当尽量使用同构容器，因为异构容器经常需要我们处理 special case，这很容易出错。同构容器不一定说明其中的元素是同一种原生类型等情形，只要我们能够对其使用完全相同的操作，那么就可以认定这些元素是同构的。&lt;/p&gt;
&lt;p&gt;对于异构容器，我们可以使用  &lt;code&gt;Union&lt;/code&gt;  表示其中的元素类型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Ingredient = tuple[str, int, str] # (name, quantity, units)  
Recipe = list[Union[int, Ingredient]] # the list can be servings or ingredients  
def adjust_recipe(recipe: Recipe, servings):  
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果异构容器中的类型过于复杂，我们很可能需要添加很多的类型检验代码。这时，使用一个自定义的  &lt;code&gt;class&lt;/code&gt;  类型可能更加合适。&lt;/p&gt;
&lt;p&gt;如果容器中的元素类型过多，我们还可以用  &lt;code&gt;Any&lt;/code&gt;  表示任意一种类型。这样，任意一种类型都是合法的。只是这样就无法再提供任何有效的参考信息。&lt;/p&gt;
&lt;p&gt;不过，对于  &lt;code&gt;tuple&lt;/code&gt; ，其中的元素类型经常是异构的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Cookbook = tuple[str, int] # name, page count
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然，这样的代码很容易变得难懂。因为我们需要比照每个索引对应的元素内容的含义。我们可以用  &lt;code&gt;dict&lt;/code&gt;  来替换：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;food_lab = &amp;#123;  
    &amp;quot;name&amp;quot;: &amp;quot;The Food Lab&amp;quot;,  
    &amp;quot;page_count&amp;quot;: 958  
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是如此一来， &lt;code&gt;dict&lt;/code&gt;  中的键值会映射到不同的类型上。我们需要用  &lt;code&gt;dict[str, Union[int, str]]&lt;/code&gt;  来表示该  &lt;code&gt;dict&lt;/code&gt;  的类型。&lt;/p&gt;
&lt;p&gt;对于这种复杂类型的字典，推荐用  &lt;code&gt;TypedDict&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;typeddict&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typeddict&#34;&gt;#&lt;/a&gt;  &lt;code&gt;TypedDict&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;TypedDict&lt;/code&gt;  在 Python 3.8 中引入。用于必须在字典中存储异构类型数据的情形。&lt;/p&gt;
&lt;p&gt;对于  &lt;code&gt;Json&lt;/code&gt;   &lt;code&gt;YAML&lt;/code&gt;  等文件解析得到的  &lt;code&gt;dict&lt;/code&gt; ，其中的数据通常都是异构的。如果我们控制了  &lt;code&gt;dict&lt;/code&gt;  的创建，那么我们可以使用  &lt;code&gt;dataclass&lt;/code&gt;  或者  &lt;code&gt;class&lt;/code&gt;  来管理这些数据。对于解析文件得到的内容，我们仍需要通过查看文档等方法来确认。&lt;/p&gt;
&lt;p&gt;我们可以用  &lt;code&gt;TypedDict&lt;/code&gt;  来解决这一问题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import TypedDict  
class Range(TypedDict):  
    min: float  
    max: float

class NutritionInformation(TypedDict):  
    value: int  
    unit: str  
    confidenceRange95Percent: Range  
    standardDeviation: float

class RecipeNutritionInformation(TypedDict):  
    recipes_used: int  
    calories: NutritionInformation  
    fat: NutritionInformation  
    protein: NutritionInformation  
    carbs: NutritionInformation

nutrition_information:RecipeNutritionInformation = \  
    get_nutrition_from_spoonacular(recipe_name)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码很清晰的表示了字典中的键值对类型。当字典类型发生了变化时，我们可以通过  &lt;code&gt;mypy&lt;/code&gt;  帮助检查。如果我们忘记更新该  &lt;code&gt;TypedDict&lt;/code&gt; ， &lt;code&gt;mypy&lt;/code&gt;  能够帮助我们找出错误。&lt;/p&gt;
&lt;h3 id=&#34;构建新的容器类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构建新的容器类型&#34;&gt;#&lt;/a&gt; 构建新的容器类型&lt;/h3&gt;
&lt;h4 id=&#34;generics&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generics&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Generics&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;如果确实现有类型无法表达我们想要的内容，我们可以通过  &lt;code&gt;Generics&lt;/code&gt;  帮助构建新的容器类型。&lt;/p&gt;
&lt;p&gt;Generic 类型通常表示我们不关心其中的具体类型，但是它能够帮助我们限制用户使用不正确的类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def reverse(coll: list) -&amp;gt; list:  
    return coll[::-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于  &lt;code&gt;reverse&lt;/code&gt;  函数，我们不关系其中的具体类型，但是我们知道返回的列表和传入的列表的值类型是相同的。我们可以这样表示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import TypeVar  
T = TypeVar(&#39;T&#39;)  
def reverse(coll: list[T]) -&amp;gt; list[T]:  
    return coll[::-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，一个  &lt;code&gt;int&lt;/code&gt;  类型的  &lt;code&gt;list&lt;/code&gt;  就绝不会产生一个  &lt;code&gt;str&lt;/code&gt;  类型的  &lt;code&gt;list&lt;/code&gt;  的了。&lt;/p&gt;
&lt;p&gt;基于此方式，我们可以表达更复杂的类型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import defaultdict  
from typing import Generic, TypeVar

Node = TypeVar(&amp;quot;Node&amp;quot;)  
Edge = TypeVar(&amp;quot;Edge&amp;quot;)

# directed graph  
class Graph(Generic[Node, Edge]):  
    def __init__(self):  
        self.edges: dict[Node, list[Edge]] = defaultdict(list)
        
    def add_relation(self, node: Node, to: Edge):  
        self.edges[node].append(to)
        
    def get_relations(self, node: Node) -&amp;gt; list[Edge]:  
        return self.edges[node]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，我们可以使用  &lt;code&gt;Graph&lt;/code&gt;  表示更丰富的类型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cookbooks: Graph[Cookbook, Cookbook] = Graph()  
recipes: Graph[Recipe, Recipe] = Graph()  
cookbook_recipes: Graph[Cookbook, Recipe] = Graph()  
recipes.add_relation(Recipe(&#39;Pasta Bolognese&#39;),  
                    Recipe(&#39;Pasta with Sausage and Basil&#39;))  
cookbook_recipes.add_relation(Cookbook(&#39;The Food Lab&#39;),  
                            Recipe(&#39;Pasta Bolognese&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Generic&lt;/code&gt;  能够让我们复用更多的代码，减少错误的出现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Generic&lt;/code&gt;  的其他用途：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_nutrition_info(recipe: str) -&amp;gt; Union[NutritionInfo, APIError]:  
# ...  
def get_ingredients(recipe: str) -&amp;gt; Union[list[Ingredient], APIError]:  
#...  
def get_restaurants_serving(recipe: str) -&amp;gt; Union[list[Restaurant], APIError]:  
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显然，上述方式需要我们在每个返回值中都添加一个  &lt;code&gt;APIError&lt;/code&gt;  类型，非常繁琐。我们可以这样改写：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;T = TypeVar(&amp;quot;T&amp;quot;)  
APIResponse = Union[T, APIError]  
def get_nutrition_info(recipe: str) -&amp;gt; APIResponse[NutritionInfo]:  
    # ...  
def get_ingredients(recipe: str) -&amp;gt; APIResponse[list[Ingredient]]:  
    #...  
def get_restaurants_serving(recipe: str) -&amp;gt; APIResponse[list[Restaurant]]:  
    # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;修改现有类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改现有类型&#34;&gt;#&lt;/a&gt; 修改现有类型&lt;/h3&gt;
&lt;p&gt;有些时候，我们可以在现有类型的基础上修改，以实现我们想要的效果。假定我们想要让字典支持别名，即不同的  &lt;code&gt;key&lt;/code&gt;  能够指向相同的  &lt;code&gt;value&lt;/code&gt; 。如果复制多个  &lt;code&gt;value&lt;/code&gt;  的话，在修改时容易漏掉其他对应  &lt;code&gt;key&lt;/code&gt;  的修改。这时，我们可以通过创建  &lt;code&gt;dict&lt;/code&gt;  的子类来实现以上效果。&lt;/p&gt;
&lt;p&gt;以上需求，我们可以创建一个  &lt;code&gt;dict&lt;/code&gt;  的子类来实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class NutritionalInformation(dict):  
    def __getitem__(self, key):  
    try:  
        return super().__getitem__(key)  
    except KeyError:  
        pass  
    for alias in get_aliases(key):  
        try:  
            return super().__getitem__(alias)  
        except KeyError:  
            pass  
    raise KeyError(f&amp;quot;Could not find &amp;#123;key&amp;#125; or any of its aliases&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是，以上的代码实现存在问题。当我们继承一个  &lt;code&gt;dict&lt;/code&gt;  的时候，我们无法保证内部函数会调用我们覆盖的函数实现。内置类型的许多函数使用内联代码调用来保证性能。如果只是添加额外的方法，那么继承内置类型是可行的。但是在将来，也有可能发生类似的错误，因此最好避免继承内置类型。&lt;/p&gt;
&lt;p&gt;为了解决这一问题，我们可以使用  &lt;code&gt;UserDict&lt;/code&gt; ：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import UserDict  
class NutritionalInformation(UserDict):  
    def __getitem__(self, key):  
        try:  
            return self.data[key]  
        except KeyError:  
            pass  
        for alias in get_aliases(key):  
            try:  
                return self.data[alias]  
            except KeyError:  
                pass  
        raise KeyError(f&amp;quot;Could not find &amp;#123;key&amp;#125; or any of its aliases&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以使用  &lt;code&gt;self.data&lt;/code&gt;  来获取底层的原生  &lt;code&gt;dict&lt;/code&gt;  数据。除此之外，还有  &lt;code&gt;UserList&lt;/code&gt;  和  &lt;code&gt;UserString&lt;/code&gt;  可以帮助我们对  &lt;code&gt;list&lt;/code&gt;  和  &lt;code&gt;str&lt;/code&gt;  实现类似的代码。不过需要注意，这些  &lt;code&gt;User*&lt;/code&gt;  类型可能会带来一定的性能损耗，需要根据实际情况考虑。&lt;/p&gt;
&lt;h3 id=&#34;抽象类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象类型&#34;&gt;#&lt;/a&gt; 抽象类型&lt;/h3&gt;
&lt;p&gt;通过定义抽象类，我们可以自定义容器类型。 &lt;code&gt;collection.abc&lt;/code&gt;  中提供了许多的抽象基类，我们可以根据需求使用。&lt;/p&gt;
&lt;p&gt;上一节中，我们提到了  &lt;code&gt;UserDict&lt;/code&gt;   &lt;code&gt;UserList&lt;/code&gt;   &lt;code&gt;UserString&lt;/code&gt; ，但是并没有  &lt;code&gt;UserSet&lt;/code&gt; 。本节我们基于  &lt;code&gt;abc&lt;/code&gt;  来实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;collections.abc.Set&lt;/code&gt;  提供了  &lt;code&gt;set&lt;/code&gt;  的抽象基类定义。其中包含以下函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__contains__&lt;/code&gt; ：检查是否包含某个元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__iter__&lt;/code&gt; ：用于迭代元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__len__&lt;/code&gt; ：返回容器中的元素个数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要我们实现了以上三个函数，我们就可以实现一个类似的  &lt;code&gt;set&lt;/code&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import collections  
class AliasedIngredients(collections.abc.Set):  
    def __init__(self, ingredients: set[str]):  
        self.ingredients = ingredients  
        
    def __contains__(self, value: str):  
        return value in self.ingredients or any(alias in self.ingredients for alias in get_aliases(value))  
        
    def __iter__(self):  
        return iter(self.ingredients)  
        
    def __len__(self):  
        return len(self.ingredients)

&amp;gt;&amp;gt;&amp;gt; ingredients = AliasedIngredients(&amp;#123;&#39;arugula&#39;, &#39;eggplant&#39;, &#39;pepper&#39;&amp;#125;)  
&amp;gt;&amp;gt;&amp;gt; for ingredient in ingredients:  
&amp;gt;&amp;gt;&amp;gt; print(ingredient)  
&#39;arugula&#39;  
&#39;eggplant&#39;  
&#39;pepper&#39;

&amp;gt;&amp;gt;&amp;gt; print(len(ingredients))  
3  
&amp;gt;&amp;gt;&amp;gt; print(&#39;arugula&#39; in ingredients)  
True  
&amp;gt;&amp;gt;&amp;gt; print(&#39;rocket&#39; in ingredients)  
True  
&amp;gt;&amp;gt;&amp;gt; list(ingredients | AliasedIngredients(&amp;#123;&#39;garlic&#39;&amp;#125;))  
[&#39;pepper&#39;, &#39;arugula&#39;, &#39;eggplant&#39;, &#39;garlic&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除此之外，我们还可以用  &lt;code&gt;abc&lt;/code&gt;  来提供类型注释：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def print_items(items: collections.abc.Iterable):  
    for item in items:  
        print(item)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只要对象支持  &lt;code&gt;__iter__&lt;/code&gt;  方法，那么就符合这个函数的参数要求。我们可以通过 ABC 来定义更复杂的参数类型。也是 Duck Type 的关键实现。&lt;/p&gt;
&lt;p&gt;Python 3.9 提供了 25 中不同的抽象基类。可以查看&lt;a href=&#34;https://docs.python.org/3/library/collections.abc.html#module-collections.abc&#34;&gt;文档&lt;/a&gt;了解&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;hr class=&#34;footnotes-sep&#34; /&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/collections.abc.html#module-collections.abc&#34;&gt;collections.abc — Abstract Base Classes for Containers — Python 3.11.4 documentation&lt;/a&gt; &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        <category term="Computer-Science" />
        <category term="Python" />
        <category term="Type-Annotation" />
        <updated>2023-06-22T02:39:47.000Z</updated>
    </entry>
    <entry>
        <id>https://linn-ylz.com/Computer-Science/Python/dataclass-and-YAML-transform/</id>
        <title>dataclass 与 YAML 的相互转换</title>
        <link rel="alternate" href="https://linn-ylz.com/Computer-Science/Python/dataclass-and-YAML-transform/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;在许多工程项目中，经常需要配置一些选项供用户或者员工自己使用。以人工智能领域为例， &lt;code&gt;Paddlepaddle&lt;/code&gt; 、 &lt;code&gt;mmdetection&lt;/code&gt;  等深度学习框架都需要根据需求在配置文件中配置数据、网络等相关参数。 &lt;code&gt;Paddlepaddle&lt;/code&gt;  使用  &lt;code&gt;YAML&lt;/code&gt;  格式存储配置信息， &lt;code&gt;mmdetection&lt;/code&gt;  则直接使用  &lt;code&gt;Python&lt;/code&gt;  文件来设定配置。此外， &lt;code&gt;JSON&lt;/code&gt;  格式也是常用的数据存储格式。无论何种格式，当配置信息不断增加膨胀之后，如何组织配置的结构就成为了一件迫切需要考虑的事情。&lt;/p&gt;
&lt;p&gt;这三种配置格式孰优孰劣，我无法评价。由于我目前接手的工作中使用的是  &lt;code&gt;YAML&lt;/code&gt;  格式的配置文件，因此本文主要介绍最近一段时间经过调研搜索后，我决定采用的一种配置文件组织方案。&lt;/p&gt;
&lt;p&gt;在实际阐述方案之前，有必要阐述一下  &lt;code&gt;YAML&lt;/code&gt;  和  &lt;code&gt;dataclass&lt;/code&gt;  这两个概念。如果读者对这二者比较熟悉，可以直接跳过相关部分。&lt;/p&gt;
&lt;h2 id=&#34;yaml-中的-tag&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yaml-中的-tag&#34;&gt;#&lt;/a&gt;  &lt;code&gt;YAML&lt;/code&gt;  中的  &lt;code&gt;tag&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;YAML&lt;/code&gt;  诞生于 2004 年，根据官网说法&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn1&#34; id=&#34;fnref1&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;，其有 7 条设计目标，其中，易读、不同编程语言间良好的兼容性、可扩展等特性使得其被广泛用于存储格式化的信息。&lt;/p&gt;
&lt;p&gt;关于其具体的语法，可以参考&lt;a href=&#34;https://yaml.org/spec/1.2.2/&#34;&gt;官方网站&lt;/a&gt;或者其他&lt;a href=&#34;https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html&#34;&gt;教程&lt;/a&gt;，这里不做过多介绍，本文主要介绍其  &lt;code&gt;tag&lt;/code&gt;  标签功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tag&lt;/code&gt;  可以标注  &lt;code&gt;YAML&lt;/code&gt;  中数据的类型或者其归属的对象类别，其可以是  &lt;code&gt;str&lt;/code&gt; 、 &lt;code&gt;int&lt;/code&gt; 、 &lt;code&gt;float&lt;/code&gt;  等基本类型，也可以是用户自己定义的任何有意义的类别名称。这些标签可以帮助我们在阅读或者解析的时候，更方便地判断数据的归属。&lt;/p&gt;
&lt;p&gt;我们不妨来看一个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: &#39;linn&#39;
age: 18
gender: &#39;male&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上述  &lt;code&gt;YAML&lt;/code&gt;  文件中，我们定义了三个属性，可以很清晰地看到，这三个属性描述的都是个人信息，它们在许多场景下通常会结伴出现。对于这种数据，有一个专门的称呼叫做数据泥团（Data Clumps）&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn2&#34; id=&#34;fnref2&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt;。有时候，我们会发现某些函数包含大量的参数，而这些参数往往一起出现，很显然，在通常的编程语言中，用结构体或者类来组织这种数据，比直接使用原生类型是更好的选择。而在  &lt;code&gt;YAML&lt;/code&gt;  中，我们也可以用  &lt;code&gt;tag&lt;/code&gt;  来表征这一特点：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;!Person
name: &#39;linn&#39;
age: 18
gender: &#39;male&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在  &lt;code&gt;YAML&lt;/code&gt;  中，使用  &lt;code&gt;!&lt;/code&gt;  来表示这一标识是一个  &lt;code&gt;tag&lt;/code&gt;  的名称。相比于仅仅列出属性，增加一个  &lt;code&gt;tag&lt;/code&gt;  可以使得数据的语义更加明晰。当我们的配置文件中的数据项膨胀到数十个的时候，增加一个  &lt;code&gt;tag&lt;/code&gt;  能够帮助你更好的理解配置选项的意义。&lt;/p&gt;
&lt;h2 id=&#34;解析-yaml-的-tag&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解析-yaml-的-tag&#34;&gt;#&lt;/a&gt; 解析  &lt;code&gt;YAML&lt;/code&gt;  的  &lt;code&gt;tag&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;当然，光在  &lt;code&gt;YAML&lt;/code&gt;  中定义一个  &lt;code&gt;tag&lt;/code&gt; ，并没有全部发挥出  &lt;code&gt;tag&lt;/code&gt;  的作用。 &lt;code&gt;tag&lt;/code&gt;  黑能配合编程语言，帮助解析  &lt;code&gt;YAML&lt;/code&gt;  文件中的内容。&lt;/p&gt;
&lt;p&gt;想象一下，当没有  &lt;code&gt;tag&lt;/code&gt;  的时候，我们通常是如何解析  &lt;code&gt;YAML&lt;/code&gt;  的？一般情况的代码大致如下（为了方便，直接在文件中用字符串表示  &lt;code&gt;YAML&lt;/code&gt;  内容）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yaml
class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

yaml_str = &amp;quot;&amp;quot;&amp;quot;
name: &#39;linn&#39;
age: 18
gender: &#39;male&#39;
&amp;quot;&amp;quot;&amp;quot;
content = yaml.load(yaml_str, Loader=yaml.SafeLoader)

&amp;quot;&amp;quot;&amp;quot;
content
&amp;#123;&#39;name&#39;: &#39;linn&#39;, &#39;age&#39;: 18, &#39;gender&#39;: &#39;male&#39;&amp;#125;
&amp;quot;&amp;quot;&amp;quot;

person = Person(**content)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上代码可以分为两个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取  &lt;code&gt;YAML&lt;/code&gt;  文件的内容，赋值给某个对象。一般而言，读入的内容会存储在字典或者列表中；&lt;/li&gt;
&lt;li&gt;创建某个类的对象，利用读取的  &lt;code&gt;YAML&lt;/code&gt;  内容为其初始化。&lt;br /&gt;
对于结构简单的  &lt;code&gt;YAML&lt;/code&gt;  文件，上述方法还可接受，但是如果  &lt;code&gt;YAML&lt;/code&gt;  文件变得复杂，那么按照上述方法来解析的代码便会变得繁琐。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以看下面这个例子&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn3&#34; id=&#34;fnref3&#34;&gt;[3]&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name: MyBusiness
locations:
  - &amp;quot;Hawaii&amp;quot;
  - &amp;quot;India&amp;quot;
  - &amp;quot;Japan&amp;quot;
employees:
  - !Employee
    name: Matthew Burruss
    id: 1
  - !Employee
    name: John Doe
    id: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显然，如果  &lt;code&gt;employees&lt;/code&gt;  中的内容较多，我们甚至还需要写一个循环来初始化这些对象。而通过结合  &lt;code&gt;YAML&lt;/code&gt;  的  &lt;code&gt;tag&lt;/code&gt; ，我们可以自定义  &lt;code&gt;constructor&lt;/code&gt;  来解析其内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yaml

class Employee:
  &amp;quot;&amp;quot;&amp;quot;Employee class.&amp;quot;&amp;quot;&amp;quot;
  def __init__(self, name, id):
    self._name, self._id = name, id

def employee_constructor(loader: yaml.SafeLoader, node: yaml.nodes.MappingNode) -&amp;gt; Employee:
  &amp;quot;&amp;quot;&amp;quot;Construct an employee.&amp;quot;&amp;quot;&amp;quot;
  return Employee(**loader.construct_mapping(node))

def get_loader():
  &amp;quot;&amp;quot;&amp;quot;Add constructors to PyYAML loader.&amp;quot;&amp;quot;&amp;quot;
  loader = yaml.SafeLoader
  loader.add_constructor(&amp;quot;!Employee&amp;quot;, employee_constructor)
  return loader

yaml.load(open(&amp;quot;config.yml&amp;quot;, &amp;quot;rb&amp;quot;), Loader=get_loader())
&amp;quot;&amp;quot;&amp;quot;
&amp;#123;
  &#39;name&#39;: &#39;MyBusiness&#39;,
  &#39;locations&#39;: [&#39;Hawaii&#39;, &#39;India&#39;, &#39;Japan&#39;],
  &#39;employees&#39;: [
    &amp;lt;__main__.Employee object at 0x7f0ea2694d10&amp;gt;,
    &amp;lt;__main__.Employee object at 0x7f0ea2694d90&amp;gt;
  ]
&amp;#125;
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样一来，我们可以直接生成对应的类的对象，省去了自己创建的过程。&lt;/p&gt;
&lt;h2 id=&#34;dataclass&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dataclass&#34;&gt;#&lt;/a&gt;  &lt;code&gt;dataclass&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;你是否经常面临下面的情形：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:
    def __init__(self, name, age, gender, ...):
        self.name = name
        self.age = age
        self.gender = gender
        ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当我们在  &lt;code&gt;__init__&lt;/code&gt;  函数的参数列表中敲击了一系列参数之后，又需要在  &lt;code&gt;__init__&lt;/code&gt;  函数体中，将它们一一赋值给类成员变量。一旦这些变量数量增多，这项工作就成了一项非常繁琐无趣的事情。&lt;/p&gt;
&lt;p&gt;很多时候，我们定义类只是想将一些相关的数据组织起来，但却不得不动手编写许多重复的代码。于是乎，这里就轮到  &lt;code&gt;dataclass&lt;/code&gt;  出场了。类比而言， &lt;code&gt;dataclass&lt;/code&gt;  可以看成是  &lt;code&gt;C/C++&lt;/code&gt;  中的结构体，能够方便我们将一系列的数据组合在一起，同时给每个成员指定默认值，不用再手动为成员变量赋值。&lt;/p&gt;
&lt;p&gt;可以看下面这个例子&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn4&#34; id=&#34;fnref4&#34;&gt;[4]&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dataclasses import dataclass
@dataclass
class Lang: 
	&amp;quot;&amp;quot;&amp;quot;a dataclass that describes a programming language&amp;quot;&amp;quot;&amp;quot;
	name: str = &#39;python&#39;
	strong_type: bool = True
	static_type: bool = False
	age: int = 28 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里定义了一个编程语言的类  &lt;code&gt;Lang&lt;/code&gt; ，我们从  &lt;code&gt;dataclasses&lt;/code&gt;  模块中引入了装饰器  &lt;code&gt;dataclass&lt;/code&gt; 。之后，我们在类中定义了一系列成员变量。&lt;/p&gt;
&lt;p&gt;使用上述方式定义之后，该类会自动生成一个初始化构造函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def __init__(self, name: str=&#39;python&#39;,
            strong_type: bool=True,
            static_type: bool=False,
            age: int=28):
    self.name = name
    self.strong_type = strong_type
    self.static_type = static_type
    self.age = age
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除此之外， &lt;code&gt;__repr__&lt;/code&gt;  和  &lt;code&gt;__eq__&lt;/code&gt;  函数也会自动生成，便于打印和比较。通过以上方式，再也不用每次都自己定义一个构造函数，并且为每个变量都赋值一遍，省却了繁琐的操作。&lt;/p&gt;
&lt;p&gt;执行效果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Lang()
Lang(name=&#39;python&#39;, strong_type=True, static_type=False, age=28)
&amp;gt;&amp;gt;&amp;gt; Lang(&#39;js&#39;, False, False, 23)
Lang(name=&#39;js&#39;, strong_type=False, static_type=False, age=23)
&amp;gt;&amp;gt;&amp;gt; Lang(&#39;js&#39;, False, False, 23) == Lang()
False
&amp;gt;&amp;gt;&amp;gt; Lang(&#39;python&#39;, True, False, 28) == Lang()
True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除此之外， &lt;code&gt;dataclass&lt;/code&gt;  可以通过  &lt;code&gt;asdict&lt;/code&gt;  或者  &lt;code&gt;astuple&lt;/code&gt;  生成类成员的字典或者元组。&lt;/p&gt;
&lt;p&gt;需要注意的是，对于  &lt;code&gt;mutable&lt;/code&gt;  类型的变量，如  &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;map&lt;/code&gt;  等，推荐使用  &lt;code&gt;field&lt;/code&gt;  来初始化：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dataclasses import dataclass, field
@dataclass
class C:
    mylist: List[int] = field(default_factory=list)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其他功能的详细介绍，可以参考&lt;a href=&#34;https://www.cnblogs.com/apocelipes/p/10284346.html&#34;&gt;这篇博客&lt;/a&gt;或者&lt;a href=&#34;https://peps.python.org/pep-0557/&#34;&gt;官方网站&lt;/a&gt;的说明。&lt;/p&gt;
&lt;h2 id=&#34;结合-dataclass-和-yaml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结合-dataclass-和-yaml&#34;&gt;#&lt;/a&gt; 结合  &lt;code&gt;dataclass&lt;/code&gt;  和  &lt;code&gt;YAML&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;在介绍以上两部分内容之后，我们可以结合  &lt;code&gt;dataclass&lt;/code&gt;  和  &lt;code&gt;YAML&lt;/code&gt;  来方便地构建配置类，并从  &lt;code&gt;YAML&lt;/code&gt;  文件导入，或者导出到  &lt;code&gt;YAML&lt;/code&gt;  文件。&lt;/p&gt;
&lt;p&gt;参考了相关资料后&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn3&#34; id=&#34;fnref3:1&#34;&gt;[3:1]&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn5&#34; id=&#34;fnref5&#34;&gt;[5]&lt;/a&gt;&lt;/sup&gt;，我编写了下面的参数类模板。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
import yaml
from yaml import SafeLoader, SafeDumper
from yaml.nodes import MappingNode
from dataclasses import dataclass, asdict, field, is_dataclass
from typing import Type
from typing_extensions import Self


@dataclass
class BaseConfig(object):
    @classmethod
    def constructor(cls, loader: SafeLoader, node: MappingNode) -&amp;gt; Self:
        &amp;quot;&amp;quot;&amp;quot;Construct an instance.&amp;quot;&amp;quot;&amp;quot;
        return cls(**loader.construct_mapping(node))

    @classmethod
    def loader(cls, safe_loader: SafeLoader) -&amp;gt; Type[SafeLoader]:
        &amp;quot;&amp;quot;&amp;quot;Add constructors to PyYAML loader.&amp;quot;&amp;quot;&amp;quot;
        safe_loader = yaml.SafeLoader
        safe_loader.add_constructor(f&amp;quot;!&amp;#123;cls.__name__&amp;#125;&amp;quot;, cls.constructor)
        for (name, data_fields) in cls.__dataclass_fields__.items():
            cls_type = data_fields.type
            if is_dataclass(cls_type):
                safe_loader.add_constructor(f&amp;quot;!&amp;#123;cls_type.__name__&amp;#125;&amp;quot;, cls_type.constructor)
                safe_loader = cls_type.loader(SafeLoader)
        return safe_loader

    @classmethod
    def representer(cls, dumper: SafeDumper, config) -&amp;gt; MappingNode:
        &amp;quot;&amp;quot;&amp;quot;Represent an instance as a YAML mapping node.&amp;quot;&amp;quot;&amp;quot;
        return dumper.represent_mapping(f&amp;quot;!&amp;#123;cls.__name__&amp;#125;&amp;quot;, config.__dict__)

    @classmethod
    def dumper(cls, safe_dumper: SafeDumper) -&amp;gt; Type[SafeDumper]:
        &amp;quot;&amp;quot;&amp;quot;Add representers to a YAML seriailizer.&amp;quot;&amp;quot;&amp;quot;
        # safe_dumper = yaml.SafeDumper
        safe_dumper.add_representer(cls, cls.representer)
        for (name, data_fields) in cls.__dataclass_fields__.items():
            cls_type = data_fields.type
            if is_dataclass(cls_type):
                safe_dumper.add_representer(cls_type, cls_type.representer)
                safe_dumper = cls_type.dumper(safe_dumper)
        return safe_dumper


@dataclass
class DatasetConfig(BaseConfig):
    data_root_path: str = &amp;quot;./data/coco&amp;quot;
    train_path: str = &amp;quot;./data/coco/train&amp;quot;
    train_ann_path: str = &amp;quot;./data/coco/annotations/instances_train2017.json&amp;quot;


@dataclass
class COCODatasetConfig(BaseConfig):
    name: str = &amp;quot;COCO&amp;quot;
    num_classes: int = 80
    dataset: DatasetConfig = field(default_factory=DatasetConfig)


@dataclass
class COCODataConfig(BaseConfig):
    train_data: COCODatasetConfig = field(default_factory=COCODatasetConfig)
    val_data: COCODatasetConfig = field(default_factory=COCODatasetConfig)

    # If you want dump without tag, change the tag name of the class
    # to &#39;tag:yaml.org,2002:map&#39;, this is the default map type of YAML
    # @classmethod
    # def representer(cls, dumper: SafeDumper, config) -&amp;gt; MappingNode:
    #     &amp;quot;&amp;quot;&amp;quot;Represent an instance as a YAML mapping node.&amp;quot;&amp;quot;&amp;quot;
    #     return dumper.represent_mapping(&amp;quot;tag:yaml.org,2002:map&amp;quot;, config.__dict__)

if __name__ == &amp;quot;__main__&amp;quot;:
    # config = COCODatasetConfig()
    # config = yaml.load(open(&amp;quot;output.yaml&amp;quot;, &amp;quot;rb&amp;quot;), Loader=COCODataConfig.loader(SafeLoader))
    config = COCODataConfig()
    print(config)
    print(asdict(config))
    # config = DatasetConfig()
    # with open(&amp;quot;output.yaml&amp;quot;, &amp;quot;w&amp;quot;) as stream:
        # stream.write(yaml.dump(config, Dumper=COCODatasetConfig.dumper()))
        # stream.write(yaml.dump(config, Dumper=COCODataConfig.dumper(SafeDumper)))
    # yaml.dump(config, sys.stdout, Dumper=COCODatasetConfig.dumper(), sort_keys=False)
    yaml.dump(config, sys.stdout, Dumper=COCODataConfig.dumper(SafeDumper), sort_keys=False)


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述模板可以支持多个  &lt;code&gt;dataclass&lt;/code&gt;  类别的嵌套，并且会保留每个类别的  &lt;code&gt;tag&lt;/code&gt;  标签，便于将来再读取配置的内容。&lt;/p&gt;
&lt;p&gt;如果不想输出某个  &lt;code&gt;dataclass&lt;/code&gt;  类的  &lt;code&gt;tag&lt;/code&gt; ，则重载其  &lt;code&gt;representer&lt;/code&gt;  和  &lt;code&gt;loader&lt;/code&gt;  函数，修改其中设定的  &lt;code&gt;tag&lt;/code&gt;  名称为  &lt;code&gt;tag:yaml.org,2002:map&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn6&#34; id=&#34;fnref6&#34;&gt;[6]&lt;/a&gt;&lt;/sup&gt;。其他类型可以参看官方文档&lt;sup class=&#34;footnote-ref&#34;&gt;&lt;a href=&#34;#fn7&#34; id=&#34;fnref7&#34;&gt;[7]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;如果某些变量依赖于其他变量的赋值，可以使用  &lt;code&gt;__post_init__&lt;/code&gt;  方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@dataclass
class C:
    a: int
    b: int
    c: int = field(init=False)
 
    def __post_init__(self):
        self.c = self.a + self.b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此外，如果需要额外的参数用于初始化，但是之后的程序中不需要用到它的话，可以指定一个  &lt;code&gt;field&lt;/code&gt;  的类型注解为  &lt;code&gt;dataclasses.InitVar&lt;/code&gt; ，那么这个  &lt;code&gt;field&lt;/code&gt;  将只能在初始化过程中（ &lt;code&gt;__init__&lt;/code&gt;  和  &lt;code&gt;__post_init__&lt;/code&gt; ）使用，当初始化完成后访问该  &lt;code&gt;field&lt;/code&gt;  会返回一个 &lt;code&gt;dataclasses.Field&lt;/code&gt;  对象而不是  &lt;code&gt;field&lt;/code&gt;  原本的值，也就是该  &lt;code&gt;field&lt;/code&gt;  不再是一个可访问的数据对象。比如一个由数据库对象，它&lt;strong&gt;只需要在初始化的过程中被访问&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@dataclass
class C:
    i: int
    j: int = None
    database: InitVar[DatabaseType] = None
 
    def __post_init__(self, database):
        if self.j is None and database is not None:
            self.j = database.lookup(&#39;j&#39;)
 
c = C(10, database=my_database)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;database&lt;/code&gt;  只在初始化过程中用于初始化  &lt;code&gt;i, j&lt;/code&gt;  ，后续无法再访问，可以认为是传递了一个额外的参数用于初始化操作。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;通过以上内容，我们得到了一个用于  &lt;code&gt;YAML&lt;/code&gt;  格式的通用模板类，用于导入或者导出相关的配置内容，帮助我们更好地管理配置文件中参数的结构，提高工作效率。&amp;lt;span class=&amp;quot;spoiler&amp;quot;&amp;gt; 减少加班 &amp;lt;/span&amp;gt;&lt;/p&gt;
&lt;hr class=&#34;footnotes-sep&#34; /&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;ol class=&#34;footnotes-list&#34;&gt;
&lt;li id=&#34;fn1&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://yaml.org/spec/1.2.2/&#34;&gt;YAML Ain’t Markup Language (YAML™) revision 1.2.2&lt;/a&gt; &lt;a href=&#34;#fnref1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn2&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://refactoring.guru/smells/data-clumps&#34;&gt;Data Clumps (refactoring.guru)&lt;/a&gt; &lt;a href=&#34;#fnref2&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn3&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;来自博客 &lt;a href=&#34;https://matthewpburruss.com/post/yaml/&#34;&gt;A Powerful Python Trick: Custom YAML tags &amp;amp; PyYAML | Matthew Burruss (matthewpburruss.com)&lt;/a&gt; &lt;a href=&#34;#fnref3&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt; &lt;a href=&#34;#fnref3:1&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn4&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;来自博客 &lt;a href=&#34;https://www.cnblogs.com/apocelipes/p/10284346.html&#34;&gt;Python3.7 dataclass 使用指南 - apocelipes - 博客园 (cnblogs.com)&lt;/a&gt; &lt;a href=&#34;#fnref4&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn5&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://qiita.com/kzmssk/items/483f25f47e0ed10aa948&#34;&gt;dataclass を使った YAML 形式で保存／ロード可能な設定クラス - Qiita&lt;/a&gt; &lt;a href=&#34;#fnref5&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn6&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://caosiyang.github.io/posts/2020/08/30/pyyaml/&#34;&gt;PyYAML 笔记 - 一个单板滑雪爱好者的编程笔记 (caosiyang.github.io)&lt;/a&gt; &lt;a href=&#34;#fnref6&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn7&#34; class=&#34;footnote-item&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://yaml.org/type/index.html&#34;&gt;Language-Independent Types for YAML™ Version 1.1&lt;/a&gt; &lt;a href=&#34;#fnref7&#34; class=&#34;footnote-backref&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        <category term="Computer-Science" />
        <category term="Algorithm" />
        <category term="Python" />
        <category term="YAML" />
        <category term="dataclass" />
        <updated>2022-11-10T15:17:33.000Z</updated>
    </entry>
</feed>
