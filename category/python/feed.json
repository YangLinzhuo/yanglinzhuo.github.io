{
    "version": "https://jsonfeed.org/version/1",
    "title": "林•初夏 • All posts by \"python\" category",
    "description": "Linn 的个人博客",
    "home_page_url": "https://linn-ylz.com",
    "items": [
        {
            "id": "https://linn-ylz.com/Computer-Science/Python/python-type-annotations-and-custom-types/",
            "url": "https://linn-ylz.com/Computer-Science/Python/python-type-annotations-and-custom-types/",
            "title": "Python 类型注释及自定义类型",
            "date_published": "2023-06-22T02:39:47.000Z",
            "content_html": "<p><code>Python</code>  以其动态特性而受到许多开发者的欢迎。但是当工程项目变得越来越复杂的时候，这一特性又往往会使得开发者头疼不已。想一想，当看着一段代码，却无法确定其中变量的特定类型，无法下手编写代码。即便强行编写完成也只能在运行时检查是否出错，这无疑会对开发效率产生很大影响。</p>\n<h2 id=\"类型系统\"><a class=\"anchor\" href=\"#类型系统\">#</a> 类型系统</h2>\n<p>按照一般的分类形式， <code>Python</code>  属于动态的强类型系统的编程语言。此外， <code>Python</code>  还支持 Duck Typing 这一特性。</p>\n<p>所谓的 Duck Typing，即：</p>\n<blockquote>\n<p>If it walks like a duck and it quacks like a duck, then it must be a duck.</p>\n</blockquote>\n<p>翻译成计算机语言，就是，加入某个变量支持 A 类型的所有操作，那么我们就可以将其视为 A 类型的变量。我们可以看这样一段代码：</p>\n<pre><code class=\"language-python\">from typing import Iterable  \ndef print_items(items: Iterable):  \n    for item in items:  \n        print(item)  \n\nprint_items([1,2,3])  \nprint_items(&#123;4, 5, 6&#125;)  \nprint_items(&#123;&quot;A&quot;: 1, &quot;B&quot;: 2, &quot;C&quot;: 3&#125;)\n</code></pre>\n<p>上述的  <code>print_items</code>  函数，只要输入的  <code>items</code>  支持  <code>__iter__</code>  操作，就能够成功调用该函数。即只要支持了  <code>__iter__</code>  操作，我们就可以将  <code>items</code>  视为  <code>Iterable</code>  类型的变量。这里按照语法  <code>&lt;var&gt;: &lt;type&gt;</code>  标注的  <code>Iterable</code>  类型即  <code>Python</code>  中的一种类型注释，用于帮助开发者更方便地理解代码，并且可以通过静态类型检查工具来检查潜在的类型错误。具体细节将在本文后续内容中介绍。</p>\n<p>虽然 Duck Typing 的特性非常便利，但是它是一把双刃剑：</p>\n<ul>\n<li>Duck Typing 可以增加代码的健壮性，可以通过构建抽象类接口来支持多种类型变量的调用，不需要针对某个类型编写特定代码。</li>\n<li>但是如果滥用 Duck Typing，某些时候可能会使开发者迷惑，因为支持的某些操作可能并不符合直觉。</li>\n</ul>\n<h2 id=\"类型注释\"><a class=\"anchor\" href=\"#类型注释\">#</a> 类型注释</h2>\n<p><code>Python</code>  的动态类型在编写小规模代码时非常方便，但是当代码规模变大后，就很难知晓某段复杂代码中变量的类型，只有在运行时才能够知道其类型。对于这点， <code>Python</code>  之父 Guido van Rossum 曾经说过：</p>\n<blockquote>\n<p>I’ve learned a painful lesson that for small programs dynamic typing is great. For large programs you have to have a more disciplined approach and it helps if the language actually gives you that discipline, rather than telling you &quot;Well, you can do whatever you want.&quot;</p>\n</blockquote>\n<p>为了帮助解决这一困扰许多开发者的问题， <code>Python</code>  从 3.7 开始提供了较为完备的类型支持系统。</p>\n<p><code>Python</code>  的类型注释（Type Annotations），是一种类型提示（Type Hints），用于提示开发者某种变量的具体类型。其语法如下：</p>\n<pre><code class=\"language-python\">def find_workers_available_for_time(open_time: datetime.datetime) -&gt; list[str]:\n</code></pre>\n<p>对于通常的变量定义，也可以添加类型注释：</p>\n<pre><code class=\"language-python\">number: int = 0  \ntext: str = &quot;useless&quot;  \nvalues: list[float] = [1.2, 3.4, 6.0]  \nworker: Worker = Worker()\n</code></pre>\n<p>在  <code>Python 3.8</code>  之前，上述代码可能会报错，需要在代码开头添加  <code>from __future__ import anntations</code>  语句。如果是更老版本的  <code>Python</code> ，可以通过以下方式添加类型注释：</p>\n<pre><code class=\"language-python\">ratio = get_ratio(5,3) # type: float  \ndef get_workers(open): # type: (datetime.datetime) -&gt; List[str]\n</code></pre>\n<p>但是这种方式过于繁琐，可读性也不强，推荐使用较新版本的  <code>Python</code> 。</p>\n<p>许多人可能担心这些额外的代码会影响运行性能，但其实不必在意，因为这些代码并不会实际运行。</p>\n<p>除了提示开发者变量的代码类型之外，类型注释还能够帮助 IDE 提供自动补全功能。还可以此借助  <code>mypy</code>  等 Typechecker 来帮助检查代码的正确性。</p>\n<p>虽然类型注释有很多好处，但是我们也不需要处处使用。对于简单的代码，过多的类型注释反而会影响对实际代码的阅读。</p>\n<h2 id=\"复杂类型\"><a class=\"anchor\" href=\"#复杂类型\">#</a> 复杂类型</h2>\n<p>在上一节中的类型注释，都是由  <code>Python</code>  中的基础类型构成的。本节介绍一些其他类型以构建更复杂的类型注释。</p>\n<h3 id=\"optional\"><a class=\"anchor\" href=\"#optional\">#</a>  <code>Optional</code></h3>\n<p><code>Python</code>  中的变量可以动态绑定，都可以赋值为  <code>None</code> 。为了能够在类型中表示这一点，可以使用  <code>Optional</code>  这一类型。</p>\n<pre><code class=\"language-python\">from typing import Optional  \nmaybe_a_string: Optional[str] = &quot;abcdef&quot; # This has a value  \nmaybe_a_string: Optional[str] = None # This is the absence of a value\n</code></pre>\n<p><code>Optional</code>  能够提示这一变量有可能是  <code>None</code>  类型。能够帮助区分空值和  <code>None</code> 。</p>\n<h3 id=\"union\"><a class=\"anchor\" href=\"#union\">#</a>  <code>Union</code></h3>\n<p><code>Union</code>  用于表示一系列独立类型的并集。例如， <code>Union[int, str]</code>  表示某个变量可能是  <code>int</code>  或  <code>str</code>  中的一种。此外， <code>Union[int, None]</code>  和  <code>Optional[int]</code>  在表示上是等价的。</p>\n<h3 id=\"literal\"><a class=\"anchor\" href=\"#literal\">#</a>  <code>Literal</code></h3>\n<p><code>Literal</code>  类型可以限制某些类型的取值范围。</p>\n<pre><code class=\"language-python\">from typing import Literal  \n@dataclass  \nclass Error:  \n    error_code: Literal[1,2,3,4,5]  \n    disposed_of: bool  \n\n@dataclass  \nclass Snack:  \n    name: Literal[&quot;Pretzel&quot;, &quot;Hot Dog&quot;, &quot;Veggie Burger&quot;]  \n    condiments: set[Literal[&quot;Mustard&quot;, &quot;Ketchup&quot;]]\n</code></pre>\n<div class=\"note info\">\n<p><code>Literal</code>  在 Python 3.8 引入。They are a little more lightweight than Python enumerations. 比枚举略轻量。</p>\n</div>\n<h3 id=\"annotated\"><a class=\"anchor\" href=\"#annotated\">#</a>  <code>Annotated</code></h3>\n<p><code>Literal</code>  仅能够限定某些基本的类型，提供基本限制。无法提供像 “特定长度的字符串”，“匹配特定正则表达式的字符串” 等类型限制。</p>\n<p>在这些情形下，可以使用  <code>Annotated</code>  类型实现。</p>\n<pre><code class=\"language-python\">x: Annotated[int, ValueRange(3,5)]  \ny: Annotated[str, MatchesRegex('[0-9]&#123;4&#125;')]\n</code></pre>\n<p>不过，Typechecker 无法帮助我们检查这一类型的错误，因为类型过于复杂，无法通过静态分析得到结果。因此，我们仍然需要自行在代码中对输入做检查。这样能够使得变量类型取值范围更加明晰，使代码更清晰。</p>\n<h3 id=\"newtype\"><a class=\"anchor\" href=\"#newtype\">#</a>  <code>NewType</code></h3>\n<p><code>NewType</code>  能够帮助提供更复杂的类型表达。 <code>NewType</code>  会基于已有类型创建一个新的类型，并拥有和已有类型相同的 fields 和 methods。尽管如此，这个新创建的类型和原类型是无法互换的。</p>\n<p>可以看以下的例子：</p>\n<pre><code class=\"language-python\">from typing import NewType  \n\nclass HotDog:  \n    ''' Used to represent an unservable hot dog'''  \n    # ... snip hot dog class implementation ...  \n\nReadyToServeHotDog = NewType(&quot;ReadyToServeHotDog&quot;, HotDog)  \n\ndef dispense_to_customer(hot_dog: ReadyToServeHotDog):  \n    # ...\n</code></pre>\n<p>代码中  <code>ReadyToServeHotDog</code>  和  <code>HotDog</code>  是不等价的。在要求了  <code>ReadyToServeHotDog</code>  的时候，传递  <code>HotDog</code>  是不可行的，但是反过来是可以的。</p>\n<p>与此同时，我们需要提供一个类型转换方式，否则开发者不知道该如何得到这一新类型的对象。</p>\n<pre><code class=\"language-python\">def prepare_for_serving(hot_dog: HotDog) -&gt; ReadyToServeHotDog:  \n    assert not hot_dog.is_plated(), &quot;Hot dog should not already be plated&quot;  \n    hot_dog.put_on_plate()  \n    hot_dog.add_napkins()  \n    return ReadyToServeHotDog(hot_dog)\n\ndef make_snack():  \n    serve_to_customer(ReadyToServeHotDog(HotDog()))\n</code></pre>\n<p>这样一来，所有的  <code>ReadyToServeHotDog</code>  在创建时都会检查是否满足了特定的条件，保证了我们调用函数的正确性。这种函数称为 blessed function。我们需要告诉开发者，在任何时候，只能使用这些 blessed function 来创建我们构造的新类型。不过目前只有使用注释这种方法，暂时没有其他有效手段能够显式提醒开发者。</p>\n<p>实际上，我们可以通过创造新的  <code>class</code>  来实现类似的效果，也能够提供更有效地防止非法值类型的传入。但是相对而言， <code>NewType</code>  的实现更加轻量。</p>\n<p>需要注意， <code>NewType</code>  和类型别名不是一回事。类型别名和原类型是完全等价的，在任意时刻，语义上可以等价互换。但是  <code>NewType</code>  不是。</p>\n<p>例如  <code>IdOrName = Union[str, int]</code> ， <code>IdOrName</code>  和  <code>Union[str, int]</code>  类型是等价的。类型别名在表示某些复杂嵌套类型的时候比较直观，比如  <code>IDOrNameLookup</code>  显然比  <code>Union[dict[int, User], list[dict[str, User]]]</code>  更直观。</p>\n<h3 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a>  <code>Final</code></h3>\n<p><code>Final</code>  类型在 Python 3.8 中引入，该类型的值在赋值之后就无法再绑定到其他内容上。</p>\n<p>例如，我们定义的品牌的名称，不会轻易修改：</p>\n<pre><code class=\"language-python\">VENDOR_NAME: Final[str] = &quot;Viafore's Auto-Dog&quot;\n</code></pre>\n<p>如果开发者后续错误地尝试修改其内容，Typechecker 会报错：</p>\n<pre><code class=\"language-python\">def display_vendor_information():  \n    vendor_info = &quot;Auto-Dog v1.0&quot;  \n    # whoops, copy-paste error, this code should be vendor_info += VENDOR_NAME  \n    VENDOR_NAME += VENDOR_NAME  \n    print(vendor_info)\n</code></pre>\n<p>但是需要注意， <code>Final</code>  和  <code>C++</code>  中的  <code>const</code>  类型是不同的，因为 Python 并不限制通过函数修改对象的内容，它仅仅限制了将某个变量绑定到其他对象上。</p>\n<h2 id=\"容器类型\"><a class=\"anchor\" href=\"#容器类型\">#</a> 容器类型</h2>\n<p>除了对一般的  <code>int</code>  等基础类型之外， <code>Python</code>  中还常用  <code>list</code> 、 <code>dict</code> 、 <code>set</code>  等容器类型。相比于单个值类型的变量，其类型注释要更加复杂。</p>\n<p>看以下例子：</p>\n<pre><code class=\"language-python\">def create_author_count_mapping(cookbooks: list) -&gt; dict:  \n    counter = defaultdict(lambda: 0)  \n    for book in cookbooks:  \n        counter[book.author] += 1  \n    return counter\n</code></pre>\n<p>尽管我们知道输入是一个  <code>list</code> ，输出是一个  <code>dict</code> ，但是我们仍然不清楚其中对象的具体类型。</p>\n<p>我们可以为容器中的对象添加类型说明：</p>\n<pre><code class=\"language-python\">AuthorToCountMapping = dict[str, int] \n\ndef create_author_count_mapping(cookbooks: list[Cookbook]) -&gt; AuthorToCountMapping:  \n    counter = defaultdict(lambda: 0)  \n    for book in cookbooks:  \n        counter[book.author] += 1  \n    return counter\n</code></pre>\n<p>这里，使用类型别名表示返回值的类型，在此处的上下文语境中能更加清楚地表明代码的意图。</p>\n<h3 id=\"同构数据-vs-异构数据\"><a class=\"anchor\" href=\"#同构数据-vs-异构数据\">#</a> 同构数据 vs. 异构数据</h3>\n<p>在表示容器中的对象类型时，我们经常会遇到一个问题：如果容器中的对象类型并不总是一致的，我们该如何表示其类型？</p>\n<p>我们可以将容器分为 homogeneous collections（同构容器） 和 heterogeneous collections（异构容器） 两种类型，按其中元素类型是否一致来区分。</p>\n<p>在一般情况下，我们应当尽量使用同构容器，因为异构容器经常需要我们处理 special case，这很容易出错。同构容器不一定说明其中的元素是同一种原生类型等情形，只要我们能够对其使用完全相同的操作，那么就可以认定这些元素是同构的。</p>\n<p>对于异构容器，我们可以使用  <code>Union</code>  表示其中的元素类型：</p>\n<pre><code class=\"language-python\">Ingredient = tuple[str, int, str] # (name, quantity, units)  \nRecipe = list[Union[int, Ingredient]] # the list can be servings or ingredients  \ndef adjust_recipe(recipe: Recipe, servings):  \n# ...\n</code></pre>\n<p>如果异构容器中的类型过于复杂，我们很可能需要添加很多的类型检验代码。这时，使用一个自定义的  <code>class</code>  类型可能更加合适。</p>\n<p>如果容器中的元素类型过多，我们还可以用  <code>Any</code>  表示任意一种类型。这样，任意一种类型都是合法的。只是这样就无法再提供任何有效的参考信息。</p>\n<p>不过，对于  <code>tuple</code> ，其中的元素类型经常是异构的。</p>\n<pre><code class=\"language-python\">Cookbook = tuple[str, int] # name, page count\n</code></pre>\n<p>当然，这样的代码很容易变得难懂。因为我们需要比照每个索引对应的元素内容的含义。我们可以用  <code>dict</code>  来替换：</p>\n<pre><code class=\"language-python\">food_lab = &#123;  \n    &quot;name&quot;: &quot;The Food Lab&quot;,  \n    &quot;page_count&quot;: 958  \n&#125;\n</code></pre>\n<p>但是如此一来， <code>dict</code>  中的键值会映射到不同的类型上。我们需要用  <code>dict[str, Union[int, str]]</code>  来表示该  <code>dict</code>  的类型。</p>\n<p>对于这种复杂类型的字典，推荐用  <code>TypedDict</code> 。</p>\n<h3 id=\"typeddict\"><a class=\"anchor\" href=\"#typeddict\">#</a>  <code>TypedDict</code></h3>\n<p><code>TypedDict</code>  在 Python 3.8 中引入。用于必须在字典中存储异构类型数据的情形。</p>\n<p>对于  <code>Json</code>   <code>YAML</code>  等文件解析得到的  <code>dict</code> ，其中的数据通常都是异构的。如果我们控制了  <code>dict</code>  的创建，那么我们可以使用  <code>dataclass</code>  或者  <code>class</code>  来管理这些数据。对于解析文件得到的内容，我们仍需要通过查看文档等方法来确认。</p>\n<p>我们可以用  <code>TypedDict</code>  来解决这一问题。</p>\n<pre><code class=\"language-python\">from typing import TypedDict  \nclass Range(TypedDict):  \n    min: float  \n    max: float\n\nclass NutritionInformation(TypedDict):  \n    value: int  \n    unit: str  \n    confidenceRange95Percent: Range  \n    standardDeviation: float\n\nclass RecipeNutritionInformation(TypedDict):  \n    recipes_used: int  \n    calories: NutritionInformation  \n    fat: NutritionInformation  \n    protein: NutritionInformation  \n    carbs: NutritionInformation\n\nnutrition_information:RecipeNutritionInformation = \\  \n    get_nutrition_from_spoonacular(recipe_name)\n</code></pre>\n<p>上述代码很清晰的表示了字典中的键值对类型。当字典类型发生了变化时，我们可以通过  <code>mypy</code>  帮助检查。如果我们忘记更新该  <code>TypedDict</code> ， <code>mypy</code>  能够帮助我们找出错误。</p>\n<h3 id=\"构建新的容器类型\"><a class=\"anchor\" href=\"#构建新的容器类型\">#</a> 构建新的容器类型</h3>\n<h4 id=\"generics\"><a class=\"anchor\" href=\"#generics\">#</a>  <code>Generics</code></h4>\n<p>如果确实现有类型无法表达我们想要的内容，我们可以通过  <code>Generics</code>  帮助构建新的容器类型。</p>\n<p>Generic 类型通常表示我们不关心其中的具体类型，但是它能够帮助我们限制用户使用不正确的类型。</p>\n<pre><code class=\"language-python\">def reverse(coll: list) -&gt; list:  \n    return coll[::-1]\n</code></pre>\n<p>对于  <code>reverse</code>  函数，我们不关系其中的具体类型，但是我们知道返回的列表和传入的列表的值类型是相同的。我们可以这样表示：</p>\n<pre><code class=\"language-python\">from typing import TypeVar  \nT = TypeVar('T')  \ndef reverse(coll: list[T]) -&gt; list[T]:  \n    return coll[::-1]\n</code></pre>\n<p>这样，一个  <code>int</code>  类型的  <code>list</code>  就绝不会产生一个  <code>str</code>  类型的  <code>list</code>  的了。</p>\n<p>基于此方式，我们可以表达更复杂的类型：</p>\n<pre><code class=\"language-python\">from collections import defaultdict  \nfrom typing import Generic, TypeVar\n\nNode = TypeVar(&quot;Node&quot;)  \nEdge = TypeVar(&quot;Edge&quot;)\n\n# directed graph  \nclass Graph(Generic[Node, Edge]):  \n    def __init__(self):  \n        self.edges: dict[Node, list[Edge]] = defaultdict(list)\n        \n    def add_relation(self, node: Node, to: Edge):  \n        self.edges[node].append(to)\n        \n    def get_relations(self, node: Node) -&gt; list[Edge]:  \n        return self.edges[node]\n</code></pre>\n<p>这样，我们可以使用  <code>Graph</code>  表示更丰富的类型：</p>\n<pre><code class=\"language-python\">cookbooks: Graph[Cookbook, Cookbook] = Graph()  \nrecipes: Graph[Recipe, Recipe] = Graph()  \ncookbook_recipes: Graph[Cookbook, Recipe] = Graph()  \nrecipes.add_relation(Recipe('Pasta Bolognese'),  \n                    Recipe('Pasta with Sausage and Basil'))  \ncookbook_recipes.add_relation(Cookbook('The Food Lab'),  \n                            Recipe('Pasta Bolognese'))\n</code></pre>\n<p><code>Generic</code>  能够让我们复用更多的代码，减少错误的出现。</p>\n<p><code>Generic</code>  的其他用途：</p>\n<pre><code class=\"language-python\">def get_nutrition_info(recipe: str) -&gt; Union[NutritionInfo, APIError]:  \n# ...  \ndef get_ingredients(recipe: str) -&gt; Union[list[Ingredient], APIError]:  \n#...  \ndef get_restaurants_serving(recipe: str) -&gt; Union[list[Restaurant], APIError]:  \n# ...\n</code></pre>\n<p>显然，上述方式需要我们在每个返回值中都添加一个  <code>APIError</code>  类型，非常繁琐。我们可以这样改写：</p>\n<pre><code class=\"language-python\">T = TypeVar(&quot;T&quot;)  \nAPIResponse = Union[T, APIError]  \ndef get_nutrition_info(recipe: str) -&gt; APIResponse[NutritionInfo]:  \n    # ...  \ndef get_ingredients(recipe: str) -&gt; APIResponse[list[Ingredient]]:  \n    #...  \ndef get_restaurants_serving(recipe: str) -&gt; APIResponse[list[Restaurant]]:  \n    # ...\n</code></pre>\n<h3 id=\"修改现有类型\"><a class=\"anchor\" href=\"#修改现有类型\">#</a> 修改现有类型</h3>\n<p>有些时候，我们可以在现有类型的基础上修改，以实现我们想要的效果。假定我们想要让字典支持别名，即不同的  <code>key</code>  能够指向相同的  <code>value</code> 。如果复制多个  <code>value</code>  的话，在修改时容易漏掉其他对应  <code>key</code>  的修改。这时，我们可以通过创建  <code>dict</code>  的子类来实现以上效果。</p>\n<p>以上需求，我们可以创建一个  <code>dict</code>  的子类来实现：</p>\n<pre><code class=\"language-python\">class NutritionalInformation(dict):  \n    def __getitem__(self, key):  \n    try:  \n        return super().__getitem__(key)  \n    except KeyError:  \n        pass  \n    for alias in get_aliases(key):  \n        try:  \n            return super().__getitem__(alias)  \n        except KeyError:  \n            pass  \n    raise KeyError(f&quot;Could not find &#123;key&#125; or any of its aliases&quot;)\n</code></pre>\n<p>但是，以上的代码实现存在问题。当我们继承一个  <code>dict</code>  的时候，我们无法保证内部函数会调用我们覆盖的函数实现。内置类型的许多函数使用内联代码调用来保证性能。如果只是添加额外的方法，那么继承内置类型是可行的。但是在将来，也有可能发生类似的错误，因此最好避免继承内置类型。</p>\n<p>为了解决这一问题，我们可以使用  <code>UserDict</code> ：</p>\n<pre><code class=\"language-python\">from collections import UserDict  \nclass NutritionalInformation(UserDict):  \n    def __getitem__(self, key):  \n        try:  \n            return self.data[key]  \n        except KeyError:  \n            pass  \n        for alias in get_aliases(key):  \n            try:  \n                return self.data[alias]  \n            except KeyError:  \n                pass  \n        raise KeyError(f&quot;Could not find &#123;key&#125; or any of its aliases&quot;)\n</code></pre>\n<p>我们可以使用  <code>self.data</code>  来获取底层的原生  <code>dict</code>  数据。除此之外，还有  <code>UserList</code>  和  <code>UserString</code>  可以帮助我们对  <code>list</code>  和  <code>str</code>  实现类似的代码。不过需要注意，这些  <code>User*</code>  类型可能会带来一定的性能损耗，需要根据实际情况考虑。</p>\n<h3 id=\"抽象类型\"><a class=\"anchor\" href=\"#抽象类型\">#</a> 抽象类型</h3>\n<p>通过定义抽象类，我们可以自定义容器类型。 <code>collection.abc</code>  中提供了许多的抽象基类，我们可以根据需求使用。</p>\n<p>上一节中，我们提到了  <code>UserDict</code>   <code>UserList</code>   <code>UserString</code> ，但是并没有  <code>UserSet</code> 。本节我们基于  <code>abc</code>  来实现。</p>\n<p><code>collections.abc.Set</code>  提供了  <code>set</code>  的抽象基类定义。其中包含以下函数：</p>\n<ul>\n<li><code>__contains__</code> ：检查是否包含某个元素</li>\n<li><code>__iter__</code> ：用于迭代元素</li>\n<li><code>__len__</code> ：返回容器中的元素个数</li>\n</ul>\n<p>只要我们实现了以上三个函数，我们就可以实现一个类似的  <code>set</code> 。</p>\n<pre><code class=\"language-python\">import collections  \nclass AliasedIngredients(collections.abc.Set):  \n    def __init__(self, ingredients: set[str]):  \n        self.ingredients = ingredients  \n        \n    def __contains__(self, value: str):  \n        return value in self.ingredients or any(alias in self.ingredients for alias in get_aliases(value))  \n        \n    def __iter__(self):  \n        return iter(self.ingredients)  \n        \n    def __len__(self):  \n        return len(self.ingredients)\n\n&gt;&gt;&gt; ingredients = AliasedIngredients(&#123;'arugula', 'eggplant', 'pepper'&#125;)  \n&gt;&gt;&gt; for ingredient in ingredients:  \n&gt;&gt;&gt; print(ingredient)  \n'arugula'  \n'eggplant'  \n'pepper'\n\n&gt;&gt;&gt; print(len(ingredients))  \n3  \n&gt;&gt;&gt; print('arugula' in ingredients)  \nTrue  \n&gt;&gt;&gt; print('rocket' in ingredients)  \nTrue  \n&gt;&gt;&gt; list(ingredients | AliasedIngredients(&#123;'garlic'&#125;))  \n['pepper', 'arugula', 'eggplant', 'garlic']\n</code></pre>\n<p>除此之外，我们还可以用  <code>abc</code>  来提供类型注释：</p>\n<pre><code class=\"language-python\">def print_items(items: collections.abc.Iterable):  \n    for item in items:  \n        print(item)\n</code></pre>\n<p>只要对象支持  <code>__iter__</code>  方法，那么就符合这个函数的参数要求。我们可以通过 ABC 来定义更复杂的参数类型。也是 Duck Type 的关键实现。</p>\n<p>Python 3.9 提供了 25 中不同的抽象基类。可以查看<a href=\"https://docs.python.org/3/library/collections.abc.html#module-collections.abc\">文档</a>了解<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>。</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://docs.python.org/3/library/collections.abc.html#module-collections.abc\">collections.abc — Abstract Base Classes for Containers — Python 3.11.4 documentation</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Computer-Science",
                "Python",
                "Type-Annotation"
            ]
        },
        {
            "id": "https://linn-ylz.com/Computer-Science/Python/dataclass-and-YAML-transform/",
            "url": "https://linn-ylz.com/Computer-Science/Python/dataclass-and-YAML-transform/",
            "title": "dataclass 与 YAML 的相互转换",
            "date_published": "2022-11-10T15:17:33.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在许多工程项目中，经常需要配置一些选项供用户或者员工自己使用。以人工智能领域为例， <code>Paddlepaddle</code> 、 <code>mmdetection</code>  等深度学习框架都需要根据需求在配置文件中配置数据、网络等相关参数。 <code>Paddlepaddle</code>  使用  <code>YAML</code>  格式存储配置信息， <code>mmdetection</code>  则直接使用  <code>Python</code>  文件来设定配置。此外， <code>JSON</code>  格式也是常用的数据存储格式。无论何种格式，当配置信息不断增加膨胀之后，如何组织配置的结构就成为了一件迫切需要考虑的事情。</p>\n<p>这三种配置格式孰优孰劣，我无法评价。由于我目前接手的工作中使用的是  <code>YAML</code>  格式的配置文件，因此本文主要介绍最近一段时间经过调研搜索后，我决定采用的一种配置文件组织方案。</p>\n<p>在实际阐述方案之前，有必要阐述一下  <code>YAML</code>  和  <code>dataclass</code>  这两个概念。如果读者对这二者比较熟悉，可以直接跳过相关部分。</p>\n<h2 id=\"yaml-中的-tag\"><a class=\"anchor\" href=\"#yaml-中的-tag\">#</a>  <code>YAML</code>  中的  <code>tag</code></h2>\n<p><code>YAML</code>  诞生于 2004 年，根据官网说法<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>，其有 7 条设计目标，其中，易读、不同编程语言间良好的兼容性、可扩展等特性使得其被广泛用于存储格式化的信息。</p>\n<p>关于其具体的语法，可以参考<a href=\"https://yaml.org/spec/1.2.2/\">官方网站</a>或者其他<a href=\"https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html\">教程</a>，这里不做过多介绍，本文主要介绍其  <code>tag</code>  标签功能。</p>\n<p><code>tag</code>  可以标注  <code>YAML</code>  中数据的类型或者其归属的对象类别，其可以是  <code>str</code> 、 <code>int</code> 、 <code>float</code>  等基本类型，也可以是用户自己定义的任何有意义的类别名称。这些标签可以帮助我们在阅读或者解析的时候，更方便地判断数据的归属。</p>\n<p>我们不妨来看一个例子：</p>\n<pre><code class=\"language-yaml\">name: 'linn'\nage: 18\ngender: 'male'\n</code></pre>\n<p>在上述  <code>YAML</code>  文件中，我们定义了三个属性，可以很清晰地看到，这三个属性描述的都是个人信息，它们在许多场景下通常会结伴出现。对于这种数据，有一个专门的称呼叫做数据泥团（Data Clumps）<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>。有时候，我们会发现某些函数包含大量的参数，而这些参数往往一起出现，很显然，在通常的编程语言中，用结构体或者类来组织这种数据，比直接使用原生类型是更好的选择。而在  <code>YAML</code>  中，我们也可以用  <code>tag</code>  来表征这一特点：</p>\n<pre><code class=\"language-yaml\">!Person\nname: 'linn'\nage: 18\ngender: 'male'\n</code></pre>\n<p>在  <code>YAML</code>  中，使用  <code>!</code>  来表示这一标识是一个  <code>tag</code>  的名称。相比于仅仅列出属性，增加一个  <code>tag</code>  可以使得数据的语义更加明晰。当我们的配置文件中的数据项膨胀到数十个的时候，增加一个  <code>tag</code>  能够帮助你更好的理解配置选项的意义。</p>\n<h2 id=\"解析-yaml-的-tag\"><a class=\"anchor\" href=\"#解析-yaml-的-tag\">#</a> 解析  <code>YAML</code>  的  <code>tag</code></h2>\n<p>当然，光在  <code>YAML</code>  中定义一个  <code>tag</code> ，并没有全部发挥出  <code>tag</code>  的作用。 <code>tag</code>  黑能配合编程语言，帮助解析  <code>YAML</code>  文件中的内容。</p>\n<p>想象一下，当没有  <code>tag</code>  的时候，我们通常是如何解析  <code>YAML</code>  的？一般情况的代码大致如下（为了方便，直接在文件中用字符串表示  <code>YAML</code>  内容）：</p>\n<pre><code class=\"language-python\">import yaml\nclass Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\nyaml_str = &quot;&quot;&quot;\nname: 'linn'\nage: 18\ngender: 'male'\n&quot;&quot;&quot;\ncontent = yaml.load(yaml_str, Loader=yaml.SafeLoader)\n\n&quot;&quot;&quot;\ncontent\n&#123;'name': 'linn', 'age': 18, 'gender': 'male'&#125;\n&quot;&quot;&quot;\n\nperson = Person(**content)\n</code></pre>\n<p>以上代码可以分为两个部分：</p>\n<ol>\n<li>读取  <code>YAML</code>  文件的内容，赋值给某个对象。一般而言，读入的内容会存储在字典或者列表中；</li>\n<li>创建某个类的对象，利用读取的  <code>YAML</code>  内容为其初始化。<br />\n对于结构简单的  <code>YAML</code>  文件，上述方法还可接受，但是如果  <code>YAML</code>  文件变得复杂，那么按照上述方法来解析的代码便会变得繁琐。</li>\n</ol>\n<p>我们可以看下面这个例子<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup>：</p>\n<pre><code class=\"language-python\">name: MyBusiness\nlocations:\n  - &quot;Hawaii&quot;\n  - &quot;India&quot;\n  - &quot;Japan&quot;\nemployees:\n  - !Employee\n    name: Matthew Burruss\n    id: 1\n  - !Employee\n    name: John Doe\n    id: 2\n</code></pre>\n<p>显然，如果  <code>employees</code>  中的内容较多，我们甚至还需要写一个循环来初始化这些对象。而通过结合  <code>YAML</code>  的  <code>tag</code> ，我们可以自定义  <code>constructor</code>  来解析其内容：</p>\n<pre><code class=\"language-python\">import yaml\n\nclass Employee:\n  &quot;&quot;&quot;Employee class.&quot;&quot;&quot;\n  def __init__(self, name, id):\n    self._name, self._id = name, id\n\ndef employee_constructor(loader: yaml.SafeLoader, node: yaml.nodes.MappingNode) -&gt; Employee:\n  &quot;&quot;&quot;Construct an employee.&quot;&quot;&quot;\n  return Employee(**loader.construct_mapping(node))\n\ndef get_loader():\n  &quot;&quot;&quot;Add constructors to PyYAML loader.&quot;&quot;&quot;\n  loader = yaml.SafeLoader\n  loader.add_constructor(&quot;!Employee&quot;, employee_constructor)\n  return loader\n\nyaml.load(open(&quot;config.yml&quot;, &quot;rb&quot;), Loader=get_loader())\n&quot;&quot;&quot;\n&#123;\n  'name': 'MyBusiness',\n  'locations': ['Hawaii', 'India', 'Japan'],\n  'employees': [\n    &lt;__main__.Employee object at 0x7f0ea2694d10&gt;,\n    &lt;__main__.Employee object at 0x7f0ea2694d90&gt;\n  ]\n&#125;\n&quot;&quot;&quot;\n</code></pre>\n<p>这样一来，我们可以直接生成对应的类的对象，省去了自己创建的过程。</p>\n<h2 id=\"dataclass\"><a class=\"anchor\" href=\"#dataclass\">#</a>  <code>dataclass</code></h2>\n<p>你是否经常面临下面的情形：</p>\n<pre><code class=\"language-python\">class Person:\n    def __init__(self, name, age, gender, ...):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        ...\n</code></pre>\n<p>当我们在  <code>__init__</code>  函数的参数列表中敲击了一系列参数之后，又需要在  <code>__init__</code>  函数体中，将它们一一赋值给类成员变量。一旦这些变量数量增多，这项工作就成了一项非常繁琐无趣的事情。</p>\n<p>很多时候，我们定义类只是想将一些相关的数据组织起来，但却不得不动手编写许多重复的代码。于是乎，这里就轮到  <code>dataclass</code>  出场了。类比而言， <code>dataclass</code>  可以看成是  <code>C/C++</code>  中的结构体，能够方便我们将一系列的数据组合在一起，同时给每个成员指定默认值，不用再手动为成员变量赋值。</p>\n<p>可以看下面这个例子<sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup>：</p>\n<pre><code class=\"language-python\">from dataclasses import dataclass\n@dataclass\nclass Lang: \n\t&quot;&quot;&quot;a dataclass that describes a programming language&quot;&quot;&quot;\n\tname: str = 'python'\n\tstrong_type: bool = True\n\tstatic_type: bool = False\n\tage: int = 28 \n</code></pre>\n<p>这里定义了一个编程语言的类  <code>Lang</code> ，我们从  <code>dataclasses</code>  模块中引入了装饰器  <code>dataclass</code> 。之后，我们在类中定义了一系列成员变量。</p>\n<p>使用上述方式定义之后，该类会自动生成一个初始化构造函数：</p>\n<pre><code class=\"language-python\">def __init__(self, name: str='python',\n            strong_type: bool=True,\n            static_type: bool=False,\n            age: int=28):\n    self.name = name\n    self.strong_type = strong_type\n    self.static_type = static_type\n    self.age = age\n</code></pre>\n<p>除此之外， <code>__repr__</code>  和  <code>__eq__</code>  函数也会自动生成，便于打印和比较。通过以上方式，再也不用每次都自己定义一个构造函数，并且为每个变量都赋值一遍，省却了繁琐的操作。</p>\n<p>执行效果如下：</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; Lang()\nLang(name='python', strong_type=True, static_type=False, age=28)\n&gt;&gt;&gt; Lang('js', False, False, 23)\nLang(name='js', strong_type=False, static_type=False, age=23)\n&gt;&gt;&gt; Lang('js', False, False, 23) == Lang()\nFalse\n&gt;&gt;&gt; Lang('python', True, False, 28) == Lang()\nTrue\n</code></pre>\n<p>除此之外， <code>dataclass</code>  可以通过  <code>asdict</code>  或者  <code>astuple</code>  生成类成员的字典或者元组。</p>\n<p>需要注意的是，对于  <code>mutable</code>  类型的变量，如  <code>list</code> 、 <code>map</code>  等，推荐使用  <code>field</code>  来初始化：</p>\n<pre><code class=\"language-python\">from dataclasses import dataclass, field\n@dataclass\nclass C:\n    mylist: List[int] = field(default_factory=list)\n</code></pre>\n<p>其他功能的详细介绍，可以参考<a href=\"https://www.cnblogs.com/apocelipes/p/10284346.html\">这篇博客</a>或者<a href=\"https://peps.python.org/pep-0557/\">官方网站</a>的说明。</p>\n<h2 id=\"结合-dataclass-和-yaml\"><a class=\"anchor\" href=\"#结合-dataclass-和-yaml\">#</a> 结合  <code>dataclass</code>  和  <code>YAML</code></h2>\n<p>在介绍以上两部分内容之后，我们可以结合  <code>dataclass</code>  和  <code>YAML</code>  来方便地构建配置类，并从  <code>YAML</code>  文件导入，或者导出到  <code>YAML</code>  文件。</p>\n<p>参考了相关资料后<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3:1\">[3:1]</a></sup><sup class=\"footnote-ref\"><a href=\"#fn5\" id=\"fnref5\">[5]</a></sup>，我编写了下面的参数类模板。</p>\n<pre><code class=\"language-python\">import sys\nimport yaml\nfrom yaml import SafeLoader, SafeDumper\nfrom yaml.nodes import MappingNode\nfrom dataclasses import dataclass, asdict, field, is_dataclass\nfrom typing import Type\nfrom typing_extensions import Self\n\n\n@dataclass\nclass BaseConfig(object):\n    @classmethod\n    def constructor(cls, loader: SafeLoader, node: MappingNode) -&gt; Self:\n        &quot;&quot;&quot;Construct an instance.&quot;&quot;&quot;\n        return cls(**loader.construct_mapping(node))\n\n    @classmethod\n    def loader(cls, safe_loader: SafeLoader) -&gt; Type[SafeLoader]:\n        &quot;&quot;&quot;Add constructors to PyYAML loader.&quot;&quot;&quot;\n        safe_loader = yaml.SafeLoader\n        safe_loader.add_constructor(f&quot;!&#123;cls.__name__&#125;&quot;, cls.constructor)\n        for (name, data_fields) in cls.__dataclass_fields__.items():\n            cls_type = data_fields.type\n            if is_dataclass(cls_type):\n                safe_loader.add_constructor(f&quot;!&#123;cls_type.__name__&#125;&quot;, cls_type.constructor)\n                safe_loader = cls_type.loader(SafeLoader)\n        return safe_loader\n\n    @classmethod\n    def representer(cls, dumper: SafeDumper, config) -&gt; MappingNode:\n        &quot;&quot;&quot;Represent an instance as a YAML mapping node.&quot;&quot;&quot;\n        return dumper.represent_mapping(f&quot;!&#123;cls.__name__&#125;&quot;, config.__dict__)\n\n    @classmethod\n    def dumper(cls, safe_dumper: SafeDumper) -&gt; Type[SafeDumper]:\n        &quot;&quot;&quot;Add representers to a YAML seriailizer.&quot;&quot;&quot;\n        # safe_dumper = yaml.SafeDumper\n        safe_dumper.add_representer(cls, cls.representer)\n        for (name, data_fields) in cls.__dataclass_fields__.items():\n            cls_type = data_fields.type\n            if is_dataclass(cls_type):\n                safe_dumper.add_representer(cls_type, cls_type.representer)\n                safe_dumper = cls_type.dumper(safe_dumper)\n        return safe_dumper\n\n\n@dataclass\nclass DatasetConfig(BaseConfig):\n    data_root_path: str = &quot;./data/coco&quot;\n    train_path: str = &quot;./data/coco/train&quot;\n    train_ann_path: str = &quot;./data/coco/annotations/instances_train2017.json&quot;\n\n\n@dataclass\nclass COCODatasetConfig(BaseConfig):\n    name: str = &quot;COCO&quot;\n    num_classes: int = 80\n    dataset: DatasetConfig = field(default_factory=DatasetConfig)\n\n\n@dataclass\nclass COCODataConfig(BaseConfig):\n    train_data: COCODatasetConfig = field(default_factory=COCODatasetConfig)\n    val_data: COCODatasetConfig = field(default_factory=COCODatasetConfig)\n\n    # If you want dump without tag, change the tag name of the class\n    # to 'tag:yaml.org,2002:map', this is the default map type of YAML\n    # @classmethod\n    # def representer(cls, dumper: SafeDumper, config) -&gt; MappingNode:\n    #     &quot;&quot;&quot;Represent an instance as a YAML mapping node.&quot;&quot;&quot;\n    #     return dumper.represent_mapping(&quot;tag:yaml.org,2002:map&quot;, config.__dict__)\n\nif __name__ == &quot;__main__&quot;:\n    # config = COCODatasetConfig()\n    # config = yaml.load(open(&quot;output.yaml&quot;, &quot;rb&quot;), Loader=COCODataConfig.loader(SafeLoader))\n    config = COCODataConfig()\n    print(config)\n    print(asdict(config))\n    # config = DatasetConfig()\n    # with open(&quot;output.yaml&quot;, &quot;w&quot;) as stream:\n        # stream.write(yaml.dump(config, Dumper=COCODatasetConfig.dumper()))\n        # stream.write(yaml.dump(config, Dumper=COCODataConfig.dumper(SafeDumper)))\n    # yaml.dump(config, sys.stdout, Dumper=COCODatasetConfig.dumper(), sort_keys=False)\n    yaml.dump(config, sys.stdout, Dumper=COCODataConfig.dumper(SafeDumper), sort_keys=False)\n\n\n</code></pre>\n<p>上述模板可以支持多个  <code>dataclass</code>  类别的嵌套，并且会保留每个类别的  <code>tag</code>  标签，便于将来再读取配置的内容。</p>\n<p>如果不想输出某个  <code>dataclass</code>  类的  <code>tag</code> ，则重载其  <code>representer</code>  和  <code>loader</code>  函数，修改其中设定的  <code>tag</code>  名称为  <code>tag:yaml.org,2002:map</code> <sup class=\"footnote-ref\"><a href=\"#fn6\" id=\"fnref6\">[6]</a></sup>。其他类型可以参看官方文档<sup class=\"footnote-ref\"><a href=\"#fn7\" id=\"fnref7\">[7]</a></sup>。</p>\n<p>如果某些变量依赖于其他变量的赋值，可以使用  <code>__post_init__</code>  方法：</p>\n<pre><code class=\"language-python\">@dataclass\nclass C:\n    a: int\n    b: int\n    c: int = field(init=False)\n \n    def __post_init__(self):\n        self.c = self.a + self.b\n</code></pre>\n<p>此外，如果需要额外的参数用于初始化，但是之后的程序中不需要用到它的话，可以指定一个  <code>field</code>  的类型注解为  <code>dataclasses.InitVar</code> ，那么这个  <code>field</code>  将只能在初始化过程中（ <code>__init__</code>  和  <code>__post_init__</code> ）使用，当初始化完成后访问该  <code>field</code>  会返回一个 <code>dataclasses.Field</code>  对象而不是  <code>field</code>  原本的值，也就是该  <code>field</code>  不再是一个可访问的数据对象。比如一个由数据库对象，它<strong>只需要在初始化的过程中被访问</strong>：</p>\n<pre><code class=\"language-python\">@dataclass\nclass C:\n    i: int\n    j: int = None\n    database: InitVar[DatabaseType] = None\n \n    def __post_init__(self, database):\n        if self.j is None and database is not None:\n            self.j = database.lookup('j')\n \nc = C(10, database=my_database)\n</code></pre>\n<p><code>database</code>  只在初始化过程中用于初始化  <code>i, j</code>  ，后续无法再访问，可以认为是传递了一个额外的参数用于初始化操作。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>通过以上内容，我们得到了一个用于  <code>YAML</code>  格式的通用模板类，用于导入或者导出相关的配置内容，帮助我们更好地管理配置文件中参数的结构，提高工作效率。&lt;span class=&quot;spoiler&quot;&gt; 减少加班 &lt;/span&gt;</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://yaml.org/spec/1.2.2/\">YAML Ain’t Markup Language (YAML™) revision 1.2.2</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><a href=\"https://refactoring.guru/smells/data-clumps\">Data Clumps (refactoring.guru)</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>来自博客 <a href=\"https://matthewpburruss.com/post/yaml/\">A Powerful Python Trick: Custom YAML tags &amp; PyYAML | Matthew Burruss (matthewpburruss.com)</a> <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a> <a href=\"#fnref3:1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p>来自博客 <a href=\"https://www.cnblogs.com/apocelipes/p/10284346.html\">Python3.7 dataclass 使用指南 - apocelipes - 博客园 (cnblogs.com)</a> <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn5\" class=\"footnote-item\"><p><a href=\"https://qiita.com/kzmssk/items/483f25f47e0ed10aa948\">dataclass を使った YAML 形式で保存／ロード可能な設定クラス - Qiita</a> <a href=\"#fnref5\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn6\" class=\"footnote-item\"><p><a href=\"https://caosiyang.github.io/posts/2020/08/30/pyyaml/\">PyYAML 笔记 - 一个单板滑雪爱好者的编程笔记 (caosiyang.github.io)</a> <a href=\"#fnref6\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn7\" class=\"footnote-item\"><p><a href=\"https://yaml.org/type/index.html\">Language-Independent Types for YAML™ Version 1.1</a> <a href=\"#fnref7\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Computer-Science",
                "Algorithm",
                "Python",
                "YAML",
                "dataclass"
            ]
        }
    ]
}