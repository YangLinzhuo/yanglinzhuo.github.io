{
    "version": "https://jsonfeed.org/version/1",
    "title": "林•初夏 • All posts by \"tiddlywiki\" category",
    "description": "Linn 的个人博客",
    "home_page_url": "https://linn-ylz.com",
    "items": [
        {
            "id": "https://linn-ylz.com/TiddlyWiki/tiddlywiki-fishing/",
            "url": "https://linn-ylz.com/TiddlyWiki/tiddlywiki-fishing/",
            "title": "TiddlyWiki 渐进学习插件 Fishing",
            "date_published": "2022-08-08T14:22:30.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p><code>TiddlyWiki</code>  是一款非常好的用于制作个人  <code>Wiki</code>  的软件。除此以外，结合其他各种插件，还能够实现许多丰富的功能。例如， <code>Fishing</code>  插件是用于  <code>TiddlyWiki</code>  的一款类  <code>Anki</code>  的软件，用于帮助复习各种知识。</p>\n<h1 id=\"在-tiddlywiki-xp-中集成-fishing-插件\"><a class=\"anchor\" href=\"#在-tiddlywiki-xp-中集成-fishing-插件\">#</a> 在 TiddlyWiki xp 中集成 Fishing 插件</h1>\n<h2 id=\"下载-fishing-插件\"><a class=\"anchor\" href=\"#下载-fishing-插件\">#</a> 下载 Fishing 插件</h2>\n<p>由于作者提供的  <code>TiddlyWiki</code>  是其封装的版本，而我个人使用的是  <code>TiddlyWiki xp</code>  这一版本，因此需要找到其中插件相关的内容再进行导入。</p>\n<p>以下提供两种方法，这里推荐方法一，因为它能够较为及时地更新，方法二则需要自己手动更新。</p>\n<h2 id=\"方法一推荐\"><a class=\"anchor\" href=\"#方法一推荐\">#</a> 方法一（推荐）</h2>\n<p>推荐使用  <code>TW-CPL</code>  进行安装，其<a href=\"https://tw-cpl.netlify.app/#Index:Index\">官网</a>提供了许多的  <code>TiddlyWiki</code>  插件。参照官网的方法，将网址导入到自己的  <code>TiddlyWiki</code>  中即可使用该插件库搜索并安装相应的插件。</p>\n<p>在导入完毕后，按照  <code>控制台-插件-获取更多插件-太微中文社区插件源（GitHub版）-开启插件程式库</code>  的顺序进入插件浏览列表，在其中搜索  <code>Fishing</code>  即可找到插件，然后点击安装即可。注意该插件有配套的多个插件，不要漏掉。</p>\n<h3 id=\"方法二\"><a class=\"anchor\" href=\"#方法二\">#</a> 方法二</h3>\n<p>在作者的 <a href=\"https://github.com/oflg\"> <code>GitHub</code>  主页</a> 下载以下插件，放入到  <code>MyPluginStore</code>  文件夹之下。然后在  <code>xp</code>  文件夹下的  <code>tiddlywiki.info</code>  文件中的  <code>plugins</code>  中添加以下内容。</p>\n<pre><code class=\"language-markdown\">&quot;oflg/fishing&quot;,\n&quot;oflg/fishing-analysis&quot;,\n&quot;oflg/fishing-cannedfish&quot;,\n&quot;oflg/fishing-catchfish&quot;,\n&quot;oflg/fishing-twpub&quot;,\n&quot;oflg/fishing-zh-Hans&quot;\n\n</code></pre>\n<h3 id=\"其他插件\"><a class=\"anchor\" href=\"#其他插件\">#</a> 其他插件</h3>\n<p>除了上述插件之外， <code>Fishing</code>  插件还需要额外安装以下插件：</p>\n<pre><code class=\"language-markdown\">\t&quot;tiddlywiki/dynannotate&quot;,\n\t&quot;tiddlywiki/dynaview&quot;\n</code></pre>\n<p>这两个插件是  <code>TiddlyWiki</code>  得官方插件，在  <code>tiddlywiki.info</code>  中添加上述两行即可。</p>\n<p>此外，还有  <code>ECharts</code>  插件需要安装，可以按照方法一在插件库中搜索安装。</p>\n<h3 id=\"不兼容问题\"><a class=\"anchor\" href=\"#不兼容问题\">#</a> 不兼容问题</h3>\n<p><code>TiddlyWiki xp</code>  中得  <code>tobibeer/preview</code>  以及  <code>tobibeer/appear</code>  插件与  <code>Fishing</code>  插件存在冲突。因为基本上用不到弹窗功能，禁用这两个插件即可， <code>TiddlyWiki xp</code>  作者本人也在后续版本中去除了这两个插件。</p>\n<h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<p>安装  <code>Fishing</code>  插件完成后，在需要记忆的条目中添加  <code>?</code>  标签即可加入到学习任务中。注意是半角的问号。其他功能可以参考<a href=\"https://tiddlymemo.org/\">官方教程</a>学习。</p>\n",
            "tags": [
                "TiddlyWiki",
                "Fishing"
            ]
        },
        {
            "id": "https://linn-ylz.com/TiddlyWiki/tilddlywiki-intro/",
            "url": "https://linn-ylz.com/TiddlyWiki/tilddlywiki-intro/",
            "title": "TiddlyWiki 介绍",
            "date_published": "2022-07-28T16:26:29.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>TiddlyWiki</code>  是一款受欢迎的个人  <code>Wiki</code>  制作交互式工具。 <code>TiddlyWiki</code>  通过最小的有意义的语义块 —— <code>tiddlers</code> （条目）来构建自己的知识库。通过标题唯一标记  <code>tiddlers</code> ，以便可以使用链接、标签、列表和宏进行结构化。条目（ <code>Tiddlers</code> ）使用维基文本（ <code>WikiText</code> ）符号，能够简明扼要地表示了各种文本格式和超文本功能。具体可以参考<a href=\"https://tiddlywiki.com/\">官方网站</a>。</p>\n<p>虽然  <code>TiddlyWiki</code>  本身是个非常有用的工具，可配置程度很高，但是上手难度也较大。这里比较推荐使用  <code>TiddlyWiki xp</code>  上手，可以戳此<a href=\"https://keatonlao.github.io/tiddlywiki-xp/\">链接</a>。 <code>TiddlyWiki xp</code>  本身配置了较多有用的插件，省却了自己动手配置的麻烦。同时，该  <code>Wiki</code>  中包含了丰富的教程，可以不断阅读深入了解该工具的使用方法。</p>\n<h1 id=\"安装与启动\"><a class=\"anchor\" href=\"#安装与启动\">#</a> 安装与启动</h1>\n<p>安装  <code>TiddlyWiki</code>  有多种方法。可以选择单一的  <code>html</code>  文件进行编辑，但是这样当以后内容过多时，文件体积便会较大，打开编辑时也会有不便。因此我选择了使用  <code>Node.js</code>  进行安装。因为安装过  <code>Hexo</code> ，所以  <code>Node.js</code>  的相关配置已经做好，只需要通过以下命令直接安装即可：</p>\n<pre><code class=\"language-bash\">npm install -g tiddlywiki\n</code></pre>\n<p>输入  <code>tiddlywiki --version</code>  能够看到版本号则说明成功安装。</p>\n<p>之后下载  <code>TiddlyWiki xp</code>  的压缩包并解压，然后  <code>cd</code>  到该文件夹下，其中应当包含  <code>xp</code>  和  <code>MyPluginStore</code>  两个文件夹。</p>\n<p>通过  <code>tiddlywiki xp --server</code>  可以启动服务，在浏览器中输入  <code>localhost:8080</code>  即可访问网页。不过，现在看到的网页还并不完全，网页显示的内容也仅占据左边的部分，右边产生了许多的空白。这是因为  <code>TiddlyWiki xp</code>  配置了许多插件，输入  <code>tiddlywiki xp --server</code>  命令后，不出意外应该会看到许多插件无法加载的警告。</p>\n<p>在这里，我们需要把存放了插件的文件夹  <code>MyPluginStore</code>  添加到环境变量中。之后，上述报错应当消除，网页也能够正常显示了。</p>\n<h1 id=\"和博客进行搭配\"><a class=\"anchor\" href=\"#和博客进行搭配\">#</a> 和博客进行搭配</h1>\n<p>通过以上步骤我们能够成功启动  <code>TiddlyWiki</code>  的服务并进行编辑，但是还无法和我们的博客进行结合。当我们将需要的内容编辑完毕之后，需要使用以下指令进行构建：</p>\n<pre><code class=\"language-bash\">tiddlywiki xp --build index\n</code></pre>\n<p>该指令会在  <code>xp/output/</code>  文件夹之下产生一个  <code>index.html</code>  文件，将该网页文件放在博客构建完成的文件夹下即可在博客中进行访问。我个人在博客的  <code>source</code>  文件夹下创建了  <code>wiki</code>  文件夹，在其中添加了  <code>index.md</code>  文件以生成  <code>index.html</code>  文件，并在首页侧栏添加了对应的图标和入口。在博客构建完成之后，使用  <code>tiddlywiki</code>  指令生成的  <code>index.html</code>  替换即可。</p>\n<p>通过以上方式即可在博客中添加  <code>Wiki</code>  的入口。</p>\n",
            "tags": [
                "Hexo",
                "TiddlyWiki"
            ]
        }
    ]
}